/* soapC.cpp
   Generated by gSOAP 2.8.111 for service.h

gSOAP XML Web services tools
Copyright (C) 2000-2021, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.111 2021-03-19 02:40:19 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, ""))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
	}
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code == NULL)
		soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Reason == NULL)
		soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", "");
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
				return NULL;
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_fault_subcode(struct soap *soap)
{
	const char **s = soap_faultsubcode(soap);
	return s ? *s : NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2 && soap->fault->SOAP_ENV__Reason)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)(void*)&soap->fault->faultstring;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_fault_string(struct soap *soap)
{
	const char **s = soap_faultstring(soap);
	return s ? *s : NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
			soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		return (const char**)(void*)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
		soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
	return (const char**)(void*)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_fault_detail(struct soap *soap)
{
	const char **s = soap_faultdetail(soap);
	return s ? *s : NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, NULL, &t))
				if ((soap->error && soap->error != SOAP_TAG_MISMATCH) || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, const char *tag, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, tag, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, tag, NULL, "xsd:int");
	case SOAP_TYPE_ns1__EResetMode:
		return soap_in_ns1__EResetMode(soap, tag, NULL, "ns1:EResetMode");
	case SOAP_TYPE_ns1__CodeDetection:
		return soap_in_ns1__CodeDetection(soap, tag, NULL, "ns1:CodeDetection");
	case SOAP_TYPE_ns1__PrelevementUnitaire:
		return soap_in_ns1__PrelevementUnitaire(soap, tag, NULL, "ns1:PrelevementUnitaire");
	case SOAP_TYPE_ns1__ArrayOfPrelevementUnitaire:
		return soap_in_ns1__ArrayOfPrelevementUnitaire(soap, tag, NULL, "ns1:ArrayOfPrelevementUnitaire");
	case SOAP_TYPE_ns1__MoulesPrelevesXml:
		return soap_in_ns1__MoulesPrelevesXml(soap, tag, NULL, "ns1:MoulesPrelevesXml");
	case SOAP_TYPE_ns1__PrelevementWS_USCORE1_USCORE0_USCORE9:
		return soap_in_ns1__PrelevementWS_USCORE1_USCORE0_USCORE9(soap, tag, NULL, "ns1:PrelevementWS_1_0_9");
	case SOAP_TYPE_ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9:
		return soap_in_ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9(soap, tag, NULL, "ns1:MoulesPrelevesXmlPourWS1_0_9");
	case SOAP_TYPE_ns1__RejetMoule:
		return soap_in_ns1__RejetMoule(soap, tag, NULL, "ns1:RejetMoule");
	case SOAP_TYPE_ns1__RejetMouleVue:
		return soap_in_ns1__RejetMouleVue(soap, tag, NULL, "ns1:RejetMouleVue");
	case SOAP_TYPE_ns1__ArrayOfRejetMouleVue:
		return soap_in_ns1__ArrayOfRejetMouleVue(soap, tag, NULL, "ns1:ArrayOfRejetMouleVue");
	case SOAP_TYPE_ns1__MoulesEjectesXml:
		return soap_in_ns1__MoulesEjectesXml(soap, tag, NULL, "ns1:MoulesEjectesXml");
	case SOAP_TYPE_ns1__Moule:
		return soap_in_ns1__Moule(soap, tag, NULL, "ns1:Moule");
	case SOAP_TYPE_ns1__ArrayOfMoule:
		return soap_in_ns1__ArrayOfMoule(soap, tag, NULL, "ns1:ArrayOfMoule");
	case SOAP_TYPE_ns1__MountedMoldsXml:
		return soap_in_ns1__MountedMoldsXml(soap, tag, NULL, "ns1:MountedMoldsXml");
	case SOAP_TYPE_PointerTo_ns1__ChangeSamples:
		return soap_in_PointerTo_ns1__ChangeSamples(soap, tag, NULL, "ns1:ChangeSamples");
	case SOAP_TYPE_PointerTo_ns1__GetVersions:
		return soap_in_PointerTo_ns1__GetVersions(soap, tag, NULL, "ns1:GetVersions");
	case SOAP_TYPE_PointerTo_ns1__ChangeMoldsInSampleTable:
		return soap_in_PointerTo_ns1__ChangeMoldsInSampleTable(soap, tag, NULL, "ns1:ChangeMoldsInSampleTable");
	case SOAP_TYPE_PointerTo_ns1__EraseMoldsInSampleTable:
		return soap_in_PointerTo_ns1__EraseMoldsInSampleTable(soap, tag, NULL, "ns1:EraseMoldsInSampleTable");
	case SOAP_TYPE_PointerTo_ns1__AddEjectedMolds:
		return soap_in_PointerTo_ns1__AddEjectedMolds(soap, tag, NULL, "ns1:AddEjectedMolds");
	case SOAP_TYPE_PointerTo_ns1__ChangeMountedMolds:
		return soap_in_PointerTo_ns1__ChangeMountedMolds(soap, tag, NULL, "ns1:ChangeMountedMolds");
	case SOAP_TYPE_PointerTo_ns1__GetMoldsInSampleTable:
		return soap_in_PointerTo_ns1__GetMoldsInSampleTable(soap, tag, NULL, "ns1:GetMoldsInSampleTable");
	case SOAP_TYPE_PointerTo_ns1__EjectedMolds:
		return soap_in_PointerTo_ns1__EjectedMolds(soap, tag, NULL, "ns1:EjectedMolds");
	case SOAP_TYPE_PointerTo_ns1__ReadenMolds:
		return soap_in_PointerTo_ns1__ReadenMolds(soap, tag, NULL, "ns1:ReadenMolds");
	case SOAP_TYPE_PointerTo_ns1__CumulCounts:
		return soap_in_PointerTo_ns1__CumulCounts(soap, tag, NULL, "ns1:CumulCounts");
	case SOAP_TYPE_PointerTo_ns1__Measures:
		return soap_in_PointerTo_ns1__Measures(soap, tag, NULL, "ns1:Measures");
	case SOAP_TYPE_PointerTo_ns1__MountedMolds:
		return soap_in_PointerTo_ns1__MountedMolds(soap, tag, NULL, "ns1:MountedMolds");
	case SOAP_TYPE_PointerTo_ns1__GetAlarms:
		return soap_in_PointerTo_ns1__GetAlarms(soap, tag, NULL, "ns1:GetAlarms");
	case SOAP_TYPE_PointerTo_ns1__GetAlarmsSinceLastQuery:
		return soap_in_PointerTo_ns1__GetAlarmsSinceLastQuery(soap, tag, NULL, "ns1:GetAlarmsSinceLastQuery");
	case SOAP_TYPE_PointerTo_ns1__Counts:
		return soap_in_PointerTo_ns1__Counts(soap, tag, NULL, "ns1:Counts");
	case SOAP_TYPE_PointerTo_ns1__ChangeSamplesResponse_ChangeSamplesResult:
		return soap_in_PointerTo_ns1__ChangeSamplesResponse_ChangeSamplesResult(soap, tag, NULL, "ns1:ChangeSamplesResponse-ChangeSamplesResult");
	case SOAP_TYPE_PointerTons1__MoulesPrelevesXml:
		return soap_in_PointerTons1__MoulesPrelevesXml(soap, tag, NULL, "ns1:MoulesPrelevesXml");
	case SOAP_TYPE_PointerTo_ns1__GetVersionsResponse_GetVersionsResult:
		return soap_in_PointerTo_ns1__GetVersionsResponse_GetVersionsResult(soap, tag, NULL, "ns1:GetVersionsResponse-GetVersionsResult");
	case SOAP_TYPE_PointerTo_ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult:
		return soap_in_PointerTo_ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult(soap, tag, NULL, "ns1:ChangeMoldsInSampleTableResponse-ChangeMoldsInSampleTableResult");
	case SOAP_TYPE_PointerTons1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9:
		return soap_in_PointerTons1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9(soap, tag, NULL, "ns1:MoulesPrelevesXmlPourWS1_0_9");
	case SOAP_TYPE_PointerTo_ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult:
		return soap_in_PointerTo_ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult(soap, tag, NULL, "ns1:EraseMoldsInSampleTableResponse-EraseMoldsInSampleTableResult");
	case SOAP_TYPE_PointerTons1__MoulesEjectesXml:
		return soap_in_PointerTons1__MoulesEjectesXml(soap, tag, NULL, "ns1:MoulesEjectesXml");
	case SOAP_TYPE_PointerTo_ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult:
		return soap_in_PointerTo_ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult(soap, tag, NULL, "ns1:ChangeMountedMoldsResponse-ChangeMountedMoldsResult");
	case SOAP_TYPE_PointerTons1__MountedMoldsXml:
		return soap_in_PointerTons1__MountedMoldsXml(soap, tag, NULL, "ns1:MountedMoldsXml");
	case SOAP_TYPE_PointerTo_ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult:
		return soap_in_PointerTo_ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult(soap, tag, NULL, "ns1:GetMoldsInSampleTableResponse-GetMoldsInSampleTableResult");
	case SOAP_TYPE_PointerTo_ns1__EjectedMoldsResponse_EjectedMoldsResult:
		return soap_in_PointerTo_ns1__EjectedMoldsResponse_EjectedMoldsResult(soap, tag, NULL, "ns1:EjectedMoldsResponse-EjectedMoldsResult");
	case SOAP_TYPE_PointerTo_ns1__ReadenMoldsResponse_ReadenMoldsResult:
		return soap_in_PointerTo_ns1__ReadenMoldsResponse_ReadenMoldsResult(soap, tag, NULL, "ns1:ReadenMoldsResponse-ReadenMoldsResult");
	case SOAP_TYPE_PointerTo_ns1__CumulCountsResponse_CumulCountsResult:
		return soap_in_PointerTo_ns1__CumulCountsResponse_CumulCountsResult(soap, tag, NULL, "ns1:CumulCountsResponse-CumulCountsResult");
	case SOAP_TYPE_PointerTo_ns1__MeasuresResponse_MeasuresResult:
		return soap_in_PointerTo_ns1__MeasuresResponse_MeasuresResult(soap, tag, NULL, "ns1:MeasuresResponse-MeasuresResult");
	case SOAP_TYPE_PointerTo_ns1__MountedMoldsResponse_MountedMoldsResult:
		return soap_in_PointerTo_ns1__MountedMoldsResponse_MountedMoldsResult(soap, tag, NULL, "ns1:MountedMoldsResponse-MountedMoldsResult");
	case SOAP_TYPE_PointerTo_ns1__GetAlarmsResponse_GetAlarmsResult:
		return soap_in_PointerTo_ns1__GetAlarmsResponse_GetAlarmsResult(soap, tag, NULL, "ns1:GetAlarmsResponse-GetAlarmsResult");
	case SOAP_TYPE_PointerTo_ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult:
		return soap_in_PointerTo_ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult(soap, tag, NULL, "ns1:GetAlarmsSinceLastQueryResponse-GetAlarmsSinceLastQueryResult");
	case SOAP_TYPE_PointerTo_ns1__CountsResponse_CountsResult:
		return soap_in_PointerTo_ns1__CountsResponse_CountsResult(soap, tag, NULL, "ns1:CountsResponse-CountsResult");
	case SOAP_TYPE_PointerToPointerTons1__PrelevementUnitaire:
		return soap_in_PointerToPointerTons1__PrelevementUnitaire(soap, tag, NULL, "ns1:PrelevementUnitaire");
	case SOAP_TYPE_PointerTons1__PrelevementUnitaire:
		return soap_in_PointerTons1__PrelevementUnitaire(soap, tag, NULL, "ns1:PrelevementUnitaire");
	case SOAP_TYPE_PointerTons1__ArrayOfPrelevementUnitaire:
		return soap_in_PointerTons1__ArrayOfPrelevementUnitaire(soap, tag, NULL, "ns1:ArrayOfPrelevementUnitaire");
	case SOAP_TYPE_PointerToPointerTons1__PrelevementWS_USCORE1_USCORE0_USCORE9:
		return soap_in_PointerToPointerTons1__PrelevementWS_USCORE1_USCORE0_USCORE9(soap, tag, NULL, "ns1:PrelevementWS_1_0_9");
	case SOAP_TYPE_PointerTons1__PrelevementWS_USCORE1_USCORE0_USCORE9:
		return soap_in_PointerTons1__PrelevementWS_USCORE1_USCORE0_USCORE9(soap, tag, NULL, "ns1:PrelevementWS_1_0_9");
	case SOAP_TYPE_PointerToPointerTons1__RejetMouleVue:
		return soap_in_PointerToPointerTons1__RejetMouleVue(soap, tag, NULL, "ns1:RejetMouleVue");
	case SOAP_TYPE_PointerTons1__RejetMouleVue:
		return soap_in_PointerTons1__RejetMouleVue(soap, tag, NULL, "ns1:RejetMouleVue");
	case SOAP_TYPE_PointerTons1__ArrayOfRejetMouleVue:
		return soap_in_PointerTons1__ArrayOfRejetMouleVue(soap, tag, NULL, "ns1:ArrayOfRejetMouleVue");
	case SOAP_TYPE_PointerToPointerTons1__Moule:
		return soap_in_PointerToPointerTons1__Moule(soap, tag, NULL, "ns1:Moule");
	case SOAP_TYPE_PointerTons1__Moule:
		return soap_in_PointerTons1__Moule(soap, tag, NULL, "ns1:Moule");
	case SOAP_TYPE_PointerTons1__ArrayOfMoule:
		return soap_in_PointerTons1__ArrayOfMoule(soap, tag, NULL, "ns1:ArrayOfMoule");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, tag, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, tag, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:PrelevementUnitaire"))
		{	*type = SOAP_TYPE_ns1__PrelevementUnitaire;
			return soap_in_ns1__PrelevementUnitaire(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ArrayOfPrelevementUnitaire"))
		{	*type = SOAP_TYPE_ns1__ArrayOfPrelevementUnitaire;
			return soap_in_ns1__ArrayOfPrelevementUnitaire(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:MoulesPrelevesXml"))
		{	*type = SOAP_TYPE_ns1__MoulesPrelevesXml;
			return soap_in_ns1__MoulesPrelevesXml(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:PrelevementWS_1_0_9"))
		{	*type = SOAP_TYPE_ns1__PrelevementWS_USCORE1_USCORE0_USCORE9;
			return soap_in_ns1__PrelevementWS_USCORE1_USCORE0_USCORE9(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:MoulesPrelevesXmlPourWS1_0_9"))
		{	*type = SOAP_TYPE_ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9;
			return soap_in_ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:RejetMoule"))
		{	*type = SOAP_TYPE_ns1__RejetMoule;
			return soap_in_ns1__RejetMoule(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:RejetMouleVue"))
		{	*type = SOAP_TYPE_ns1__RejetMouleVue;
			return soap_in_ns1__RejetMouleVue(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ArrayOfRejetMouleVue"))
		{	*type = SOAP_TYPE_ns1__ArrayOfRejetMouleVue;
			return soap_in_ns1__ArrayOfRejetMouleVue(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:MoulesEjectesXml"))
		{	*type = SOAP_TYPE_ns1__MoulesEjectesXml;
			return soap_in_ns1__MoulesEjectesXml(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:Moule"))
		{	*type = SOAP_TYPE_ns1__Moule;
			return soap_in_ns1__Moule(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ArrayOfMoule"))
		{	*type = SOAP_TYPE_ns1__ArrayOfMoule;
			return soap_in_ns1__ArrayOfMoule(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:MountedMoldsXml"))
		{	*type = SOAP_TYPE_ns1__MountedMoldsXml;
			return soap_in_ns1__MountedMoldsXml(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:EResetMode"))
		{	*type = SOAP_TYPE_ns1__EResetMode;
			return soap_in_ns1__EResetMode(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:CodeDetection"))
		{	*type = SOAP_TYPE_ns1__CodeDetection;
			return soap_in_ns1__CodeDetection(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, tag, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, tag, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:ChangeSamplesResponse-ChangeSamplesResult"))
		{	*type = SOAP_TYPE__ns1__ChangeSamplesResponse_ChangeSamplesResult;
			return soap_in__ns1__ChangeSamplesResponse_ChangeSamplesResult(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetVersionsResponse-GetVersionsResult"))
		{	*type = SOAP_TYPE__ns1__GetVersionsResponse_GetVersionsResult;
			return soap_in__ns1__GetVersionsResponse_GetVersionsResult(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ChangeMoldsInSampleTableResponse-ChangeMoldsInSampleTableResult"))
		{	*type = SOAP_TYPE__ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult;
			return soap_in__ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:EraseMoldsInSampleTableResponse-EraseMoldsInSampleTableResult"))
		{	*type = SOAP_TYPE__ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult;
			return soap_in__ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ChangeMountedMoldsResponse-ChangeMountedMoldsResult"))
		{	*type = SOAP_TYPE__ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult;
			return soap_in__ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetMoldsInSampleTableResponse-GetMoldsInSampleTableResult"))
		{	*type = SOAP_TYPE__ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult;
			return soap_in__ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:EjectedMoldsResponse-EjectedMoldsResult"))
		{	*type = SOAP_TYPE__ns1__EjectedMoldsResponse_EjectedMoldsResult;
			return soap_in__ns1__EjectedMoldsResponse_EjectedMoldsResult(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ReadenMoldsResponse-ReadenMoldsResult"))
		{	*type = SOAP_TYPE__ns1__ReadenMoldsResponse_ReadenMoldsResult;
			return soap_in__ns1__ReadenMoldsResponse_ReadenMoldsResult(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:CumulCountsResponse-CumulCountsResult"))
		{	*type = SOAP_TYPE__ns1__CumulCountsResponse_CumulCountsResult;
			return soap_in__ns1__CumulCountsResponse_CumulCountsResult(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:MeasuresResponse-MeasuresResult"))
		{	*type = SOAP_TYPE__ns1__MeasuresResponse_MeasuresResult;
			return soap_in__ns1__MeasuresResponse_MeasuresResult(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:MountedMoldsResponse-MountedMoldsResult"))
		{	*type = SOAP_TYPE__ns1__MountedMoldsResponse_MountedMoldsResult;
			return soap_in__ns1__MountedMoldsResponse_MountedMoldsResult(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetAlarmsResponse-GetAlarmsResult"))
		{	*type = SOAP_TYPE__ns1__GetAlarmsResponse_GetAlarmsResult;
			return soap_in__ns1__GetAlarmsResponse_GetAlarmsResult(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetAlarmsSinceLastQueryResponse-GetAlarmsSinceLastQueryResult"))
		{	*type = SOAP_TYPE__ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult;
			return soap_in__ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:CountsResponse-CountsResult"))
		{	*type = SOAP_TYPE__ns1__CountsResponse_CountsResult;
			return soap_in__ns1__CountsResponse_CountsResult(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ChangeSamplesResponse"))
		{	*type = SOAP_TYPE__ns1__ChangeSamplesResponse;
			return soap_in__ns1__ChangeSamplesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ChangeSamples"))
		{	*type = SOAP_TYPE__ns1__ChangeSamples;
			return soap_in__ns1__ChangeSamples(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetVersionsResponse"))
		{	*type = SOAP_TYPE__ns1__GetVersionsResponse;
			return soap_in__ns1__GetVersionsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetVersions"))
		{	*type = SOAP_TYPE__ns1__GetVersions;
			return soap_in__ns1__GetVersions(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ChangeMoldsInSampleTableResponse"))
		{	*type = SOAP_TYPE__ns1__ChangeMoldsInSampleTableResponse;
			return soap_in__ns1__ChangeMoldsInSampleTableResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ChangeMoldsInSampleTable"))
		{	*type = SOAP_TYPE__ns1__ChangeMoldsInSampleTable;
			return soap_in__ns1__ChangeMoldsInSampleTable(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:EraseMoldsInSampleTableResponse"))
		{	*type = SOAP_TYPE__ns1__EraseMoldsInSampleTableResponse;
			return soap_in__ns1__EraseMoldsInSampleTableResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:EraseMoldsInSampleTable"))
		{	*type = SOAP_TYPE__ns1__EraseMoldsInSampleTable;
			return soap_in__ns1__EraseMoldsInSampleTable(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AddEjectedMoldsResponse"))
		{	*type = SOAP_TYPE__ns1__AddEjectedMoldsResponse;
			return soap_in__ns1__AddEjectedMoldsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AddEjectedMolds"))
		{	*type = SOAP_TYPE__ns1__AddEjectedMolds;
			return soap_in__ns1__AddEjectedMolds(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ChangeMountedMoldsResponse"))
		{	*type = SOAP_TYPE__ns1__ChangeMountedMoldsResponse;
			return soap_in__ns1__ChangeMountedMoldsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ChangeMountedMolds"))
		{	*type = SOAP_TYPE__ns1__ChangeMountedMolds;
			return soap_in__ns1__ChangeMountedMolds(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetMoldsInSampleTableResponse"))
		{	*type = SOAP_TYPE__ns1__GetMoldsInSampleTableResponse;
			return soap_in__ns1__GetMoldsInSampleTableResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetMoldsInSampleTable"))
		{	*type = SOAP_TYPE__ns1__GetMoldsInSampleTable;
			return soap_in__ns1__GetMoldsInSampleTable(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:EjectedMoldsResponse"))
		{	*type = SOAP_TYPE__ns1__EjectedMoldsResponse;
			return soap_in__ns1__EjectedMoldsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:EjectedMolds"))
		{	*type = SOAP_TYPE__ns1__EjectedMolds;
			return soap_in__ns1__EjectedMolds(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ReadenMoldsResponse"))
		{	*type = SOAP_TYPE__ns1__ReadenMoldsResponse;
			return soap_in__ns1__ReadenMoldsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ReadenMolds"))
		{	*type = SOAP_TYPE__ns1__ReadenMolds;
			return soap_in__ns1__ReadenMolds(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:CumulCountsResponse"))
		{	*type = SOAP_TYPE__ns1__CumulCountsResponse;
			return soap_in__ns1__CumulCountsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:CumulCounts"))
		{	*type = SOAP_TYPE__ns1__CumulCounts;
			return soap_in__ns1__CumulCounts(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:MeasuresResponse"))
		{	*type = SOAP_TYPE__ns1__MeasuresResponse;
			return soap_in__ns1__MeasuresResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:Measures"))
		{	*type = SOAP_TYPE__ns1__Measures;
			return soap_in__ns1__Measures(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:MountedMoldsResponse"))
		{	*type = SOAP_TYPE__ns1__MountedMoldsResponse;
			return soap_in__ns1__MountedMoldsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:MountedMolds"))
		{	*type = SOAP_TYPE__ns1__MountedMolds;
			return soap_in__ns1__MountedMolds(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetAlarmsResponse"))
		{	*type = SOAP_TYPE__ns1__GetAlarmsResponse;
			return soap_in__ns1__GetAlarmsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetAlarms"))
		{	*type = SOAP_TYPE__ns1__GetAlarms;
			return soap_in__ns1__GetAlarms(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetAlarmsSinceLastQueryResponse"))
		{	*type = SOAP_TYPE__ns1__GetAlarmsSinceLastQueryResponse;
			return soap_in__ns1__GetAlarmsSinceLastQueryResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetAlarmsSinceLastQuery"))
		{	*type = SOAP_TYPE__ns1__GetAlarmsSinceLastQuery;
			return soap_in__ns1__GetAlarmsSinceLastQuery(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:CountsResponse"))
		{	*type = SOAP_TYPE__ns1__CountsResponse;
			return soap_in__ns1__CountsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:Counts"))
		{	*type = SOAP_TYPE__ns1__Counts;
			return soap_in__ns1__Counts(soap, NULL, NULL, NULL);
		}
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input at level = %u body = %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other && !soap->fignore)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && !soap->fignore && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, NULL, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body && soap_ignore(soap))
				return soap->error;
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, SOAP_MULTIREFTAG, pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_ns1__EResetMode:
		return soap_out_ns1__EResetMode(soap, tag, id, (const enum ns1__EResetMode *)ptr, "ns1:EResetMode");
	case SOAP_TYPE_ns1__CodeDetection:
		return soap_out_ns1__CodeDetection(soap, tag, id, (const enum ns1__CodeDetection *)ptr, "ns1:CodeDetection");
	case SOAP_TYPE__ns1__ChangeSamplesResponse_ChangeSamplesResult:
		return ((_ns1__ChangeSamplesResponse_ChangeSamplesResult *)ptr)->soap_out(soap, "ns1:ChangeSamplesResponse-ChangeSamplesResult", id, "");
	case SOAP_TYPE__ns1__GetVersionsResponse_GetVersionsResult:
		return ((_ns1__GetVersionsResponse_GetVersionsResult *)ptr)->soap_out(soap, "ns1:GetVersionsResponse-GetVersionsResult", id, "");
	case SOAP_TYPE__ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult:
		return ((_ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult *)ptr)->soap_out(soap, "ns1:ChangeMoldsInSampleTableResponse-ChangeMoldsInSampleTableResult", id, "");
	case SOAP_TYPE__ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult:
		return ((_ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult *)ptr)->soap_out(soap, "ns1:EraseMoldsInSampleTableResponse-EraseMoldsInSampleTableResult", id, "");
	case SOAP_TYPE__ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult:
		return ((_ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult *)ptr)->soap_out(soap, "ns1:ChangeMountedMoldsResponse-ChangeMountedMoldsResult", id, "");
	case SOAP_TYPE__ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult:
		return ((_ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult *)ptr)->soap_out(soap, "ns1:GetMoldsInSampleTableResponse-GetMoldsInSampleTableResult", id, "");
	case SOAP_TYPE__ns1__EjectedMoldsResponse_EjectedMoldsResult:
		return ((_ns1__EjectedMoldsResponse_EjectedMoldsResult *)ptr)->soap_out(soap, "ns1:EjectedMoldsResponse-EjectedMoldsResult", id, "");
	case SOAP_TYPE__ns1__ReadenMoldsResponse_ReadenMoldsResult:
		return ((_ns1__ReadenMoldsResponse_ReadenMoldsResult *)ptr)->soap_out(soap, "ns1:ReadenMoldsResponse-ReadenMoldsResult", id, "");
	case SOAP_TYPE__ns1__CumulCountsResponse_CumulCountsResult:
		return ((_ns1__CumulCountsResponse_CumulCountsResult *)ptr)->soap_out(soap, "ns1:CumulCountsResponse-CumulCountsResult", id, "");
	case SOAP_TYPE__ns1__MeasuresResponse_MeasuresResult:
		return ((_ns1__MeasuresResponse_MeasuresResult *)ptr)->soap_out(soap, "ns1:MeasuresResponse-MeasuresResult", id, "");
	case SOAP_TYPE__ns1__MountedMoldsResponse_MountedMoldsResult:
		return ((_ns1__MountedMoldsResponse_MountedMoldsResult *)ptr)->soap_out(soap, "ns1:MountedMoldsResponse-MountedMoldsResult", id, "");
	case SOAP_TYPE__ns1__GetAlarmsResponse_GetAlarmsResult:
		return ((_ns1__GetAlarmsResponse_GetAlarmsResult *)ptr)->soap_out(soap, "ns1:GetAlarmsResponse-GetAlarmsResult", id, "");
	case SOAP_TYPE__ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult:
		return ((_ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult *)ptr)->soap_out(soap, "ns1:GetAlarmsSinceLastQueryResponse-GetAlarmsSinceLastQueryResult", id, "");
	case SOAP_TYPE__ns1__CountsResponse_CountsResult:
		return ((_ns1__CountsResponse_CountsResult *)ptr)->soap_out(soap, "ns1:CountsResponse-CountsResult", id, "");
	case SOAP_TYPE__ns1__ChangeSamplesResponse:
		return ((_ns1__ChangeSamplesResponse *)ptr)->soap_out(soap, "ns1:ChangeSamplesResponse", id, "");
	case SOAP_TYPE__ns1__ChangeSamples:
		return ((_ns1__ChangeSamples *)ptr)->soap_out(soap, "ns1:ChangeSamples", id, "");
	case SOAP_TYPE__ns1__GetVersionsResponse:
		return ((_ns1__GetVersionsResponse *)ptr)->soap_out(soap, "ns1:GetVersionsResponse", id, "");
	case SOAP_TYPE__ns1__GetVersions:
		return ((_ns1__GetVersions *)ptr)->soap_out(soap, "ns1:GetVersions", id, "");
	case SOAP_TYPE__ns1__ChangeMoldsInSampleTableResponse:
		return ((_ns1__ChangeMoldsInSampleTableResponse *)ptr)->soap_out(soap, "ns1:ChangeMoldsInSampleTableResponse", id, "");
	case SOAP_TYPE__ns1__ChangeMoldsInSampleTable:
		return ((_ns1__ChangeMoldsInSampleTable *)ptr)->soap_out(soap, "ns1:ChangeMoldsInSampleTable", id, "");
	case SOAP_TYPE__ns1__EraseMoldsInSampleTableResponse:
		return ((_ns1__EraseMoldsInSampleTableResponse *)ptr)->soap_out(soap, "ns1:EraseMoldsInSampleTableResponse", id, "");
	case SOAP_TYPE__ns1__EraseMoldsInSampleTable:
		return ((_ns1__EraseMoldsInSampleTable *)ptr)->soap_out(soap, "ns1:EraseMoldsInSampleTable", id, "");
	case SOAP_TYPE__ns1__AddEjectedMoldsResponse:
		return ((_ns1__AddEjectedMoldsResponse *)ptr)->soap_out(soap, "ns1:AddEjectedMoldsResponse", id, "");
	case SOAP_TYPE__ns1__AddEjectedMolds:
		return ((_ns1__AddEjectedMolds *)ptr)->soap_out(soap, "ns1:AddEjectedMolds", id, "");
	case SOAP_TYPE__ns1__ChangeMountedMoldsResponse:
		return ((_ns1__ChangeMountedMoldsResponse *)ptr)->soap_out(soap, "ns1:ChangeMountedMoldsResponse", id, "");
	case SOAP_TYPE__ns1__ChangeMountedMolds:
		return ((_ns1__ChangeMountedMolds *)ptr)->soap_out(soap, "ns1:ChangeMountedMolds", id, "");
	case SOAP_TYPE__ns1__GetMoldsInSampleTableResponse:
		return ((_ns1__GetMoldsInSampleTableResponse *)ptr)->soap_out(soap, "ns1:GetMoldsInSampleTableResponse", id, "");
	case SOAP_TYPE__ns1__GetMoldsInSampleTable:
		return ((_ns1__GetMoldsInSampleTable *)ptr)->soap_out(soap, "ns1:GetMoldsInSampleTable", id, "");
	case SOAP_TYPE__ns1__EjectedMoldsResponse:
		return ((_ns1__EjectedMoldsResponse *)ptr)->soap_out(soap, "ns1:EjectedMoldsResponse", id, "");
	case SOAP_TYPE__ns1__EjectedMolds:
		return ((_ns1__EjectedMolds *)ptr)->soap_out(soap, "ns1:EjectedMolds", id, "");
	case SOAP_TYPE__ns1__ReadenMoldsResponse:
		return ((_ns1__ReadenMoldsResponse *)ptr)->soap_out(soap, "ns1:ReadenMoldsResponse", id, "");
	case SOAP_TYPE__ns1__ReadenMolds:
		return ((_ns1__ReadenMolds *)ptr)->soap_out(soap, "ns1:ReadenMolds", id, "");
	case SOAP_TYPE__ns1__CumulCountsResponse:
		return ((_ns1__CumulCountsResponse *)ptr)->soap_out(soap, "ns1:CumulCountsResponse", id, "");
	case SOAP_TYPE__ns1__CumulCounts:
		return ((_ns1__CumulCounts *)ptr)->soap_out(soap, "ns1:CumulCounts", id, "");
	case SOAP_TYPE__ns1__MeasuresResponse:
		return ((_ns1__MeasuresResponse *)ptr)->soap_out(soap, "ns1:MeasuresResponse", id, "");
	case SOAP_TYPE__ns1__Measures:
		return ((_ns1__Measures *)ptr)->soap_out(soap, "ns1:Measures", id, "");
	case SOAP_TYPE__ns1__MountedMoldsResponse:
		return ((_ns1__MountedMoldsResponse *)ptr)->soap_out(soap, "ns1:MountedMoldsResponse", id, "");
	case SOAP_TYPE__ns1__MountedMolds:
		return ((_ns1__MountedMolds *)ptr)->soap_out(soap, "ns1:MountedMolds", id, "");
	case SOAP_TYPE__ns1__GetAlarmsResponse:
		return ((_ns1__GetAlarmsResponse *)ptr)->soap_out(soap, "ns1:GetAlarmsResponse", id, "");
	case SOAP_TYPE__ns1__GetAlarms:
		return ((_ns1__GetAlarms *)ptr)->soap_out(soap, "ns1:GetAlarms", id, "");
	case SOAP_TYPE__ns1__GetAlarmsSinceLastQueryResponse:
		return ((_ns1__GetAlarmsSinceLastQueryResponse *)ptr)->soap_out(soap, "ns1:GetAlarmsSinceLastQueryResponse", id, "");
	case SOAP_TYPE__ns1__GetAlarmsSinceLastQuery:
		return ((_ns1__GetAlarmsSinceLastQuery *)ptr)->soap_out(soap, "ns1:GetAlarmsSinceLastQuery", id, "");
	case SOAP_TYPE__ns1__CountsResponse:
		return ((_ns1__CountsResponse *)ptr)->soap_out(soap, "ns1:CountsResponse", id, "");
	case SOAP_TYPE__ns1__Counts:
		return ((_ns1__Counts *)ptr)->soap_out(soap, "ns1:Counts", id, "");
	case SOAP_TYPE_ns1__PrelevementUnitaire:
		return ((ns1__PrelevementUnitaire *)ptr)->soap_out(soap, tag, id, "ns1:PrelevementUnitaire");
	case SOAP_TYPE_ns1__ArrayOfPrelevementUnitaire:
		return ((ns1__ArrayOfPrelevementUnitaire *)ptr)->soap_out(soap, tag, id, "ns1:ArrayOfPrelevementUnitaire");
	case SOAP_TYPE_ns1__MoulesPrelevesXml:
		return ((ns1__MoulesPrelevesXml *)ptr)->soap_out(soap, tag, id, "ns1:MoulesPrelevesXml");
	case SOAP_TYPE_ns1__PrelevementWS_USCORE1_USCORE0_USCORE9:
		return ((ns1__PrelevementWS_USCORE1_USCORE0_USCORE9 *)ptr)->soap_out(soap, tag, id, "ns1:PrelevementWS_1_0_9");
	case SOAP_TYPE_ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9:
		return ((ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9 *)ptr)->soap_out(soap, tag, id, "ns1:MoulesPrelevesXmlPourWS1_0_9");
	case SOAP_TYPE_ns1__RejetMoule:
		return ((ns1__RejetMoule *)ptr)->soap_out(soap, tag, id, "ns1:RejetMoule");
	case SOAP_TYPE_ns1__RejetMouleVue:
		return ((ns1__RejetMouleVue *)ptr)->soap_out(soap, tag, id, "ns1:RejetMouleVue");
	case SOAP_TYPE_ns1__ArrayOfRejetMouleVue:
		return ((ns1__ArrayOfRejetMouleVue *)ptr)->soap_out(soap, tag, id, "ns1:ArrayOfRejetMouleVue");
	case SOAP_TYPE_ns1__MoulesEjectesXml:
		return ((ns1__MoulesEjectesXml *)ptr)->soap_out(soap, tag, id, "ns1:MoulesEjectesXml");
	case SOAP_TYPE_ns1__Moule:
		return ((ns1__Moule *)ptr)->soap_out(soap, tag, id, "ns1:Moule");
	case SOAP_TYPE_ns1__ArrayOfMoule:
		return ((ns1__ArrayOfMoule *)ptr)->soap_out(soap, tag, id, "ns1:ArrayOfMoule");
	case SOAP_TYPE_ns1__MountedMoldsXml:
		return ((ns1__MountedMoldsXml *)ptr)->soap_out(soap, tag, id, "ns1:MountedMoldsXml");
	case SOAP_TYPE_PointerTo_ns1__ChangeSamples:
		return soap_out_PointerTo_ns1__ChangeSamples(soap, tag, id, (_ns1__ChangeSamples *const*)ptr, "ns1:ChangeSamples");
	case SOAP_TYPE_PointerTo_ns1__GetVersions:
		return soap_out_PointerTo_ns1__GetVersions(soap, tag, id, (_ns1__GetVersions *const*)ptr, "ns1:GetVersions");
	case SOAP_TYPE_PointerTo_ns1__ChangeMoldsInSampleTable:
		return soap_out_PointerTo_ns1__ChangeMoldsInSampleTable(soap, tag, id, (_ns1__ChangeMoldsInSampleTable *const*)ptr, "ns1:ChangeMoldsInSampleTable");
	case SOAP_TYPE_PointerTo_ns1__EraseMoldsInSampleTable:
		return soap_out_PointerTo_ns1__EraseMoldsInSampleTable(soap, tag, id, (_ns1__EraseMoldsInSampleTable *const*)ptr, "ns1:EraseMoldsInSampleTable");
	case SOAP_TYPE_PointerTo_ns1__AddEjectedMolds:
		return soap_out_PointerTo_ns1__AddEjectedMolds(soap, tag, id, (_ns1__AddEjectedMolds *const*)ptr, "ns1:AddEjectedMolds");
	case SOAP_TYPE_PointerTo_ns1__ChangeMountedMolds:
		return soap_out_PointerTo_ns1__ChangeMountedMolds(soap, tag, id, (_ns1__ChangeMountedMolds *const*)ptr, "ns1:ChangeMountedMolds");
	case SOAP_TYPE_PointerTo_ns1__GetMoldsInSampleTable:
		return soap_out_PointerTo_ns1__GetMoldsInSampleTable(soap, tag, id, (_ns1__GetMoldsInSampleTable *const*)ptr, "ns1:GetMoldsInSampleTable");
	case SOAP_TYPE_PointerTo_ns1__EjectedMolds:
		return soap_out_PointerTo_ns1__EjectedMolds(soap, tag, id, (_ns1__EjectedMolds *const*)ptr, "ns1:EjectedMolds");
	case SOAP_TYPE_PointerTo_ns1__ReadenMolds:
		return soap_out_PointerTo_ns1__ReadenMolds(soap, tag, id, (_ns1__ReadenMolds *const*)ptr, "ns1:ReadenMolds");
	case SOAP_TYPE_PointerTo_ns1__CumulCounts:
		return soap_out_PointerTo_ns1__CumulCounts(soap, tag, id, (_ns1__CumulCounts *const*)ptr, "ns1:CumulCounts");
	case SOAP_TYPE_PointerTo_ns1__Measures:
		return soap_out_PointerTo_ns1__Measures(soap, tag, id, (_ns1__Measures *const*)ptr, "ns1:Measures");
	case SOAP_TYPE_PointerTo_ns1__MountedMolds:
		return soap_out_PointerTo_ns1__MountedMolds(soap, tag, id, (_ns1__MountedMolds *const*)ptr, "ns1:MountedMolds");
	case SOAP_TYPE_PointerTo_ns1__GetAlarms:
		return soap_out_PointerTo_ns1__GetAlarms(soap, tag, id, (_ns1__GetAlarms *const*)ptr, "ns1:GetAlarms");
	case SOAP_TYPE_PointerTo_ns1__GetAlarmsSinceLastQuery:
		return soap_out_PointerTo_ns1__GetAlarmsSinceLastQuery(soap, tag, id, (_ns1__GetAlarmsSinceLastQuery *const*)ptr, "ns1:GetAlarmsSinceLastQuery");
	case SOAP_TYPE_PointerTo_ns1__Counts:
		return soap_out_PointerTo_ns1__Counts(soap, tag, id, (_ns1__Counts *const*)ptr, "ns1:Counts");
	case SOAP_TYPE_PointerTo_ns1__ChangeSamplesResponse_ChangeSamplesResult:
		return soap_out_PointerTo_ns1__ChangeSamplesResponse_ChangeSamplesResult(soap, tag, id, (_ns1__ChangeSamplesResponse_ChangeSamplesResult *const*)ptr, "ns1:ChangeSamplesResponse-ChangeSamplesResult");
	case SOAP_TYPE_PointerTons1__MoulesPrelevesXml:
		return soap_out_PointerTons1__MoulesPrelevesXml(soap, tag, id, (ns1__MoulesPrelevesXml *const*)ptr, "ns1:MoulesPrelevesXml");
	case SOAP_TYPE_PointerTo_ns1__GetVersionsResponse_GetVersionsResult:
		return soap_out_PointerTo_ns1__GetVersionsResponse_GetVersionsResult(soap, tag, id, (_ns1__GetVersionsResponse_GetVersionsResult *const*)ptr, "ns1:GetVersionsResponse-GetVersionsResult");
	case SOAP_TYPE_PointerTo_ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult:
		return soap_out_PointerTo_ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult(soap, tag, id, (_ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult *const*)ptr, "ns1:ChangeMoldsInSampleTableResponse-ChangeMoldsInSampleTableResult");
	case SOAP_TYPE_PointerTons1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9:
		return soap_out_PointerTons1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9(soap, tag, id, (ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9 *const*)ptr, "ns1:MoulesPrelevesXmlPourWS1_0_9");
	case SOAP_TYPE_PointerTo_ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult:
		return soap_out_PointerTo_ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult(soap, tag, id, (_ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult *const*)ptr, "ns1:EraseMoldsInSampleTableResponse-EraseMoldsInSampleTableResult");
	case SOAP_TYPE_PointerTons1__MoulesEjectesXml:
		return soap_out_PointerTons1__MoulesEjectesXml(soap, tag, id, (ns1__MoulesEjectesXml *const*)ptr, "ns1:MoulesEjectesXml");
	case SOAP_TYPE_PointerTo_ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult:
		return soap_out_PointerTo_ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult(soap, tag, id, (_ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult *const*)ptr, "ns1:ChangeMountedMoldsResponse-ChangeMountedMoldsResult");
	case SOAP_TYPE_PointerTons1__MountedMoldsXml:
		return soap_out_PointerTons1__MountedMoldsXml(soap, tag, id, (ns1__MountedMoldsXml *const*)ptr, "ns1:MountedMoldsXml");
	case SOAP_TYPE_PointerTo_ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult:
		return soap_out_PointerTo_ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult(soap, tag, id, (_ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult *const*)ptr, "ns1:GetMoldsInSampleTableResponse-GetMoldsInSampleTableResult");
	case SOAP_TYPE_PointerTo_ns1__EjectedMoldsResponse_EjectedMoldsResult:
		return soap_out_PointerTo_ns1__EjectedMoldsResponse_EjectedMoldsResult(soap, tag, id, (_ns1__EjectedMoldsResponse_EjectedMoldsResult *const*)ptr, "ns1:EjectedMoldsResponse-EjectedMoldsResult");
	case SOAP_TYPE_PointerTo_ns1__ReadenMoldsResponse_ReadenMoldsResult:
		return soap_out_PointerTo_ns1__ReadenMoldsResponse_ReadenMoldsResult(soap, tag, id, (_ns1__ReadenMoldsResponse_ReadenMoldsResult *const*)ptr, "ns1:ReadenMoldsResponse-ReadenMoldsResult");
	case SOAP_TYPE_PointerTo_ns1__CumulCountsResponse_CumulCountsResult:
		return soap_out_PointerTo_ns1__CumulCountsResponse_CumulCountsResult(soap, tag, id, (_ns1__CumulCountsResponse_CumulCountsResult *const*)ptr, "ns1:CumulCountsResponse-CumulCountsResult");
	case SOAP_TYPE_PointerTo_ns1__MeasuresResponse_MeasuresResult:
		return soap_out_PointerTo_ns1__MeasuresResponse_MeasuresResult(soap, tag, id, (_ns1__MeasuresResponse_MeasuresResult *const*)ptr, "ns1:MeasuresResponse-MeasuresResult");
	case SOAP_TYPE_PointerTo_ns1__MountedMoldsResponse_MountedMoldsResult:
		return soap_out_PointerTo_ns1__MountedMoldsResponse_MountedMoldsResult(soap, tag, id, (_ns1__MountedMoldsResponse_MountedMoldsResult *const*)ptr, "ns1:MountedMoldsResponse-MountedMoldsResult");
	case SOAP_TYPE_PointerTo_ns1__GetAlarmsResponse_GetAlarmsResult:
		return soap_out_PointerTo_ns1__GetAlarmsResponse_GetAlarmsResult(soap, tag, id, (_ns1__GetAlarmsResponse_GetAlarmsResult *const*)ptr, "ns1:GetAlarmsResponse-GetAlarmsResult");
	case SOAP_TYPE_PointerTo_ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult:
		return soap_out_PointerTo_ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult(soap, tag, id, (_ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult *const*)ptr, "ns1:GetAlarmsSinceLastQueryResponse-GetAlarmsSinceLastQueryResult");
	case SOAP_TYPE_PointerTo_ns1__CountsResponse_CountsResult:
		return soap_out_PointerTo_ns1__CountsResponse_CountsResult(soap, tag, id, (_ns1__CountsResponse_CountsResult *const*)ptr, "ns1:CountsResponse-CountsResult");
	case SOAP_TYPE_PointerToPointerTons1__PrelevementUnitaire:
		return soap_out_PointerToPointerTons1__PrelevementUnitaire(soap, tag, id, (ns1__PrelevementUnitaire **const*)ptr, "ns1:PrelevementUnitaire");
	case SOAP_TYPE_PointerTons1__PrelevementUnitaire:
		return soap_out_PointerTons1__PrelevementUnitaire(soap, tag, id, (ns1__PrelevementUnitaire *const*)ptr, "ns1:PrelevementUnitaire");
	case SOAP_TYPE_PointerTons1__ArrayOfPrelevementUnitaire:
		return soap_out_PointerTons1__ArrayOfPrelevementUnitaire(soap, tag, id, (ns1__ArrayOfPrelevementUnitaire *const*)ptr, "ns1:ArrayOfPrelevementUnitaire");
	case SOAP_TYPE_PointerToPointerTons1__PrelevementWS_USCORE1_USCORE0_USCORE9:
		return soap_out_PointerToPointerTons1__PrelevementWS_USCORE1_USCORE0_USCORE9(soap, tag, id, (ns1__PrelevementWS_USCORE1_USCORE0_USCORE9 **const*)ptr, "ns1:PrelevementWS_1_0_9");
	case SOAP_TYPE_PointerTons1__PrelevementWS_USCORE1_USCORE0_USCORE9:
		return soap_out_PointerTons1__PrelevementWS_USCORE1_USCORE0_USCORE9(soap, tag, id, (ns1__PrelevementWS_USCORE1_USCORE0_USCORE9 *const*)ptr, "ns1:PrelevementWS_1_0_9");
	case SOAP_TYPE_PointerToPointerTons1__RejetMouleVue:
		return soap_out_PointerToPointerTons1__RejetMouleVue(soap, tag, id, (ns1__RejetMouleVue **const*)ptr, "ns1:RejetMouleVue");
	case SOAP_TYPE_PointerTons1__RejetMouleVue:
		return soap_out_PointerTons1__RejetMouleVue(soap, tag, id, (ns1__RejetMouleVue *const*)ptr, "ns1:RejetMouleVue");
	case SOAP_TYPE_PointerTons1__ArrayOfRejetMouleVue:
		return soap_out_PointerTons1__ArrayOfRejetMouleVue(soap, tag, id, (ns1__ArrayOfRejetMouleVue *const*)ptr, "ns1:ArrayOfRejetMouleVue");
	case SOAP_TYPE_PointerToPointerTons1__Moule:
		return soap_out_PointerToPointerTons1__Moule(soap, tag, id, (ns1__Moule **const*)ptr, "ns1:Moule");
	case SOAP_TYPE_PointerTons1__Moule:
		return soap_out_PointerTons1__Moule(soap, tag, id, (ns1__Moule *const*)ptr, "ns1:Moule");
	case SOAP_TYPE_PointerTons1__ArrayOfMoule:
		return soap_out_PointerTons1__ArrayOfMoule(soap, tag, id, (ns1__ArrayOfMoule *const*)ptr, "ns1:ArrayOfMoule");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:string");
	case 0:
		return SOAP_OK;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_putelement '%s' failed for type %d in ./soap\\soapC.cpp\n", tag ? tag : "", type));
	return soap_element_empty(soap, tag, 0, NULL); /* unknown type to serialize */
}
#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE__ns1__ChangeSamplesResponse_ChangeSamplesResult:
		((_ns1__ChangeSamplesResponse_ChangeSamplesResult *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetVersionsResponse_GetVersionsResult:
		((_ns1__GetVersionsResponse_GetVersionsResult *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult:
		((_ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult:
		((_ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult:
		((_ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult:
		((_ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__EjectedMoldsResponse_EjectedMoldsResult:
		((_ns1__EjectedMoldsResponse_EjectedMoldsResult *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__ReadenMoldsResponse_ReadenMoldsResult:
		((_ns1__ReadenMoldsResponse_ReadenMoldsResult *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__CumulCountsResponse_CumulCountsResult:
		((_ns1__CumulCountsResponse_CumulCountsResult *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__MeasuresResponse_MeasuresResult:
		((_ns1__MeasuresResponse_MeasuresResult *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__MountedMoldsResponse_MountedMoldsResult:
		((_ns1__MountedMoldsResponse_MountedMoldsResult *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetAlarmsResponse_GetAlarmsResult:
		((_ns1__GetAlarmsResponse_GetAlarmsResult *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult:
		((_ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__CountsResponse_CountsResult:
		((_ns1__CountsResponse_CountsResult *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__ChangeSamplesResponse:
		((_ns1__ChangeSamplesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__ChangeSamples:
		((_ns1__ChangeSamples *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetVersionsResponse:
		((_ns1__GetVersionsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetVersions:
		((_ns1__GetVersions *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__ChangeMoldsInSampleTableResponse:
		((_ns1__ChangeMoldsInSampleTableResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__ChangeMoldsInSampleTable:
		((_ns1__ChangeMoldsInSampleTable *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__EraseMoldsInSampleTableResponse:
		((_ns1__EraseMoldsInSampleTableResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__EraseMoldsInSampleTable:
		((_ns1__EraseMoldsInSampleTable *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AddEjectedMoldsResponse:
		((_ns1__AddEjectedMoldsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AddEjectedMolds:
		((_ns1__AddEjectedMolds *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__ChangeMountedMoldsResponse:
		((_ns1__ChangeMountedMoldsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__ChangeMountedMolds:
		((_ns1__ChangeMountedMolds *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetMoldsInSampleTableResponse:
		((_ns1__GetMoldsInSampleTableResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetMoldsInSampleTable:
		((_ns1__GetMoldsInSampleTable *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__EjectedMoldsResponse:
		((_ns1__EjectedMoldsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__EjectedMolds:
		((_ns1__EjectedMolds *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__ReadenMoldsResponse:
		((_ns1__ReadenMoldsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__ReadenMolds:
		((_ns1__ReadenMolds *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__CumulCountsResponse:
		((_ns1__CumulCountsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__CumulCounts:
		((_ns1__CumulCounts *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__MeasuresResponse:
		((_ns1__MeasuresResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__Measures:
		((_ns1__Measures *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__MountedMoldsResponse:
		((_ns1__MountedMoldsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__MountedMolds:
		((_ns1__MountedMolds *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetAlarmsResponse:
		((_ns1__GetAlarmsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetAlarms:
		((_ns1__GetAlarms *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetAlarmsSinceLastQueryResponse:
		((_ns1__GetAlarmsSinceLastQueryResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetAlarmsSinceLastQuery:
		((_ns1__GetAlarmsSinceLastQuery *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__CountsResponse:
		((_ns1__CountsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__Counts:
		((_ns1__Counts *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__PrelevementUnitaire:
		((ns1__PrelevementUnitaire *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ArrayOfPrelevementUnitaire:
		((ns1__ArrayOfPrelevementUnitaire *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__MoulesPrelevesXml:
		((ns1__MoulesPrelevesXml *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__PrelevementWS_USCORE1_USCORE0_USCORE9:
		((ns1__PrelevementWS_USCORE1_USCORE0_USCORE9 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9:
		((ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__RejetMoule:
		((ns1__RejetMoule *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__RejetMouleVue:
		((ns1__RejetMouleVue *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ArrayOfRejetMouleVue:
		((ns1__ArrayOfRejetMouleVue *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__MoulesEjectesXml:
		((ns1__MoulesEjectesXml *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__Moule:
		((ns1__Moule *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ArrayOfMoule:
		((ns1__ArrayOfMoule *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__MountedMoldsXml:
		((ns1__MountedMoldsXml *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___ns1__ChangeSamples_:
		soap_serialize___ns1__ChangeSamples_(soap, (const struct __ns1__ChangeSamples_ *)ptr);
		break;
	case SOAP_TYPE___ns1__GetVersions_:
		soap_serialize___ns1__GetVersions_(soap, (const struct __ns1__GetVersions_ *)ptr);
		break;
	case SOAP_TYPE___ns1__ChangeMoldsInSampleTable_:
		soap_serialize___ns1__ChangeMoldsInSampleTable_(soap, (const struct __ns1__ChangeMoldsInSampleTable_ *)ptr);
		break;
	case SOAP_TYPE___ns1__EraseMoldsInSampleTable_:
		soap_serialize___ns1__EraseMoldsInSampleTable_(soap, (const struct __ns1__EraseMoldsInSampleTable_ *)ptr);
		break;
	case SOAP_TYPE___ns1__AddEjectedMolds_:
		soap_serialize___ns1__AddEjectedMolds_(soap, (const struct __ns1__AddEjectedMolds_ *)ptr);
		break;
	case SOAP_TYPE___ns1__ChangeMountedMolds_:
		soap_serialize___ns1__ChangeMountedMolds_(soap, (const struct __ns1__ChangeMountedMolds_ *)ptr);
		break;
	case SOAP_TYPE___ns1__GetMoldsInSampleTable_:
		soap_serialize___ns1__GetMoldsInSampleTable_(soap, (const struct __ns1__GetMoldsInSampleTable_ *)ptr);
		break;
	case SOAP_TYPE___ns1__EjectedMolds_:
		soap_serialize___ns1__EjectedMolds_(soap, (const struct __ns1__EjectedMolds_ *)ptr);
		break;
	case SOAP_TYPE___ns1__ReadenMolds_:
		soap_serialize___ns1__ReadenMolds_(soap, (const struct __ns1__ReadenMolds_ *)ptr);
		break;
	case SOAP_TYPE___ns1__CumulCounts_:
		soap_serialize___ns1__CumulCounts_(soap, (const struct __ns1__CumulCounts_ *)ptr);
		break;
	case SOAP_TYPE___ns1__Measures_:
		soap_serialize___ns1__Measures_(soap, (const struct __ns1__Measures_ *)ptr);
		break;
	case SOAP_TYPE___ns1__MountedMolds_:
		soap_serialize___ns1__MountedMolds_(soap, (const struct __ns1__MountedMolds_ *)ptr);
		break;
	case SOAP_TYPE___ns1__GetAlarms_:
		soap_serialize___ns1__GetAlarms_(soap, (const struct __ns1__GetAlarms_ *)ptr);
		break;
	case SOAP_TYPE___ns1__GetAlarmsSinceLastQuery_:
		soap_serialize___ns1__GetAlarmsSinceLastQuery_(soap, (const struct __ns1__GetAlarmsSinceLastQuery_ *)ptr);
		break;
	case SOAP_TYPE___ns1__Counts_:
		soap_serialize___ns1__Counts_(soap, (const struct __ns1__Counts_ *)ptr);
		break;
	case SOAP_TYPE___ns1__ChangeSamples:
		soap_serialize___ns1__ChangeSamples(soap, (const struct __ns1__ChangeSamples *)ptr);
		break;
	case SOAP_TYPE___ns1__GetVersions:
		soap_serialize___ns1__GetVersions(soap, (const struct __ns1__GetVersions *)ptr);
		break;
	case SOAP_TYPE___ns1__ChangeMoldsInSampleTable:
		soap_serialize___ns1__ChangeMoldsInSampleTable(soap, (const struct __ns1__ChangeMoldsInSampleTable *)ptr);
		break;
	case SOAP_TYPE___ns1__EraseMoldsInSampleTable:
		soap_serialize___ns1__EraseMoldsInSampleTable(soap, (const struct __ns1__EraseMoldsInSampleTable *)ptr);
		break;
	case SOAP_TYPE___ns1__AddEjectedMolds:
		soap_serialize___ns1__AddEjectedMolds(soap, (const struct __ns1__AddEjectedMolds *)ptr);
		break;
	case SOAP_TYPE___ns1__ChangeMountedMolds:
		soap_serialize___ns1__ChangeMountedMolds(soap, (const struct __ns1__ChangeMountedMolds *)ptr);
		break;
	case SOAP_TYPE___ns1__GetMoldsInSampleTable:
		soap_serialize___ns1__GetMoldsInSampleTable(soap, (const struct __ns1__GetMoldsInSampleTable *)ptr);
		break;
	case SOAP_TYPE___ns1__EjectedMolds:
		soap_serialize___ns1__EjectedMolds(soap, (const struct __ns1__EjectedMolds *)ptr);
		break;
	case SOAP_TYPE___ns1__ReadenMolds:
		soap_serialize___ns1__ReadenMolds(soap, (const struct __ns1__ReadenMolds *)ptr);
		break;
	case SOAP_TYPE___ns1__CumulCounts:
		soap_serialize___ns1__CumulCounts(soap, (const struct __ns1__CumulCounts *)ptr);
		break;
	case SOAP_TYPE___ns1__Measures:
		soap_serialize___ns1__Measures(soap, (const struct __ns1__Measures *)ptr);
		break;
	case SOAP_TYPE___ns1__MountedMolds:
		soap_serialize___ns1__MountedMolds(soap, (const struct __ns1__MountedMolds *)ptr);
		break;
	case SOAP_TYPE___ns1__GetAlarms:
		soap_serialize___ns1__GetAlarms(soap, (const struct __ns1__GetAlarms *)ptr);
		break;
	case SOAP_TYPE___ns1__GetAlarmsSinceLastQuery:
		soap_serialize___ns1__GetAlarmsSinceLastQuery(soap, (const struct __ns1__GetAlarmsSinceLastQuery *)ptr);
		break;
	case SOAP_TYPE___ns1__Counts:
		soap_serialize___ns1__Counts(soap, (const struct __ns1__Counts *)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__ChangeSamples:
		soap_serialize_PointerTo_ns1__ChangeSamples(soap, (_ns1__ChangeSamples *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetVersions:
		soap_serialize_PointerTo_ns1__GetVersions(soap, (_ns1__GetVersions *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__ChangeMoldsInSampleTable:
		soap_serialize_PointerTo_ns1__ChangeMoldsInSampleTable(soap, (_ns1__ChangeMoldsInSampleTable *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__EraseMoldsInSampleTable:
		soap_serialize_PointerTo_ns1__EraseMoldsInSampleTable(soap, (_ns1__EraseMoldsInSampleTable *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__AddEjectedMolds:
		soap_serialize_PointerTo_ns1__AddEjectedMolds(soap, (_ns1__AddEjectedMolds *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__ChangeMountedMolds:
		soap_serialize_PointerTo_ns1__ChangeMountedMolds(soap, (_ns1__ChangeMountedMolds *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetMoldsInSampleTable:
		soap_serialize_PointerTo_ns1__GetMoldsInSampleTable(soap, (_ns1__GetMoldsInSampleTable *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__EjectedMolds:
		soap_serialize_PointerTo_ns1__EjectedMolds(soap, (_ns1__EjectedMolds *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__ReadenMolds:
		soap_serialize_PointerTo_ns1__ReadenMolds(soap, (_ns1__ReadenMolds *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__CumulCounts:
		soap_serialize_PointerTo_ns1__CumulCounts(soap, (_ns1__CumulCounts *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__Measures:
		soap_serialize_PointerTo_ns1__Measures(soap, (_ns1__Measures *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__MountedMolds:
		soap_serialize_PointerTo_ns1__MountedMolds(soap, (_ns1__MountedMolds *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetAlarms:
		soap_serialize_PointerTo_ns1__GetAlarms(soap, (_ns1__GetAlarms *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetAlarmsSinceLastQuery:
		soap_serialize_PointerTo_ns1__GetAlarmsSinceLastQuery(soap, (_ns1__GetAlarmsSinceLastQuery *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__Counts:
		soap_serialize_PointerTo_ns1__Counts(soap, (_ns1__Counts *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__ChangeSamplesResponse_ChangeSamplesResult:
		soap_serialize_PointerTo_ns1__ChangeSamplesResponse_ChangeSamplesResult(soap, (_ns1__ChangeSamplesResponse_ChangeSamplesResult *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__MoulesPrelevesXml:
		soap_serialize_PointerTons1__MoulesPrelevesXml(soap, (ns1__MoulesPrelevesXml *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetVersionsResponse_GetVersionsResult:
		soap_serialize_PointerTo_ns1__GetVersionsResponse_GetVersionsResult(soap, (_ns1__GetVersionsResponse_GetVersionsResult *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult:
		soap_serialize_PointerTo_ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult(soap, (_ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9:
		soap_serialize_PointerTons1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9(soap, (ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult:
		soap_serialize_PointerTo_ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult(soap, (_ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__MoulesEjectesXml:
		soap_serialize_PointerTons1__MoulesEjectesXml(soap, (ns1__MoulesEjectesXml *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult:
		soap_serialize_PointerTo_ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult(soap, (_ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__MountedMoldsXml:
		soap_serialize_PointerTons1__MountedMoldsXml(soap, (ns1__MountedMoldsXml *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult:
		soap_serialize_PointerTo_ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult(soap, (_ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__EjectedMoldsResponse_EjectedMoldsResult:
		soap_serialize_PointerTo_ns1__EjectedMoldsResponse_EjectedMoldsResult(soap, (_ns1__EjectedMoldsResponse_EjectedMoldsResult *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__ReadenMoldsResponse_ReadenMoldsResult:
		soap_serialize_PointerTo_ns1__ReadenMoldsResponse_ReadenMoldsResult(soap, (_ns1__ReadenMoldsResponse_ReadenMoldsResult *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__CumulCountsResponse_CumulCountsResult:
		soap_serialize_PointerTo_ns1__CumulCountsResponse_CumulCountsResult(soap, (_ns1__CumulCountsResponse_CumulCountsResult *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__MeasuresResponse_MeasuresResult:
		soap_serialize_PointerTo_ns1__MeasuresResponse_MeasuresResult(soap, (_ns1__MeasuresResponse_MeasuresResult *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__MountedMoldsResponse_MountedMoldsResult:
		soap_serialize_PointerTo_ns1__MountedMoldsResponse_MountedMoldsResult(soap, (_ns1__MountedMoldsResponse_MountedMoldsResult *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetAlarmsResponse_GetAlarmsResult:
		soap_serialize_PointerTo_ns1__GetAlarmsResponse_GetAlarmsResult(soap, (_ns1__GetAlarmsResponse_GetAlarmsResult *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult:
		soap_serialize_PointerTo_ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult(soap, (_ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__CountsResponse_CountsResult:
		soap_serialize_PointerTo_ns1__CountsResponse_CountsResult(soap, (_ns1__CountsResponse_CountsResult *const*)ptr);
		break;
	case SOAP_TYPE_PointerToPointerTons1__PrelevementUnitaire:
		soap_serialize_PointerToPointerTons1__PrelevementUnitaire(soap, (ns1__PrelevementUnitaire **const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__PrelevementUnitaire:
		soap_serialize_PointerTons1__PrelevementUnitaire(soap, (ns1__PrelevementUnitaire *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ArrayOfPrelevementUnitaire:
		soap_serialize_PointerTons1__ArrayOfPrelevementUnitaire(soap, (ns1__ArrayOfPrelevementUnitaire *const*)ptr);
		break;
	case SOAP_TYPE_PointerToPointerTons1__PrelevementWS_USCORE1_USCORE0_USCORE9:
		soap_serialize_PointerToPointerTons1__PrelevementWS_USCORE1_USCORE0_USCORE9(soap, (ns1__PrelevementWS_USCORE1_USCORE0_USCORE9 **const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__PrelevementWS_USCORE1_USCORE0_USCORE9:
		soap_serialize_PointerTons1__PrelevementWS_USCORE1_USCORE0_USCORE9(soap, (ns1__PrelevementWS_USCORE1_USCORE0_USCORE9 *const*)ptr);
		break;
	case SOAP_TYPE_PointerToPointerTons1__RejetMouleVue:
		soap_serialize_PointerToPointerTons1__RejetMouleVue(soap, (ns1__RejetMouleVue **const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__RejetMouleVue:
		soap_serialize_PointerTons1__RejetMouleVue(soap, (ns1__RejetMouleVue *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ArrayOfRejetMouleVue:
		soap_serialize_PointerTons1__ArrayOfRejetMouleVue(soap, (ns1__ArrayOfRejetMouleVue *const*)ptr);
		break;
	case SOAP_TYPE_PointerToPointerTons1__Moule:
		soap_serialize_PointerToPointerTons1__Moule(soap, (ns1__Moule **const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__Moule:
		soap_serialize_PointerTons1__Moule(soap, (ns1__Moule *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ArrayOfMoule:
		soap_serialize_PointerTons1__ArrayOfMoule(soap, (ns1__ArrayOfMoule *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	}
}
#ifdef __cplusplus
}
#endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap *soap, const void *ptr, int type)
{(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	return NULL;
}
#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C" {
#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void *ptr, int type)
{(void)ptr; (void)type; /* appease -Wall -Werror */
}
#ifdef __cplusplus
}
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_ns1__MountedMoldsXml:
		return (void*)soap_instantiate_ns1__MountedMoldsXml(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ArrayOfMoule:
		return (void*)soap_instantiate_ns1__ArrayOfMoule(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__Moule:
		return (void*)soap_instantiate_ns1__Moule(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__MoulesEjectesXml:
		return (void*)soap_instantiate_ns1__MoulesEjectesXml(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ArrayOfRejetMouleVue:
		return (void*)soap_instantiate_ns1__ArrayOfRejetMouleVue(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__RejetMoule:
		return (void*)soap_instantiate_ns1__RejetMoule(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9:
		return (void*)soap_instantiate_ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__PrelevementWS_USCORE1_USCORE0_USCORE9:
		return (void*)soap_instantiate_ns1__PrelevementWS_USCORE1_USCORE0_USCORE9(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__MoulesPrelevesXml:
		return (void*)soap_instantiate_ns1__MoulesPrelevesXml(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ArrayOfPrelevementUnitaire:
		return (void*)soap_instantiate_ns1__ArrayOfPrelevementUnitaire(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__PrelevementUnitaire:
		return (void*)soap_instantiate_ns1__PrelevementUnitaire(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__Counts:
		return (void*)soap_instantiate__ns1__Counts(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__CountsResponse_CountsResult:
		return (void*)soap_instantiate__ns1__CountsResponse_CountsResult(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__CountsResponse:
		return (void*)soap_instantiate__ns1__CountsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetAlarmsSinceLastQuery:
		return (void*)soap_instantiate__ns1__GetAlarmsSinceLastQuery(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult:
		return (void*)soap_instantiate__ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetAlarmsSinceLastQueryResponse:
		return (void*)soap_instantiate__ns1__GetAlarmsSinceLastQueryResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetAlarms:
		return (void*)soap_instantiate__ns1__GetAlarms(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetAlarmsResponse_GetAlarmsResult:
		return (void*)soap_instantiate__ns1__GetAlarmsResponse_GetAlarmsResult(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetAlarmsResponse:
		return (void*)soap_instantiate__ns1__GetAlarmsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__MountedMolds:
		return (void*)soap_instantiate__ns1__MountedMolds(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__MountedMoldsResponse_MountedMoldsResult:
		return (void*)soap_instantiate__ns1__MountedMoldsResponse_MountedMoldsResult(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__MountedMoldsResponse:
		return (void*)soap_instantiate__ns1__MountedMoldsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__Measures:
		return (void*)soap_instantiate__ns1__Measures(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__MeasuresResponse_MeasuresResult:
		return (void*)soap_instantiate__ns1__MeasuresResponse_MeasuresResult(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__MeasuresResponse:
		return (void*)soap_instantiate__ns1__MeasuresResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__CumulCounts:
		return (void*)soap_instantiate__ns1__CumulCounts(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__CumulCountsResponse_CumulCountsResult:
		return (void*)soap_instantiate__ns1__CumulCountsResponse_CumulCountsResult(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__CumulCountsResponse:
		return (void*)soap_instantiate__ns1__CumulCountsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__ReadenMolds:
		return (void*)soap_instantiate__ns1__ReadenMolds(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__ReadenMoldsResponse_ReadenMoldsResult:
		return (void*)soap_instantiate__ns1__ReadenMoldsResponse_ReadenMoldsResult(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__ReadenMoldsResponse:
		return (void*)soap_instantiate__ns1__ReadenMoldsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__EjectedMolds:
		return (void*)soap_instantiate__ns1__EjectedMolds(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__EjectedMoldsResponse_EjectedMoldsResult:
		return (void*)soap_instantiate__ns1__EjectedMoldsResponse_EjectedMoldsResult(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__EjectedMoldsResponse:
		return (void*)soap_instantiate__ns1__EjectedMoldsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetMoldsInSampleTable:
		return (void*)soap_instantiate__ns1__GetMoldsInSampleTable(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult:
		return (void*)soap_instantiate__ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetMoldsInSampleTableResponse:
		return (void*)soap_instantiate__ns1__GetMoldsInSampleTableResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__ChangeMountedMolds:
		return (void*)soap_instantiate__ns1__ChangeMountedMolds(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult:
		return (void*)soap_instantiate__ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__ChangeMountedMoldsResponse:
		return (void*)soap_instantiate__ns1__ChangeMountedMoldsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AddEjectedMolds:
		return (void*)soap_instantiate__ns1__AddEjectedMolds(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AddEjectedMoldsResponse:
		return (void*)soap_instantiate__ns1__AddEjectedMoldsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__EraseMoldsInSampleTable:
		return (void*)soap_instantiate__ns1__EraseMoldsInSampleTable(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult:
		return (void*)soap_instantiate__ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__EraseMoldsInSampleTableResponse:
		return (void*)soap_instantiate__ns1__EraseMoldsInSampleTableResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__ChangeMoldsInSampleTable:
		return (void*)soap_instantiate__ns1__ChangeMoldsInSampleTable(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult:
		return (void*)soap_instantiate__ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__ChangeMoldsInSampleTableResponse:
		return (void*)soap_instantiate__ns1__ChangeMoldsInSampleTableResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetVersions:
		return (void*)soap_instantiate__ns1__GetVersions(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetVersionsResponse_GetVersionsResult:
		return (void*)soap_instantiate__ns1__GetVersionsResponse_GetVersionsResult(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetVersionsResponse:
		return (void*)soap_instantiate__ns1__GetVersionsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__ChangeSamples:
		return (void*)soap_instantiate__ns1__ChangeSamples(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__ChangeSamplesResponse_ChangeSamplesResult:
		return (void*)soap_instantiate__ns1__ChangeSamplesResponse_ChangeSamplesResult(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__ChangeSamplesResponse:
		return (void*)soap_instantiate__ns1__ChangeSamplesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__RejetMouleVue:
		return (void*)soap_instantiate_ns1__RejetMouleVue(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__Counts:
		return (void*)soap_instantiate___ns1__Counts(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetAlarmsSinceLastQuery:
		return (void*)soap_instantiate___ns1__GetAlarmsSinceLastQuery(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetAlarms:
		return (void*)soap_instantiate___ns1__GetAlarms(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__MountedMolds:
		return (void*)soap_instantiate___ns1__MountedMolds(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__Measures:
		return (void*)soap_instantiate___ns1__Measures(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__CumulCounts:
		return (void*)soap_instantiate___ns1__CumulCounts(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__ReadenMolds:
		return (void*)soap_instantiate___ns1__ReadenMolds(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__EjectedMolds:
		return (void*)soap_instantiate___ns1__EjectedMolds(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetMoldsInSampleTable:
		return (void*)soap_instantiate___ns1__GetMoldsInSampleTable(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__ChangeMountedMolds:
		return (void*)soap_instantiate___ns1__ChangeMountedMolds(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AddEjectedMolds:
		return (void*)soap_instantiate___ns1__AddEjectedMolds(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__EraseMoldsInSampleTable:
		return (void*)soap_instantiate___ns1__EraseMoldsInSampleTable(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__ChangeMoldsInSampleTable:
		return (void*)soap_instantiate___ns1__ChangeMoldsInSampleTable(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetVersions:
		return (void*)soap_instantiate___ns1__GetVersions(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__ChangeSamples:
		return (void*)soap_instantiate___ns1__ChangeSamples(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__Counts_:
		return (void*)soap_instantiate___ns1__Counts_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetAlarmsSinceLastQuery_:
		return (void*)soap_instantiate___ns1__GetAlarmsSinceLastQuery_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetAlarms_:
		return (void*)soap_instantiate___ns1__GetAlarms_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__MountedMolds_:
		return (void*)soap_instantiate___ns1__MountedMolds_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__Measures_:
		return (void*)soap_instantiate___ns1__Measures_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__CumulCounts_:
		return (void*)soap_instantiate___ns1__CumulCounts_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__ReadenMolds_:
		return (void*)soap_instantiate___ns1__ReadenMolds_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__EjectedMolds_:
		return (void*)soap_instantiate___ns1__EjectedMolds_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetMoldsInSampleTable_:
		return (void*)soap_instantiate___ns1__GetMoldsInSampleTable_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__ChangeMountedMolds_:
		return (void*)soap_instantiate___ns1__ChangeMountedMolds_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AddEjectedMolds_:
		return (void*)soap_instantiate___ns1__AddEjectedMolds_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__EraseMoldsInSampleTable_:
		return (void*)soap_instantiate___ns1__EraseMoldsInSampleTable_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__ChangeMoldsInSampleTable_:
		return (void*)soap_instantiate___ns1__ChangeMoldsInSampleTable_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetVersions_:
		return (void*)soap_instantiate___ns1__GetVersions_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__ChangeSamples_:
		return (void*)soap_instantiate___ns1__ChangeSamples_(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist *p)
{
	(void)soap; /* appease -Wall -Werror */
	if (!p->ptr)
		return SOAP_OK;
	switch (p->type)
	{
	case SOAP_TYPE_ns1__MountedMoldsXml:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__MountedMoldsXml*>(p->ptr), ns1__MountedMoldsXml);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__MountedMoldsXml*>(p->ptr), ns1__MountedMoldsXml);
		break;
	case SOAP_TYPE_ns1__ArrayOfMoule:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__ArrayOfMoule*>(p->ptr), ns1__ArrayOfMoule);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__ArrayOfMoule*>(p->ptr), ns1__ArrayOfMoule);
		break;
	case SOAP_TYPE_ns1__Moule:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__Moule*>(p->ptr), ns1__Moule);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__Moule*>(p->ptr), ns1__Moule);
		break;
	case SOAP_TYPE_ns1__MoulesEjectesXml:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__MoulesEjectesXml*>(p->ptr), ns1__MoulesEjectesXml);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__MoulesEjectesXml*>(p->ptr), ns1__MoulesEjectesXml);
		break;
	case SOAP_TYPE_ns1__ArrayOfRejetMouleVue:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__ArrayOfRejetMouleVue*>(p->ptr), ns1__ArrayOfRejetMouleVue);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__ArrayOfRejetMouleVue*>(p->ptr), ns1__ArrayOfRejetMouleVue);
		break;
	case SOAP_TYPE_ns1__RejetMoule:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__RejetMoule*>(p->ptr), ns1__RejetMoule);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__RejetMoule*>(p->ptr), ns1__RejetMoule);
		break;
	case SOAP_TYPE_ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9*>(p->ptr), ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9*>(p->ptr), ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9);
		break;
	case SOAP_TYPE_ns1__PrelevementWS_USCORE1_USCORE0_USCORE9:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__PrelevementWS_USCORE1_USCORE0_USCORE9*>(p->ptr), ns1__PrelevementWS_USCORE1_USCORE0_USCORE9);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__PrelevementWS_USCORE1_USCORE0_USCORE9*>(p->ptr), ns1__PrelevementWS_USCORE1_USCORE0_USCORE9);
		break;
	case SOAP_TYPE_ns1__MoulesPrelevesXml:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__MoulesPrelevesXml*>(p->ptr), ns1__MoulesPrelevesXml);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__MoulesPrelevesXml*>(p->ptr), ns1__MoulesPrelevesXml);
		break;
	case SOAP_TYPE_ns1__ArrayOfPrelevementUnitaire:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__ArrayOfPrelevementUnitaire*>(p->ptr), ns1__ArrayOfPrelevementUnitaire);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__ArrayOfPrelevementUnitaire*>(p->ptr), ns1__ArrayOfPrelevementUnitaire);
		break;
	case SOAP_TYPE_ns1__PrelevementUnitaire:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__PrelevementUnitaire*>(p->ptr), ns1__PrelevementUnitaire);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__PrelevementUnitaire*>(p->ptr), ns1__PrelevementUnitaire);
		break;
	case SOAP_TYPE__ns1__Counts:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__Counts*>(p->ptr), _ns1__Counts);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__Counts*>(p->ptr), _ns1__Counts);
		break;
	case SOAP_TYPE__ns1__CountsResponse_CountsResult:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__CountsResponse_CountsResult*>(p->ptr), _ns1__CountsResponse_CountsResult);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__CountsResponse_CountsResult*>(p->ptr), _ns1__CountsResponse_CountsResult);
		break;
	case SOAP_TYPE__ns1__CountsResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__CountsResponse*>(p->ptr), _ns1__CountsResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__CountsResponse*>(p->ptr), _ns1__CountsResponse);
		break;
	case SOAP_TYPE__ns1__GetAlarmsSinceLastQuery:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__GetAlarmsSinceLastQuery*>(p->ptr), _ns1__GetAlarmsSinceLastQuery);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__GetAlarmsSinceLastQuery*>(p->ptr), _ns1__GetAlarmsSinceLastQuery);
		break;
	case SOAP_TYPE__ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult*>(p->ptr), _ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult*>(p->ptr), _ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult);
		break;
	case SOAP_TYPE__ns1__GetAlarmsSinceLastQueryResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__GetAlarmsSinceLastQueryResponse*>(p->ptr), _ns1__GetAlarmsSinceLastQueryResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__GetAlarmsSinceLastQueryResponse*>(p->ptr), _ns1__GetAlarmsSinceLastQueryResponse);
		break;
	case SOAP_TYPE__ns1__GetAlarms:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__GetAlarms*>(p->ptr), _ns1__GetAlarms);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__GetAlarms*>(p->ptr), _ns1__GetAlarms);
		break;
	case SOAP_TYPE__ns1__GetAlarmsResponse_GetAlarmsResult:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__GetAlarmsResponse_GetAlarmsResult*>(p->ptr), _ns1__GetAlarmsResponse_GetAlarmsResult);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__GetAlarmsResponse_GetAlarmsResult*>(p->ptr), _ns1__GetAlarmsResponse_GetAlarmsResult);
		break;
	case SOAP_TYPE__ns1__GetAlarmsResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__GetAlarmsResponse*>(p->ptr), _ns1__GetAlarmsResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__GetAlarmsResponse*>(p->ptr), _ns1__GetAlarmsResponse);
		break;
	case SOAP_TYPE__ns1__MountedMolds:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__MountedMolds*>(p->ptr), _ns1__MountedMolds);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__MountedMolds*>(p->ptr), _ns1__MountedMolds);
		break;
	case SOAP_TYPE__ns1__MountedMoldsResponse_MountedMoldsResult:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__MountedMoldsResponse_MountedMoldsResult*>(p->ptr), _ns1__MountedMoldsResponse_MountedMoldsResult);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__MountedMoldsResponse_MountedMoldsResult*>(p->ptr), _ns1__MountedMoldsResponse_MountedMoldsResult);
		break;
	case SOAP_TYPE__ns1__MountedMoldsResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__MountedMoldsResponse*>(p->ptr), _ns1__MountedMoldsResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__MountedMoldsResponse*>(p->ptr), _ns1__MountedMoldsResponse);
		break;
	case SOAP_TYPE__ns1__Measures:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__Measures*>(p->ptr), _ns1__Measures);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__Measures*>(p->ptr), _ns1__Measures);
		break;
	case SOAP_TYPE__ns1__MeasuresResponse_MeasuresResult:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__MeasuresResponse_MeasuresResult*>(p->ptr), _ns1__MeasuresResponse_MeasuresResult);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__MeasuresResponse_MeasuresResult*>(p->ptr), _ns1__MeasuresResponse_MeasuresResult);
		break;
	case SOAP_TYPE__ns1__MeasuresResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__MeasuresResponse*>(p->ptr), _ns1__MeasuresResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__MeasuresResponse*>(p->ptr), _ns1__MeasuresResponse);
		break;
	case SOAP_TYPE__ns1__CumulCounts:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__CumulCounts*>(p->ptr), _ns1__CumulCounts);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__CumulCounts*>(p->ptr), _ns1__CumulCounts);
		break;
	case SOAP_TYPE__ns1__CumulCountsResponse_CumulCountsResult:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__CumulCountsResponse_CumulCountsResult*>(p->ptr), _ns1__CumulCountsResponse_CumulCountsResult);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__CumulCountsResponse_CumulCountsResult*>(p->ptr), _ns1__CumulCountsResponse_CumulCountsResult);
		break;
	case SOAP_TYPE__ns1__CumulCountsResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__CumulCountsResponse*>(p->ptr), _ns1__CumulCountsResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__CumulCountsResponse*>(p->ptr), _ns1__CumulCountsResponse);
		break;
	case SOAP_TYPE__ns1__ReadenMolds:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__ReadenMolds*>(p->ptr), _ns1__ReadenMolds);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__ReadenMolds*>(p->ptr), _ns1__ReadenMolds);
		break;
	case SOAP_TYPE__ns1__ReadenMoldsResponse_ReadenMoldsResult:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__ReadenMoldsResponse_ReadenMoldsResult*>(p->ptr), _ns1__ReadenMoldsResponse_ReadenMoldsResult);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__ReadenMoldsResponse_ReadenMoldsResult*>(p->ptr), _ns1__ReadenMoldsResponse_ReadenMoldsResult);
		break;
	case SOAP_TYPE__ns1__ReadenMoldsResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__ReadenMoldsResponse*>(p->ptr), _ns1__ReadenMoldsResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__ReadenMoldsResponse*>(p->ptr), _ns1__ReadenMoldsResponse);
		break;
	case SOAP_TYPE__ns1__EjectedMolds:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__EjectedMolds*>(p->ptr), _ns1__EjectedMolds);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__EjectedMolds*>(p->ptr), _ns1__EjectedMolds);
		break;
	case SOAP_TYPE__ns1__EjectedMoldsResponse_EjectedMoldsResult:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__EjectedMoldsResponse_EjectedMoldsResult*>(p->ptr), _ns1__EjectedMoldsResponse_EjectedMoldsResult);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__EjectedMoldsResponse_EjectedMoldsResult*>(p->ptr), _ns1__EjectedMoldsResponse_EjectedMoldsResult);
		break;
	case SOAP_TYPE__ns1__EjectedMoldsResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__EjectedMoldsResponse*>(p->ptr), _ns1__EjectedMoldsResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__EjectedMoldsResponse*>(p->ptr), _ns1__EjectedMoldsResponse);
		break;
	case SOAP_TYPE__ns1__GetMoldsInSampleTable:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__GetMoldsInSampleTable*>(p->ptr), _ns1__GetMoldsInSampleTable);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__GetMoldsInSampleTable*>(p->ptr), _ns1__GetMoldsInSampleTable);
		break;
	case SOAP_TYPE__ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult*>(p->ptr), _ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult*>(p->ptr), _ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult);
		break;
	case SOAP_TYPE__ns1__GetMoldsInSampleTableResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__GetMoldsInSampleTableResponse*>(p->ptr), _ns1__GetMoldsInSampleTableResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__GetMoldsInSampleTableResponse*>(p->ptr), _ns1__GetMoldsInSampleTableResponse);
		break;
	case SOAP_TYPE__ns1__ChangeMountedMolds:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__ChangeMountedMolds*>(p->ptr), _ns1__ChangeMountedMolds);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__ChangeMountedMolds*>(p->ptr), _ns1__ChangeMountedMolds);
		break;
	case SOAP_TYPE__ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult*>(p->ptr), _ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult*>(p->ptr), _ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult);
		break;
	case SOAP_TYPE__ns1__ChangeMountedMoldsResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__ChangeMountedMoldsResponse*>(p->ptr), _ns1__ChangeMountedMoldsResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__ChangeMountedMoldsResponse*>(p->ptr), _ns1__ChangeMountedMoldsResponse);
		break;
	case SOAP_TYPE__ns1__AddEjectedMolds:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__AddEjectedMolds*>(p->ptr), _ns1__AddEjectedMolds);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__AddEjectedMolds*>(p->ptr), _ns1__AddEjectedMolds);
		break;
	case SOAP_TYPE__ns1__AddEjectedMoldsResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__AddEjectedMoldsResponse*>(p->ptr), _ns1__AddEjectedMoldsResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__AddEjectedMoldsResponse*>(p->ptr), _ns1__AddEjectedMoldsResponse);
		break;
	case SOAP_TYPE__ns1__EraseMoldsInSampleTable:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__EraseMoldsInSampleTable*>(p->ptr), _ns1__EraseMoldsInSampleTable);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__EraseMoldsInSampleTable*>(p->ptr), _ns1__EraseMoldsInSampleTable);
		break;
	case SOAP_TYPE__ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult*>(p->ptr), _ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult*>(p->ptr), _ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult);
		break;
	case SOAP_TYPE__ns1__EraseMoldsInSampleTableResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__EraseMoldsInSampleTableResponse*>(p->ptr), _ns1__EraseMoldsInSampleTableResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__EraseMoldsInSampleTableResponse*>(p->ptr), _ns1__EraseMoldsInSampleTableResponse);
		break;
	case SOAP_TYPE__ns1__ChangeMoldsInSampleTable:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__ChangeMoldsInSampleTable*>(p->ptr), _ns1__ChangeMoldsInSampleTable);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__ChangeMoldsInSampleTable*>(p->ptr), _ns1__ChangeMoldsInSampleTable);
		break;
	case SOAP_TYPE__ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult*>(p->ptr), _ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult*>(p->ptr), _ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult);
		break;
	case SOAP_TYPE__ns1__ChangeMoldsInSampleTableResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__ChangeMoldsInSampleTableResponse*>(p->ptr), _ns1__ChangeMoldsInSampleTableResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__ChangeMoldsInSampleTableResponse*>(p->ptr), _ns1__ChangeMoldsInSampleTableResponse);
		break;
	case SOAP_TYPE__ns1__GetVersions:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__GetVersions*>(p->ptr), _ns1__GetVersions);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__GetVersions*>(p->ptr), _ns1__GetVersions);
		break;
	case SOAP_TYPE__ns1__GetVersionsResponse_GetVersionsResult:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__GetVersionsResponse_GetVersionsResult*>(p->ptr), _ns1__GetVersionsResponse_GetVersionsResult);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__GetVersionsResponse_GetVersionsResult*>(p->ptr), _ns1__GetVersionsResponse_GetVersionsResult);
		break;
	case SOAP_TYPE__ns1__GetVersionsResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__GetVersionsResponse*>(p->ptr), _ns1__GetVersionsResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__GetVersionsResponse*>(p->ptr), _ns1__GetVersionsResponse);
		break;
	case SOAP_TYPE__ns1__ChangeSamples:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__ChangeSamples*>(p->ptr), _ns1__ChangeSamples);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__ChangeSamples*>(p->ptr), _ns1__ChangeSamples);
		break;
	case SOAP_TYPE__ns1__ChangeSamplesResponse_ChangeSamplesResult:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__ChangeSamplesResponse_ChangeSamplesResult*>(p->ptr), _ns1__ChangeSamplesResponse_ChangeSamplesResult);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__ChangeSamplesResponse_ChangeSamplesResult*>(p->ptr), _ns1__ChangeSamplesResponse_ChangeSamplesResult);
		break;
	case SOAP_TYPE__ns1__ChangeSamplesResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__ChangeSamplesResponse*>(p->ptr), _ns1__ChangeSamplesResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__ChangeSamplesResponse*>(p->ptr), _ns1__ChangeSamplesResponse);
		break;
	case SOAP_TYPE_ns1__RejetMouleVue:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__RejetMouleVue*>(p->ptr), ns1__RejetMouleVue);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__RejetMouleVue*>(p->ptr), ns1__RejetMouleVue);
		break;
	case SOAP_TYPE___ns1__Counts:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__Counts*>(p->ptr), struct __ns1__Counts);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__Counts*>(p->ptr), struct __ns1__Counts);
		break;
	case SOAP_TYPE___ns1__GetAlarmsSinceLastQuery:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__GetAlarmsSinceLastQuery*>(p->ptr), struct __ns1__GetAlarmsSinceLastQuery);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__GetAlarmsSinceLastQuery*>(p->ptr), struct __ns1__GetAlarmsSinceLastQuery);
		break;
	case SOAP_TYPE___ns1__GetAlarms:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__GetAlarms*>(p->ptr), struct __ns1__GetAlarms);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__GetAlarms*>(p->ptr), struct __ns1__GetAlarms);
		break;
	case SOAP_TYPE___ns1__MountedMolds:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__MountedMolds*>(p->ptr), struct __ns1__MountedMolds);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__MountedMolds*>(p->ptr), struct __ns1__MountedMolds);
		break;
	case SOAP_TYPE___ns1__Measures:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__Measures*>(p->ptr), struct __ns1__Measures);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__Measures*>(p->ptr), struct __ns1__Measures);
		break;
	case SOAP_TYPE___ns1__CumulCounts:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__CumulCounts*>(p->ptr), struct __ns1__CumulCounts);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__CumulCounts*>(p->ptr), struct __ns1__CumulCounts);
		break;
	case SOAP_TYPE___ns1__ReadenMolds:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__ReadenMolds*>(p->ptr), struct __ns1__ReadenMolds);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__ReadenMolds*>(p->ptr), struct __ns1__ReadenMolds);
		break;
	case SOAP_TYPE___ns1__EjectedMolds:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__EjectedMolds*>(p->ptr), struct __ns1__EjectedMolds);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__EjectedMolds*>(p->ptr), struct __ns1__EjectedMolds);
		break;
	case SOAP_TYPE___ns1__GetMoldsInSampleTable:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__GetMoldsInSampleTable*>(p->ptr), struct __ns1__GetMoldsInSampleTable);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__GetMoldsInSampleTable*>(p->ptr), struct __ns1__GetMoldsInSampleTable);
		break;
	case SOAP_TYPE___ns1__ChangeMountedMolds:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__ChangeMountedMolds*>(p->ptr), struct __ns1__ChangeMountedMolds);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__ChangeMountedMolds*>(p->ptr), struct __ns1__ChangeMountedMolds);
		break;
	case SOAP_TYPE___ns1__AddEjectedMolds:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__AddEjectedMolds*>(p->ptr), struct __ns1__AddEjectedMolds);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__AddEjectedMolds*>(p->ptr), struct __ns1__AddEjectedMolds);
		break;
	case SOAP_TYPE___ns1__EraseMoldsInSampleTable:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__EraseMoldsInSampleTable*>(p->ptr), struct __ns1__EraseMoldsInSampleTable);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__EraseMoldsInSampleTable*>(p->ptr), struct __ns1__EraseMoldsInSampleTable);
		break;
	case SOAP_TYPE___ns1__ChangeMoldsInSampleTable:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__ChangeMoldsInSampleTable*>(p->ptr), struct __ns1__ChangeMoldsInSampleTable);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__ChangeMoldsInSampleTable*>(p->ptr), struct __ns1__ChangeMoldsInSampleTable);
		break;
	case SOAP_TYPE___ns1__GetVersions:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__GetVersions*>(p->ptr), struct __ns1__GetVersions);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__GetVersions*>(p->ptr), struct __ns1__GetVersions);
		break;
	case SOAP_TYPE___ns1__ChangeSamples:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__ChangeSamples*>(p->ptr), struct __ns1__ChangeSamples);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__ChangeSamples*>(p->ptr), struct __ns1__ChangeSamples);
		break;
	case SOAP_TYPE___ns1__Counts_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__Counts_*>(p->ptr), struct __ns1__Counts_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__Counts_*>(p->ptr), struct __ns1__Counts_);
		break;
	case SOAP_TYPE___ns1__GetAlarmsSinceLastQuery_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__GetAlarmsSinceLastQuery_*>(p->ptr), struct __ns1__GetAlarmsSinceLastQuery_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__GetAlarmsSinceLastQuery_*>(p->ptr), struct __ns1__GetAlarmsSinceLastQuery_);
		break;
	case SOAP_TYPE___ns1__GetAlarms_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__GetAlarms_*>(p->ptr), struct __ns1__GetAlarms_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__GetAlarms_*>(p->ptr), struct __ns1__GetAlarms_);
		break;
	case SOAP_TYPE___ns1__MountedMolds_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__MountedMolds_*>(p->ptr), struct __ns1__MountedMolds_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__MountedMolds_*>(p->ptr), struct __ns1__MountedMolds_);
		break;
	case SOAP_TYPE___ns1__Measures_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__Measures_*>(p->ptr), struct __ns1__Measures_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__Measures_*>(p->ptr), struct __ns1__Measures_);
		break;
	case SOAP_TYPE___ns1__CumulCounts_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__CumulCounts_*>(p->ptr), struct __ns1__CumulCounts_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__CumulCounts_*>(p->ptr), struct __ns1__CumulCounts_);
		break;
	case SOAP_TYPE___ns1__ReadenMolds_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__ReadenMolds_*>(p->ptr), struct __ns1__ReadenMolds_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__ReadenMolds_*>(p->ptr), struct __ns1__ReadenMolds_);
		break;
	case SOAP_TYPE___ns1__EjectedMolds_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__EjectedMolds_*>(p->ptr), struct __ns1__EjectedMolds_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__EjectedMolds_*>(p->ptr), struct __ns1__EjectedMolds_);
		break;
	case SOAP_TYPE___ns1__GetMoldsInSampleTable_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__GetMoldsInSampleTable_*>(p->ptr), struct __ns1__GetMoldsInSampleTable_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__GetMoldsInSampleTable_*>(p->ptr), struct __ns1__GetMoldsInSampleTable_);
		break;
	case SOAP_TYPE___ns1__ChangeMountedMolds_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__ChangeMountedMolds_*>(p->ptr), struct __ns1__ChangeMountedMolds_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__ChangeMountedMolds_*>(p->ptr), struct __ns1__ChangeMountedMolds_);
		break;
	case SOAP_TYPE___ns1__AddEjectedMolds_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__AddEjectedMolds_*>(p->ptr), struct __ns1__AddEjectedMolds_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__AddEjectedMolds_*>(p->ptr), struct __ns1__AddEjectedMolds_);
		break;
	case SOAP_TYPE___ns1__EraseMoldsInSampleTable_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__EraseMoldsInSampleTable_*>(p->ptr), struct __ns1__EraseMoldsInSampleTable_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__EraseMoldsInSampleTable_*>(p->ptr), struct __ns1__EraseMoldsInSampleTable_);
		break;
	case SOAP_TYPE___ns1__ChangeMoldsInSampleTable_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__ChangeMoldsInSampleTable_*>(p->ptr), struct __ns1__ChangeMoldsInSampleTable_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__ChangeMoldsInSampleTable_*>(p->ptr), struct __ns1__ChangeMoldsInSampleTable_);
		break;
	case SOAP_TYPE___ns1__GetVersions_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__GetVersions_*>(p->ptr), struct __ns1__GetVersions_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__GetVersions_*>(p->ptr), struct __ns1__GetVersions_);
		break;
	case SOAP_TYPE___ns1__ChangeSamples_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__ChangeSamples_*>(p->ptr), struct __ns1__ChangeSamples_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__ChangeSamples_*>(p->ptr), struct __ns1__ChangeSamples_);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Header*>(p->ptr), struct SOAP_ENV__Header);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Header*>(p->ptr), struct SOAP_ENV__Header);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Code*>(p->ptr), struct SOAP_ENV__Code);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Code*>(p->ptr), struct SOAP_ENV__Code);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Detail*>(p->ptr), struct SOAP_ENV__Detail);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Detail*>(p->ptr), struct SOAP_ENV__Detail);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Reason*>(p->ptr), struct SOAP_ENV__Reason);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Reason*>(p->ptr), struct SOAP_ENV__Reason);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Fault*>(p->ptr), struct SOAP_ENV__Fault);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Fault*>(p->ptr), struct SOAP_ENV__Fault);
		break;
#endif
	default:
		return SOAP_ERR;
	}
	return SOAP_OK;
}

#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int t, int b)
{
	do
	{	switch (t)
		{

		case SOAP_TYPE_ns1__RejetMouleVue: t = SOAP_TYPE_ns1__RejetMoule; break;
		default: return 0;
		}
	}
	while (t != b);
	return 1;
}
#ifdef WIN32
#pragma warning(pop)
#endif

#ifndef WITH_NOIDREF
#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap *soap, int t, int tt, void *p, size_t index, const void *q, void **x)
{
	(void)soap; (void)t; (void)p; (void)index; (void)q; (void)x; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_ns1__MountedMoldsXml:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__MountedMoldsXml type=%d location=%p object=%p\n", t, p, q));
		*(ns1__MountedMoldsXml*)p = *(ns1__MountedMoldsXml*)q;
		break;
	case SOAP_TYPE_ns1__ArrayOfMoule:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__ArrayOfMoule type=%d location=%p object=%p\n", t, p, q));
		*(ns1__ArrayOfMoule*)p = *(ns1__ArrayOfMoule*)q;
		break;
	case SOAP_TYPE_ns1__Moule:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__Moule type=%d location=%p object=%p\n", t, p, q));
		*(ns1__Moule*)p = *(ns1__Moule*)q;
		break;
	case SOAP_TYPE_ns1__MoulesEjectesXml:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__MoulesEjectesXml type=%d location=%p object=%p\n", t, p, q));
		*(ns1__MoulesEjectesXml*)p = *(ns1__MoulesEjectesXml*)q;
		break;
	case SOAP_TYPE_ns1__ArrayOfRejetMouleVue:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__ArrayOfRejetMouleVue type=%d location=%p object=%p\n", t, p, q));
		*(ns1__ArrayOfRejetMouleVue*)p = *(ns1__ArrayOfRejetMouleVue*)q;
		break;
	case SOAP_TYPE_ns1__RejetMoule:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__RejetMoule type=%d location=%p object=%p\n", t, p, q));
		*(ns1__RejetMoule*)p = *(ns1__RejetMoule*)q;
		break;
	case SOAP_TYPE_ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9 type=%d location=%p object=%p\n", t, p, q));
		*(ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9*)p = *(ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9*)q;
		break;
	case SOAP_TYPE_ns1__PrelevementWS_USCORE1_USCORE0_USCORE9:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__PrelevementWS_USCORE1_USCORE0_USCORE9 type=%d location=%p object=%p\n", t, p, q));
		*(ns1__PrelevementWS_USCORE1_USCORE0_USCORE9*)p = *(ns1__PrelevementWS_USCORE1_USCORE0_USCORE9*)q;
		break;
	case SOAP_TYPE_ns1__MoulesPrelevesXml:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__MoulesPrelevesXml type=%d location=%p object=%p\n", t, p, q));
		*(ns1__MoulesPrelevesXml*)p = *(ns1__MoulesPrelevesXml*)q;
		break;
	case SOAP_TYPE_ns1__ArrayOfPrelevementUnitaire:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__ArrayOfPrelevementUnitaire type=%d location=%p object=%p\n", t, p, q));
		*(ns1__ArrayOfPrelevementUnitaire*)p = *(ns1__ArrayOfPrelevementUnitaire*)q;
		break;
	case SOAP_TYPE_ns1__PrelevementUnitaire:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__PrelevementUnitaire type=%d location=%p object=%p\n", t, p, q));
		*(ns1__PrelevementUnitaire*)p = *(ns1__PrelevementUnitaire*)q;
		break;
	case SOAP_TYPE__ns1__Counts:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__Counts type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__Counts*)p = *(_ns1__Counts*)q;
		break;
	case SOAP_TYPE__ns1__CountsResponse_CountsResult:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__CountsResponse_CountsResult type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__CountsResponse_CountsResult*)p = *(_ns1__CountsResponse_CountsResult*)q;
		break;
	case SOAP_TYPE__ns1__CountsResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__CountsResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__CountsResponse*)p = *(_ns1__CountsResponse*)q;
		break;
	case SOAP_TYPE__ns1__GetAlarmsSinceLastQuery:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__GetAlarmsSinceLastQuery type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__GetAlarmsSinceLastQuery*)p = *(_ns1__GetAlarmsSinceLastQuery*)q;
		break;
	case SOAP_TYPE__ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult*)p = *(_ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult*)q;
		break;
	case SOAP_TYPE__ns1__GetAlarmsSinceLastQueryResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__GetAlarmsSinceLastQueryResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__GetAlarmsSinceLastQueryResponse*)p = *(_ns1__GetAlarmsSinceLastQueryResponse*)q;
		break;
	case SOAP_TYPE__ns1__GetAlarms:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__GetAlarms type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__GetAlarms*)p = *(_ns1__GetAlarms*)q;
		break;
	case SOAP_TYPE__ns1__GetAlarmsResponse_GetAlarmsResult:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__GetAlarmsResponse_GetAlarmsResult type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__GetAlarmsResponse_GetAlarmsResult*)p = *(_ns1__GetAlarmsResponse_GetAlarmsResult*)q;
		break;
	case SOAP_TYPE__ns1__GetAlarmsResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__GetAlarmsResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__GetAlarmsResponse*)p = *(_ns1__GetAlarmsResponse*)q;
		break;
	case SOAP_TYPE__ns1__MountedMolds:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__MountedMolds type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__MountedMolds*)p = *(_ns1__MountedMolds*)q;
		break;
	case SOAP_TYPE__ns1__MountedMoldsResponse_MountedMoldsResult:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__MountedMoldsResponse_MountedMoldsResult type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__MountedMoldsResponse_MountedMoldsResult*)p = *(_ns1__MountedMoldsResponse_MountedMoldsResult*)q;
		break;
	case SOAP_TYPE__ns1__MountedMoldsResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__MountedMoldsResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__MountedMoldsResponse*)p = *(_ns1__MountedMoldsResponse*)q;
		break;
	case SOAP_TYPE__ns1__Measures:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__Measures type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__Measures*)p = *(_ns1__Measures*)q;
		break;
	case SOAP_TYPE__ns1__MeasuresResponse_MeasuresResult:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__MeasuresResponse_MeasuresResult type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__MeasuresResponse_MeasuresResult*)p = *(_ns1__MeasuresResponse_MeasuresResult*)q;
		break;
	case SOAP_TYPE__ns1__MeasuresResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__MeasuresResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__MeasuresResponse*)p = *(_ns1__MeasuresResponse*)q;
		break;
	case SOAP_TYPE__ns1__CumulCounts:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__CumulCounts type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__CumulCounts*)p = *(_ns1__CumulCounts*)q;
		break;
	case SOAP_TYPE__ns1__CumulCountsResponse_CumulCountsResult:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__CumulCountsResponse_CumulCountsResult type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__CumulCountsResponse_CumulCountsResult*)p = *(_ns1__CumulCountsResponse_CumulCountsResult*)q;
		break;
	case SOAP_TYPE__ns1__CumulCountsResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__CumulCountsResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__CumulCountsResponse*)p = *(_ns1__CumulCountsResponse*)q;
		break;
	case SOAP_TYPE__ns1__ReadenMolds:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__ReadenMolds type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__ReadenMolds*)p = *(_ns1__ReadenMolds*)q;
		break;
	case SOAP_TYPE__ns1__ReadenMoldsResponse_ReadenMoldsResult:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__ReadenMoldsResponse_ReadenMoldsResult type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__ReadenMoldsResponse_ReadenMoldsResult*)p = *(_ns1__ReadenMoldsResponse_ReadenMoldsResult*)q;
		break;
	case SOAP_TYPE__ns1__ReadenMoldsResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__ReadenMoldsResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__ReadenMoldsResponse*)p = *(_ns1__ReadenMoldsResponse*)q;
		break;
	case SOAP_TYPE__ns1__EjectedMolds:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__EjectedMolds type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__EjectedMolds*)p = *(_ns1__EjectedMolds*)q;
		break;
	case SOAP_TYPE__ns1__EjectedMoldsResponse_EjectedMoldsResult:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__EjectedMoldsResponse_EjectedMoldsResult type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__EjectedMoldsResponse_EjectedMoldsResult*)p = *(_ns1__EjectedMoldsResponse_EjectedMoldsResult*)q;
		break;
	case SOAP_TYPE__ns1__EjectedMoldsResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__EjectedMoldsResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__EjectedMoldsResponse*)p = *(_ns1__EjectedMoldsResponse*)q;
		break;
	case SOAP_TYPE__ns1__GetMoldsInSampleTable:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__GetMoldsInSampleTable type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__GetMoldsInSampleTable*)p = *(_ns1__GetMoldsInSampleTable*)q;
		break;
	case SOAP_TYPE__ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult*)p = *(_ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult*)q;
		break;
	case SOAP_TYPE__ns1__GetMoldsInSampleTableResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__GetMoldsInSampleTableResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__GetMoldsInSampleTableResponse*)p = *(_ns1__GetMoldsInSampleTableResponse*)q;
		break;
	case SOAP_TYPE__ns1__ChangeMountedMolds:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__ChangeMountedMolds type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__ChangeMountedMolds*)p = *(_ns1__ChangeMountedMolds*)q;
		break;
	case SOAP_TYPE__ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult*)p = *(_ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult*)q;
		break;
	case SOAP_TYPE__ns1__ChangeMountedMoldsResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__ChangeMountedMoldsResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__ChangeMountedMoldsResponse*)p = *(_ns1__ChangeMountedMoldsResponse*)q;
		break;
	case SOAP_TYPE__ns1__AddEjectedMolds:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__AddEjectedMolds type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__AddEjectedMolds*)p = *(_ns1__AddEjectedMolds*)q;
		break;
	case SOAP_TYPE__ns1__AddEjectedMoldsResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__AddEjectedMoldsResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__AddEjectedMoldsResponse*)p = *(_ns1__AddEjectedMoldsResponse*)q;
		break;
	case SOAP_TYPE__ns1__EraseMoldsInSampleTable:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__EraseMoldsInSampleTable type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__EraseMoldsInSampleTable*)p = *(_ns1__EraseMoldsInSampleTable*)q;
		break;
	case SOAP_TYPE__ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult*)p = *(_ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult*)q;
		break;
	case SOAP_TYPE__ns1__EraseMoldsInSampleTableResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__EraseMoldsInSampleTableResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__EraseMoldsInSampleTableResponse*)p = *(_ns1__EraseMoldsInSampleTableResponse*)q;
		break;
	case SOAP_TYPE__ns1__ChangeMoldsInSampleTable:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__ChangeMoldsInSampleTable type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__ChangeMoldsInSampleTable*)p = *(_ns1__ChangeMoldsInSampleTable*)q;
		break;
	case SOAP_TYPE__ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult*)p = *(_ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult*)q;
		break;
	case SOAP_TYPE__ns1__ChangeMoldsInSampleTableResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__ChangeMoldsInSampleTableResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__ChangeMoldsInSampleTableResponse*)p = *(_ns1__ChangeMoldsInSampleTableResponse*)q;
		break;
	case SOAP_TYPE__ns1__GetVersions:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__GetVersions type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__GetVersions*)p = *(_ns1__GetVersions*)q;
		break;
	case SOAP_TYPE__ns1__GetVersionsResponse_GetVersionsResult:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__GetVersionsResponse_GetVersionsResult type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__GetVersionsResponse_GetVersionsResult*)p = *(_ns1__GetVersionsResponse_GetVersionsResult*)q;
		break;
	case SOAP_TYPE__ns1__GetVersionsResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__GetVersionsResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__GetVersionsResponse*)p = *(_ns1__GetVersionsResponse*)q;
		break;
	case SOAP_TYPE__ns1__ChangeSamples:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__ChangeSamples type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__ChangeSamples*)p = *(_ns1__ChangeSamples*)q;
		break;
	case SOAP_TYPE__ns1__ChangeSamplesResponse_ChangeSamplesResult:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__ChangeSamplesResponse_ChangeSamplesResult type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__ChangeSamplesResponse_ChangeSamplesResult*)p = *(_ns1__ChangeSamplesResponse_ChangeSamplesResult*)q;
		break;
	case SOAP_TYPE__ns1__ChangeSamplesResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__ChangeSamplesResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__ChangeSamplesResponse*)p = *(_ns1__ChangeSamplesResponse*)q;
		break;
	case SOAP_TYPE_ns1__RejetMouleVue:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__RejetMouleVue type=%d location=%p object=%p\n", t, p, q));
		*(ns1__RejetMouleVue*)p = *(ns1__RejetMouleVue*)q;
		break;
	case SOAP_TYPE___ns1__Counts:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__Counts type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__Counts*)p = *(struct __ns1__Counts*)q;
		break;
	case SOAP_TYPE___ns1__GetAlarmsSinceLastQuery:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__GetAlarmsSinceLastQuery type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__GetAlarmsSinceLastQuery*)p = *(struct __ns1__GetAlarmsSinceLastQuery*)q;
		break;
	case SOAP_TYPE___ns1__GetAlarms:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__GetAlarms type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__GetAlarms*)p = *(struct __ns1__GetAlarms*)q;
		break;
	case SOAP_TYPE___ns1__MountedMolds:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__MountedMolds type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__MountedMolds*)p = *(struct __ns1__MountedMolds*)q;
		break;
	case SOAP_TYPE___ns1__Measures:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__Measures type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__Measures*)p = *(struct __ns1__Measures*)q;
		break;
	case SOAP_TYPE___ns1__CumulCounts:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__CumulCounts type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__CumulCounts*)p = *(struct __ns1__CumulCounts*)q;
		break;
	case SOAP_TYPE___ns1__ReadenMolds:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__ReadenMolds type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__ReadenMolds*)p = *(struct __ns1__ReadenMolds*)q;
		break;
	case SOAP_TYPE___ns1__EjectedMolds:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__EjectedMolds type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__EjectedMolds*)p = *(struct __ns1__EjectedMolds*)q;
		break;
	case SOAP_TYPE___ns1__GetMoldsInSampleTable:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__GetMoldsInSampleTable type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__GetMoldsInSampleTable*)p = *(struct __ns1__GetMoldsInSampleTable*)q;
		break;
	case SOAP_TYPE___ns1__ChangeMountedMolds:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__ChangeMountedMolds type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__ChangeMountedMolds*)p = *(struct __ns1__ChangeMountedMolds*)q;
		break;
	case SOAP_TYPE___ns1__AddEjectedMolds:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__AddEjectedMolds type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__AddEjectedMolds*)p = *(struct __ns1__AddEjectedMolds*)q;
		break;
	case SOAP_TYPE___ns1__EraseMoldsInSampleTable:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__EraseMoldsInSampleTable type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__EraseMoldsInSampleTable*)p = *(struct __ns1__EraseMoldsInSampleTable*)q;
		break;
	case SOAP_TYPE___ns1__ChangeMoldsInSampleTable:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__ChangeMoldsInSampleTable type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__ChangeMoldsInSampleTable*)p = *(struct __ns1__ChangeMoldsInSampleTable*)q;
		break;
	case SOAP_TYPE___ns1__GetVersions:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__GetVersions type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__GetVersions*)p = *(struct __ns1__GetVersions*)q;
		break;
	case SOAP_TYPE___ns1__ChangeSamples:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__ChangeSamples type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__ChangeSamples*)p = *(struct __ns1__ChangeSamples*)q;
		break;
	case SOAP_TYPE___ns1__Counts_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__Counts_ type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__Counts_*)p = *(struct __ns1__Counts_*)q;
		break;
	case SOAP_TYPE___ns1__GetAlarmsSinceLastQuery_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__GetAlarmsSinceLastQuery_ type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__GetAlarmsSinceLastQuery_*)p = *(struct __ns1__GetAlarmsSinceLastQuery_*)q;
		break;
	case SOAP_TYPE___ns1__GetAlarms_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__GetAlarms_ type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__GetAlarms_*)p = *(struct __ns1__GetAlarms_*)q;
		break;
	case SOAP_TYPE___ns1__MountedMolds_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__MountedMolds_ type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__MountedMolds_*)p = *(struct __ns1__MountedMolds_*)q;
		break;
	case SOAP_TYPE___ns1__Measures_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__Measures_ type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__Measures_*)p = *(struct __ns1__Measures_*)q;
		break;
	case SOAP_TYPE___ns1__CumulCounts_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__CumulCounts_ type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__CumulCounts_*)p = *(struct __ns1__CumulCounts_*)q;
		break;
	case SOAP_TYPE___ns1__ReadenMolds_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__ReadenMolds_ type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__ReadenMolds_*)p = *(struct __ns1__ReadenMolds_*)q;
		break;
	case SOAP_TYPE___ns1__EjectedMolds_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__EjectedMolds_ type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__EjectedMolds_*)p = *(struct __ns1__EjectedMolds_*)q;
		break;
	case SOAP_TYPE___ns1__GetMoldsInSampleTable_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__GetMoldsInSampleTable_ type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__GetMoldsInSampleTable_*)p = *(struct __ns1__GetMoldsInSampleTable_*)q;
		break;
	case SOAP_TYPE___ns1__ChangeMountedMolds_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__ChangeMountedMolds_ type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__ChangeMountedMolds_*)p = *(struct __ns1__ChangeMountedMolds_*)q;
		break;
	case SOAP_TYPE___ns1__AddEjectedMolds_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__AddEjectedMolds_ type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__AddEjectedMolds_*)p = *(struct __ns1__AddEjectedMolds_*)q;
		break;
	case SOAP_TYPE___ns1__EraseMoldsInSampleTable_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__EraseMoldsInSampleTable_ type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__EraseMoldsInSampleTable_*)p = *(struct __ns1__EraseMoldsInSampleTable_*)q;
		break;
	case SOAP_TYPE___ns1__ChangeMoldsInSampleTable_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__ChangeMoldsInSampleTable_ type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__ChangeMoldsInSampleTable_*)p = *(struct __ns1__ChangeMoldsInSampleTable_*)q;
		break;
	case SOAP_TYPE___ns1__GetVersions_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__GetVersions_ type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__GetVersions_*)p = *(struct __ns1__GetVersions_*)q;
		break;
	case SOAP_TYPE___ns1__ChangeSamples_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__ChangeSamples_ type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__ChangeSamples_*)p = *(struct __ns1__ChangeSamples_*)q;
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Header type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Code type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Detail type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Reason type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Fault type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
		break;
#endif
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", t, tt));
	}
}
#ifdef WIN32
#pragma warning(pop)
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	a = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return a;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n)
{
	char *a = static_cast<char *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char)));
	for (char *p = a; p && n--; ++p)
		soap_default_byte(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	if (soap_out_byte(soap, tag ? tag : "byte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	a = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return a;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n)
{
	int *a = static_cast<int *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(int)));
	for (int *p = a; p && n--; ++p)
		soap_default_int(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	if (soap_out_int(soap, tag ? tag : "int", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_ns1__EResetMode[] =
{	{ (LONG64)ns1__EResetMode__Normal, "Normal" },
	{ (LONG64)ns1__EResetMode__OneShot, "OneShot" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__EResetMode2s(struct soap *soap, enum ns1__EResetMode n)
{
	const char *s = soap_code_str(soap_codes_ns1__EResetMode, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__EResetMode(struct soap *soap, const char *tag, int id, const enum ns1__EResetMode *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__EResetMode), type) || soap_send(soap, soap_ns1__EResetMode2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__EResetMode(struct soap *soap, const char *s, enum ns1__EResetMode *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_ns1__EResetMode, s);
	if (map)
		*a = (enum ns1__EResetMode)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (enum ns1__EResetMode)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum ns1__EResetMode * SOAP_FMAC4 soap_in_ns1__EResetMode(struct soap *soap, const char *tag, enum ns1__EResetMode *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum ns1__EResetMode*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__EResetMode, sizeof(enum ns1__EResetMode), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2ns1__EResetMode(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (enum ns1__EResetMode *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__EResetMode, SOAP_TYPE_ns1__EResetMode, sizeof(enum ns1__EResetMode), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 enum ns1__EResetMode * SOAP_FMAC4 soap_new_ns1__EResetMode(struct soap *soap, int n)
{
	enum ns1__EResetMode *a = static_cast<enum ns1__EResetMode *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(enum ns1__EResetMode)));
	for (enum ns1__EResetMode *p = a; p && n--; ++p)
		soap_default_ns1__EResetMode(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__EResetMode(struct soap *soap, const enum ns1__EResetMode *a, const char *tag, const char *type)
{
	if (soap_out_ns1__EResetMode(soap, tag ? tag : "ns1:EResetMode", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum ns1__EResetMode * SOAP_FMAC4 soap_get_ns1__EResetMode(struct soap *soap, enum ns1__EResetMode *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__EResetMode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_ns1__CodeDetection[] =
{	{ (LONG64)ns1__CodeDetection__0, "0" },
	{ (LONG64)ns1__CodeDetection__1, "1" },
	{ (LONG64)ns1__CodeDetection__2, "2" },
	{ (LONG64)ns1__CodeDetection__3, "3" },
	{ (LONG64)ns1__CodeDetection__4, "4" },
	{ (LONG64)ns1__CodeDetection__9, "9" },
	{ (LONG64)ns1__CodeDetection__10, "10" },
	{ (LONG64)ns1__CodeDetection__12, "12" },
	{ (LONG64)ns1__CodeDetection__16, "16" },
	{ (LONG64)ns1__CodeDetection__17, "17" },
	{ (LONG64)ns1__CodeDetection__26, "26" },
	{ (LONG64)ns1__CodeDetection__27, "27" },
	{ (LONG64)ns1__CodeDetection__30, "30" },
	{ (LONG64)ns1__CodeDetection__32, "32" },
	{ (LONG64)ns1__CodeDetection__35, "35" },
	{ (LONG64)ns1__CodeDetection__37, "37" },
	{ (LONG64)ns1__CodeDetection__38, "38" },
	{ (LONG64)ns1__CodeDetection__39, "39" },
	{ (LONG64)ns1__CodeDetection__40, "40" },
	{ (LONG64)ns1__CodeDetection__41, "41" },
	{ (LONG64)ns1__CodeDetection__42, "42" },
	{ (LONG64)ns1__CodeDetection__43, "43" },
	{ (LONG64)ns1__CodeDetection__44, "44" },
	{ (LONG64)ns1__CodeDetection__46, "46" },
	{ (LONG64)ns1__CodeDetection__47, "47" },
	{ (LONG64)ns1__CodeDetection__49, "49" },
	{ (LONG64)ns1__CodeDetection__54, "54" },
	{ (LONG64)ns1__CodeDetection__55, "55" },
	{ (LONG64)ns1__CodeDetection__56, "56" },
	{ (LONG64)ns1__CodeDetection__58, "58" },
	{ (LONG64)ns1__CodeDetection__66, "66" },
	{ (LONG64)ns1__CodeDetection__80, "80" },
	{ (LONG64)ns1__CodeDetection__91, "91" },
	{ (LONG64)ns1__CodeDetection__92, "92" },
	{ (LONG64)ns1__CodeDetection__93, "93" },
	{ (LONG64)ns1__CodeDetection__94, "94" },
	{ (LONG64)ns1__CodeDetection__100, "100" },
	{ (LONG64)ns1__CodeDetection__101, "101" },
	{ (LONG64)ns1__CodeDetection__102, "102" },
	{ (LONG64)ns1__CodeDetection__103, "103" },
	{ (LONG64)ns1__CodeDetection__104, "104" },
	{ (LONG64)ns1__CodeDetection__105, "105" },
	{ (LONG64)ns1__CodeDetection__106, "106" },
	{ (LONG64)ns1__CodeDetection__107, "107" },
	{ (LONG64)ns1__CodeDetection__108, "108" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__CodeDetection2s(struct soap *soap, enum ns1__CodeDetection n)
{
	const char *s = soap_code_str(soap_codes_ns1__CodeDetection, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CodeDetection(struct soap *soap, const char *tag, int id, const enum ns1__CodeDetection *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__CodeDetection), type) || soap_send(soap, soap_ns1__CodeDetection2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__CodeDetection(struct soap *soap, const char *s, enum ns1__CodeDetection *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_ns1__CodeDetection, s);
	if (map)
		*a = (enum ns1__CodeDetection)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 108)
			return soap->error = SOAP_TYPE;
		*a = (enum ns1__CodeDetection)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum ns1__CodeDetection * SOAP_FMAC4 soap_in_ns1__CodeDetection(struct soap *soap, const char *tag, enum ns1__CodeDetection *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum ns1__CodeDetection*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__CodeDetection, sizeof(enum ns1__CodeDetection), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2ns1__CodeDetection(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (enum ns1__CodeDetection *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__CodeDetection, SOAP_TYPE_ns1__CodeDetection, sizeof(enum ns1__CodeDetection), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 enum ns1__CodeDetection * SOAP_FMAC4 soap_new_ns1__CodeDetection(struct soap *soap, int n)
{
	enum ns1__CodeDetection *a = static_cast<enum ns1__CodeDetection *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(enum ns1__CodeDetection)));
	for (enum ns1__CodeDetection *p = a; p && n--; ++p)
		soap_default_ns1__CodeDetection(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__CodeDetection(struct soap *soap, const enum ns1__CodeDetection *a, const char *tag, const char *type)
{
	if (soap_out_ns1__CodeDetection(soap, tag ? tag : "ns1:CodeDetection", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum ns1__CodeDetection * SOAP_FMAC4 soap_get_ns1__CodeDetection(struct soap *soap, enum ns1__CodeDetection *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__CodeDetection(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__ChangeSamplesResponse_ChangeSamplesResult::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->_ns1__ChangeSamplesResponse_ChangeSamplesResult::__any = NULL;
	this->_ns1__ChangeSamplesResponse_ChangeSamplesResult::__mixed = NULL;
}

void _ns1__ChangeSamplesResponse_ChangeSamplesResult::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int _ns1__ChangeSamplesResponse_ChangeSamplesResult::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__ChangeSamplesResponse_ChangeSamplesResult(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ChangeSamplesResponse_ChangeSamplesResult(struct soap *soap, const char *tag, int id, const _ns1__ChangeSamplesResponse_ChangeSamplesResult *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__ChangeSamplesResponse_ChangeSamplesResult), type))
		return soap->error;
	if (soap_outliteral(soap, "-any", (char*const*)&a->_ns1__ChangeSamplesResponse_ChangeSamplesResult::__any, NULL))
		return soap->error;
	if (soap_outliteral(soap, "-mixed", (char*const*)&a->_ns1__ChangeSamplesResponse_ChangeSamplesResult::__mixed, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__ChangeSamplesResponse_ChangeSamplesResult::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__ChangeSamplesResponse_ChangeSamplesResult(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__ChangeSamplesResponse_ChangeSamplesResult * SOAP_FMAC4 soap_in__ns1__ChangeSamplesResponse_ChangeSamplesResult(struct soap *soap, const char *tag, _ns1__ChangeSamplesResponse_ChangeSamplesResult *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__ChangeSamplesResponse_ChangeSamplesResult*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__ChangeSamplesResponse_ChangeSamplesResult, sizeof(_ns1__ChangeSamplesResponse_ChangeSamplesResult), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__ChangeSamplesResponse_ChangeSamplesResult)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__ChangeSamplesResponse_ChangeSamplesResult *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___any1 = 1;
	size_t soap_flag___mixed1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag___any1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-any", (char**)&a->_ns1__ChangeSamplesResponse_ChangeSamplesResult::__any))
				{	soap_flag___any1--;
					continue;
				}
			}
			if (soap_flag___mixed1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-mixed", (char**)&a->_ns1__ChangeSamplesResponse_ChangeSamplesResult::__mixed))
				{	soap_flag___mixed1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__ChangeSamplesResponse_ChangeSamplesResult *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__ChangeSamplesResponse_ChangeSamplesResult, SOAP_TYPE__ns1__ChangeSamplesResponse_ChangeSamplesResult, sizeof(_ns1__ChangeSamplesResponse_ChangeSamplesResult), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__ChangeSamplesResponse_ChangeSamplesResult * SOAP_FMAC2 soap_instantiate__ns1__ChangeSamplesResponse_ChangeSamplesResult(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__ChangeSamplesResponse_ChangeSamplesResult(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__ChangeSamplesResponse_ChangeSamplesResult *p;
	size_t k = sizeof(_ns1__ChangeSamplesResponse_ChangeSamplesResult);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__ChangeSamplesResponse_ChangeSamplesResult, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__ChangeSamplesResponse_ChangeSamplesResult);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__ChangeSamplesResponse_ChangeSamplesResult, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__ChangeSamplesResponse_ChangeSamplesResult location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__ChangeSamplesResponse_ChangeSamplesResult::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__ChangeSamplesResponse_ChangeSamplesResult(soap, tag ? tag : "ns1:ChangeSamplesResponse-ChangeSamplesResult", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__ChangeSamplesResponse_ChangeSamplesResult::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__ChangeSamplesResponse_ChangeSamplesResult(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__ChangeSamplesResponse_ChangeSamplesResult * SOAP_FMAC4 soap_get__ns1__ChangeSamplesResponse_ChangeSamplesResult(struct soap *soap, _ns1__ChangeSamplesResponse_ChangeSamplesResult *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__ChangeSamplesResponse_ChangeSamplesResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__GetVersionsResponse_GetVersionsResult::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->_ns1__GetVersionsResponse_GetVersionsResult::__any = NULL;
	this->_ns1__GetVersionsResponse_GetVersionsResult::__mixed = NULL;
}

void _ns1__GetVersionsResponse_GetVersionsResult::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int _ns1__GetVersionsResponse_GetVersionsResult::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetVersionsResponse_GetVersionsResult(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetVersionsResponse_GetVersionsResult(struct soap *soap, const char *tag, int id, const _ns1__GetVersionsResponse_GetVersionsResult *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetVersionsResponse_GetVersionsResult), type))
		return soap->error;
	if (soap_outliteral(soap, "-any", (char*const*)&a->_ns1__GetVersionsResponse_GetVersionsResult::__any, NULL))
		return soap->error;
	if (soap_outliteral(soap, "-mixed", (char*const*)&a->_ns1__GetVersionsResponse_GetVersionsResult::__mixed, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetVersionsResponse_GetVersionsResult::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__GetVersionsResponse_GetVersionsResult(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetVersionsResponse_GetVersionsResult * SOAP_FMAC4 soap_in__ns1__GetVersionsResponse_GetVersionsResult(struct soap *soap, const char *tag, _ns1__GetVersionsResponse_GetVersionsResult *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetVersionsResponse_GetVersionsResult*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetVersionsResponse_GetVersionsResult, sizeof(_ns1__GetVersionsResponse_GetVersionsResult), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__GetVersionsResponse_GetVersionsResult)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__GetVersionsResponse_GetVersionsResult *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___any1 = 1;
	size_t soap_flag___mixed1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag___any1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-any", (char**)&a->_ns1__GetVersionsResponse_GetVersionsResult::__any))
				{	soap_flag___any1--;
					continue;
				}
			}
			if (soap_flag___mixed1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-mixed", (char**)&a->_ns1__GetVersionsResponse_GetVersionsResult::__mixed))
				{	soap_flag___mixed1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetVersionsResponse_GetVersionsResult *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetVersionsResponse_GetVersionsResult, SOAP_TYPE__ns1__GetVersionsResponse_GetVersionsResult, sizeof(_ns1__GetVersionsResponse_GetVersionsResult), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__GetVersionsResponse_GetVersionsResult * SOAP_FMAC2 soap_instantiate__ns1__GetVersionsResponse_GetVersionsResult(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetVersionsResponse_GetVersionsResult(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__GetVersionsResponse_GetVersionsResult *p;
	size_t k = sizeof(_ns1__GetVersionsResponse_GetVersionsResult);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__GetVersionsResponse_GetVersionsResult, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__GetVersionsResponse_GetVersionsResult);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__GetVersionsResponse_GetVersionsResult, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__GetVersionsResponse_GetVersionsResult location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__GetVersionsResponse_GetVersionsResult::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__GetVersionsResponse_GetVersionsResult(soap, tag ? tag : "ns1:GetVersionsResponse-GetVersionsResult", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetVersionsResponse_GetVersionsResult::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetVersionsResponse_GetVersionsResult(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetVersionsResponse_GetVersionsResult * SOAP_FMAC4 soap_get__ns1__GetVersionsResponse_GetVersionsResult(struct soap *soap, _ns1__GetVersionsResponse_GetVersionsResult *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetVersionsResponse_GetVersionsResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->_ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult::__any = NULL;
	this->_ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult::__mixed = NULL;
}

void _ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int _ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult(struct soap *soap, const char *tag, int id, const _ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult), type))
		return soap->error;
	if (soap_outliteral(soap, "-any", (char*const*)&a->_ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult::__any, NULL))
		return soap->error;
	if (soap_outliteral(soap, "-mixed", (char*const*)&a->_ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult::__mixed, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult * SOAP_FMAC4 soap_in__ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult(struct soap *soap, const char *tag, _ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult, sizeof(_ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___any1 = 1;
	size_t soap_flag___mixed1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag___any1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-any", (char**)&a->_ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult::__any))
				{	soap_flag___any1--;
					continue;
				}
			}
			if (soap_flag___mixed1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-mixed", (char**)&a->_ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult::__mixed))
				{	soap_flag___mixed1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult, SOAP_TYPE__ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult, sizeof(_ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult * SOAP_FMAC2 soap_instantiate__ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult *p;
	size_t k = sizeof(_ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult(soap, tag ? tag : "ns1:ChangeMoldsInSampleTableResponse-ChangeMoldsInSampleTableResult", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult * SOAP_FMAC4 soap_get__ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult(struct soap *soap, _ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->_ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult::__any = NULL;
	this->_ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult::__mixed = NULL;
}

void _ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int _ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult(struct soap *soap, const char *tag, int id, const _ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult), type))
		return soap->error;
	if (soap_outliteral(soap, "-any", (char*const*)&a->_ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult::__any, NULL))
		return soap->error;
	if (soap_outliteral(soap, "-mixed", (char*const*)&a->_ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult::__mixed, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult * SOAP_FMAC4 soap_in__ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult(struct soap *soap, const char *tag, _ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult, sizeof(_ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___any1 = 1;
	size_t soap_flag___mixed1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag___any1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-any", (char**)&a->_ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult::__any))
				{	soap_flag___any1--;
					continue;
				}
			}
			if (soap_flag___mixed1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-mixed", (char**)&a->_ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult::__mixed))
				{	soap_flag___mixed1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult, SOAP_TYPE__ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult, sizeof(_ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult * SOAP_FMAC2 soap_instantiate__ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult *p;
	size_t k = sizeof(_ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult(soap, tag ? tag : "ns1:EraseMoldsInSampleTableResponse-EraseMoldsInSampleTableResult", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult * SOAP_FMAC4 soap_get__ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult(struct soap *soap, _ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->_ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult::__any = NULL;
	this->_ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult::__mixed = NULL;
}

void _ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int _ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult(struct soap *soap, const char *tag, int id, const _ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult), type))
		return soap->error;
	if (soap_outliteral(soap, "-any", (char*const*)&a->_ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult::__any, NULL))
		return soap->error;
	if (soap_outliteral(soap, "-mixed", (char*const*)&a->_ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult::__mixed, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult * SOAP_FMAC4 soap_in__ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult(struct soap *soap, const char *tag, _ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult, sizeof(_ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___any1 = 1;
	size_t soap_flag___mixed1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag___any1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-any", (char**)&a->_ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult::__any))
				{	soap_flag___any1--;
					continue;
				}
			}
			if (soap_flag___mixed1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-mixed", (char**)&a->_ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult::__mixed))
				{	soap_flag___mixed1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult, SOAP_TYPE__ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult, sizeof(_ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult * SOAP_FMAC2 soap_instantiate__ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult *p;
	size_t k = sizeof(_ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult(soap, tag ? tag : "ns1:ChangeMountedMoldsResponse-ChangeMountedMoldsResult", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult * SOAP_FMAC4 soap_get__ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult(struct soap *soap, _ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->_ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult::__any = NULL;
	this->_ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult::__mixed = NULL;
}

void _ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int _ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult(struct soap *soap, const char *tag, int id, const _ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult), type))
		return soap->error;
	if (soap_outliteral(soap, "-any", (char*const*)&a->_ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult::__any, NULL))
		return soap->error;
	if (soap_outliteral(soap, "-mixed", (char*const*)&a->_ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult::__mixed, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult * SOAP_FMAC4 soap_in__ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult(struct soap *soap, const char *tag, _ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult, sizeof(_ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___any1 = 1;
	size_t soap_flag___mixed1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag___any1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-any", (char**)&a->_ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult::__any))
				{	soap_flag___any1--;
					continue;
				}
			}
			if (soap_flag___mixed1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-mixed", (char**)&a->_ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult::__mixed))
				{	soap_flag___mixed1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult, SOAP_TYPE__ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult, sizeof(_ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult * SOAP_FMAC2 soap_instantiate__ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult *p;
	size_t k = sizeof(_ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult(soap, tag ? tag : "ns1:GetMoldsInSampleTableResponse-GetMoldsInSampleTableResult", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult * SOAP_FMAC4 soap_get__ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult(struct soap *soap, _ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__EjectedMoldsResponse_EjectedMoldsResult::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->_ns1__EjectedMoldsResponse_EjectedMoldsResult::__any = NULL;
	this->_ns1__EjectedMoldsResponse_EjectedMoldsResult::__mixed = NULL;
}

void _ns1__EjectedMoldsResponse_EjectedMoldsResult::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int _ns1__EjectedMoldsResponse_EjectedMoldsResult::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__EjectedMoldsResponse_EjectedMoldsResult(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__EjectedMoldsResponse_EjectedMoldsResult(struct soap *soap, const char *tag, int id, const _ns1__EjectedMoldsResponse_EjectedMoldsResult *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__EjectedMoldsResponse_EjectedMoldsResult), type))
		return soap->error;
	if (soap_outliteral(soap, "-any", (char*const*)&a->_ns1__EjectedMoldsResponse_EjectedMoldsResult::__any, NULL))
		return soap->error;
	if (soap_outliteral(soap, "-mixed", (char*const*)&a->_ns1__EjectedMoldsResponse_EjectedMoldsResult::__mixed, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__EjectedMoldsResponse_EjectedMoldsResult::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__EjectedMoldsResponse_EjectedMoldsResult(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__EjectedMoldsResponse_EjectedMoldsResult * SOAP_FMAC4 soap_in__ns1__EjectedMoldsResponse_EjectedMoldsResult(struct soap *soap, const char *tag, _ns1__EjectedMoldsResponse_EjectedMoldsResult *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__EjectedMoldsResponse_EjectedMoldsResult*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__EjectedMoldsResponse_EjectedMoldsResult, sizeof(_ns1__EjectedMoldsResponse_EjectedMoldsResult), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__EjectedMoldsResponse_EjectedMoldsResult)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__EjectedMoldsResponse_EjectedMoldsResult *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___any1 = 1;
	size_t soap_flag___mixed1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag___any1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-any", (char**)&a->_ns1__EjectedMoldsResponse_EjectedMoldsResult::__any))
				{	soap_flag___any1--;
					continue;
				}
			}
			if (soap_flag___mixed1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-mixed", (char**)&a->_ns1__EjectedMoldsResponse_EjectedMoldsResult::__mixed))
				{	soap_flag___mixed1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__EjectedMoldsResponse_EjectedMoldsResult *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__EjectedMoldsResponse_EjectedMoldsResult, SOAP_TYPE__ns1__EjectedMoldsResponse_EjectedMoldsResult, sizeof(_ns1__EjectedMoldsResponse_EjectedMoldsResult), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__EjectedMoldsResponse_EjectedMoldsResult * SOAP_FMAC2 soap_instantiate__ns1__EjectedMoldsResponse_EjectedMoldsResult(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__EjectedMoldsResponse_EjectedMoldsResult(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__EjectedMoldsResponse_EjectedMoldsResult *p;
	size_t k = sizeof(_ns1__EjectedMoldsResponse_EjectedMoldsResult);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__EjectedMoldsResponse_EjectedMoldsResult, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__EjectedMoldsResponse_EjectedMoldsResult);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__EjectedMoldsResponse_EjectedMoldsResult, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__EjectedMoldsResponse_EjectedMoldsResult location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__EjectedMoldsResponse_EjectedMoldsResult::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__EjectedMoldsResponse_EjectedMoldsResult(soap, tag ? tag : "ns1:EjectedMoldsResponse-EjectedMoldsResult", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__EjectedMoldsResponse_EjectedMoldsResult::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__EjectedMoldsResponse_EjectedMoldsResult(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__EjectedMoldsResponse_EjectedMoldsResult * SOAP_FMAC4 soap_get__ns1__EjectedMoldsResponse_EjectedMoldsResult(struct soap *soap, _ns1__EjectedMoldsResponse_EjectedMoldsResult *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__EjectedMoldsResponse_EjectedMoldsResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__ReadenMoldsResponse_ReadenMoldsResult::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->_ns1__ReadenMoldsResponse_ReadenMoldsResult::__any = NULL;
	this->_ns1__ReadenMoldsResponse_ReadenMoldsResult::__mixed = NULL;
}

void _ns1__ReadenMoldsResponse_ReadenMoldsResult::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int _ns1__ReadenMoldsResponse_ReadenMoldsResult::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__ReadenMoldsResponse_ReadenMoldsResult(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ReadenMoldsResponse_ReadenMoldsResult(struct soap *soap, const char *tag, int id, const _ns1__ReadenMoldsResponse_ReadenMoldsResult *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__ReadenMoldsResponse_ReadenMoldsResult), type))
		return soap->error;
	if (soap_outliteral(soap, "-any", (char*const*)&a->_ns1__ReadenMoldsResponse_ReadenMoldsResult::__any, NULL))
		return soap->error;
	if (soap_outliteral(soap, "-mixed", (char*const*)&a->_ns1__ReadenMoldsResponse_ReadenMoldsResult::__mixed, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__ReadenMoldsResponse_ReadenMoldsResult::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__ReadenMoldsResponse_ReadenMoldsResult(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__ReadenMoldsResponse_ReadenMoldsResult * SOAP_FMAC4 soap_in__ns1__ReadenMoldsResponse_ReadenMoldsResult(struct soap *soap, const char *tag, _ns1__ReadenMoldsResponse_ReadenMoldsResult *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__ReadenMoldsResponse_ReadenMoldsResult*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__ReadenMoldsResponse_ReadenMoldsResult, sizeof(_ns1__ReadenMoldsResponse_ReadenMoldsResult), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__ReadenMoldsResponse_ReadenMoldsResult)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__ReadenMoldsResponse_ReadenMoldsResult *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___any1 = 1;
	size_t soap_flag___mixed1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag___any1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-any", (char**)&a->_ns1__ReadenMoldsResponse_ReadenMoldsResult::__any))
				{	soap_flag___any1--;
					continue;
				}
			}
			if (soap_flag___mixed1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-mixed", (char**)&a->_ns1__ReadenMoldsResponse_ReadenMoldsResult::__mixed))
				{	soap_flag___mixed1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__ReadenMoldsResponse_ReadenMoldsResult *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__ReadenMoldsResponse_ReadenMoldsResult, SOAP_TYPE__ns1__ReadenMoldsResponse_ReadenMoldsResult, sizeof(_ns1__ReadenMoldsResponse_ReadenMoldsResult), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__ReadenMoldsResponse_ReadenMoldsResult * SOAP_FMAC2 soap_instantiate__ns1__ReadenMoldsResponse_ReadenMoldsResult(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__ReadenMoldsResponse_ReadenMoldsResult(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__ReadenMoldsResponse_ReadenMoldsResult *p;
	size_t k = sizeof(_ns1__ReadenMoldsResponse_ReadenMoldsResult);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__ReadenMoldsResponse_ReadenMoldsResult, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__ReadenMoldsResponse_ReadenMoldsResult);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__ReadenMoldsResponse_ReadenMoldsResult, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__ReadenMoldsResponse_ReadenMoldsResult location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__ReadenMoldsResponse_ReadenMoldsResult::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__ReadenMoldsResponse_ReadenMoldsResult(soap, tag ? tag : "ns1:ReadenMoldsResponse-ReadenMoldsResult", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__ReadenMoldsResponse_ReadenMoldsResult::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__ReadenMoldsResponse_ReadenMoldsResult(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__ReadenMoldsResponse_ReadenMoldsResult * SOAP_FMAC4 soap_get__ns1__ReadenMoldsResponse_ReadenMoldsResult(struct soap *soap, _ns1__ReadenMoldsResponse_ReadenMoldsResult *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__ReadenMoldsResponse_ReadenMoldsResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__CumulCountsResponse_CumulCountsResult::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->_ns1__CumulCountsResponse_CumulCountsResult::__any = NULL;
	this->_ns1__CumulCountsResponse_CumulCountsResult::__mixed = NULL;
}

void _ns1__CumulCountsResponse_CumulCountsResult::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int _ns1__CumulCountsResponse_CumulCountsResult::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__CumulCountsResponse_CumulCountsResult(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CumulCountsResponse_CumulCountsResult(struct soap *soap, const char *tag, int id, const _ns1__CumulCountsResponse_CumulCountsResult *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__CumulCountsResponse_CumulCountsResult), type))
		return soap->error;
	if (soap_outliteral(soap, "-any", (char*const*)&a->_ns1__CumulCountsResponse_CumulCountsResult::__any, NULL))
		return soap->error;
	if (soap_outliteral(soap, "-mixed", (char*const*)&a->_ns1__CumulCountsResponse_CumulCountsResult::__mixed, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__CumulCountsResponse_CumulCountsResult::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__CumulCountsResponse_CumulCountsResult(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__CumulCountsResponse_CumulCountsResult * SOAP_FMAC4 soap_in__ns1__CumulCountsResponse_CumulCountsResult(struct soap *soap, const char *tag, _ns1__CumulCountsResponse_CumulCountsResult *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__CumulCountsResponse_CumulCountsResult*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__CumulCountsResponse_CumulCountsResult, sizeof(_ns1__CumulCountsResponse_CumulCountsResult), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__CumulCountsResponse_CumulCountsResult)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__CumulCountsResponse_CumulCountsResult *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___any1 = 1;
	size_t soap_flag___mixed1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag___any1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-any", (char**)&a->_ns1__CumulCountsResponse_CumulCountsResult::__any))
				{	soap_flag___any1--;
					continue;
				}
			}
			if (soap_flag___mixed1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-mixed", (char**)&a->_ns1__CumulCountsResponse_CumulCountsResult::__mixed))
				{	soap_flag___mixed1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__CumulCountsResponse_CumulCountsResult *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__CumulCountsResponse_CumulCountsResult, SOAP_TYPE__ns1__CumulCountsResponse_CumulCountsResult, sizeof(_ns1__CumulCountsResponse_CumulCountsResult), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__CumulCountsResponse_CumulCountsResult * SOAP_FMAC2 soap_instantiate__ns1__CumulCountsResponse_CumulCountsResult(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__CumulCountsResponse_CumulCountsResult(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__CumulCountsResponse_CumulCountsResult *p;
	size_t k = sizeof(_ns1__CumulCountsResponse_CumulCountsResult);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__CumulCountsResponse_CumulCountsResult, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__CumulCountsResponse_CumulCountsResult);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__CumulCountsResponse_CumulCountsResult, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__CumulCountsResponse_CumulCountsResult location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__CumulCountsResponse_CumulCountsResult::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__CumulCountsResponse_CumulCountsResult(soap, tag ? tag : "ns1:CumulCountsResponse-CumulCountsResult", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__CumulCountsResponse_CumulCountsResult::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__CumulCountsResponse_CumulCountsResult(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__CumulCountsResponse_CumulCountsResult * SOAP_FMAC4 soap_get__ns1__CumulCountsResponse_CumulCountsResult(struct soap *soap, _ns1__CumulCountsResponse_CumulCountsResult *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__CumulCountsResponse_CumulCountsResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__MeasuresResponse_MeasuresResult::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->_ns1__MeasuresResponse_MeasuresResult::__any = NULL;
	this->_ns1__MeasuresResponse_MeasuresResult::__mixed = NULL;
}

void _ns1__MeasuresResponse_MeasuresResult::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int _ns1__MeasuresResponse_MeasuresResult::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__MeasuresResponse_MeasuresResult(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__MeasuresResponse_MeasuresResult(struct soap *soap, const char *tag, int id, const _ns1__MeasuresResponse_MeasuresResult *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__MeasuresResponse_MeasuresResult), type))
		return soap->error;
	if (soap_outliteral(soap, "-any", (char*const*)&a->_ns1__MeasuresResponse_MeasuresResult::__any, NULL))
		return soap->error;
	if (soap_outliteral(soap, "-mixed", (char*const*)&a->_ns1__MeasuresResponse_MeasuresResult::__mixed, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__MeasuresResponse_MeasuresResult::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__MeasuresResponse_MeasuresResult(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__MeasuresResponse_MeasuresResult * SOAP_FMAC4 soap_in__ns1__MeasuresResponse_MeasuresResult(struct soap *soap, const char *tag, _ns1__MeasuresResponse_MeasuresResult *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__MeasuresResponse_MeasuresResult*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__MeasuresResponse_MeasuresResult, sizeof(_ns1__MeasuresResponse_MeasuresResult), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__MeasuresResponse_MeasuresResult)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__MeasuresResponse_MeasuresResult *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___any1 = 1;
	size_t soap_flag___mixed1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag___any1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-any", (char**)&a->_ns1__MeasuresResponse_MeasuresResult::__any))
				{	soap_flag___any1--;
					continue;
				}
			}
			if (soap_flag___mixed1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-mixed", (char**)&a->_ns1__MeasuresResponse_MeasuresResult::__mixed))
				{	soap_flag___mixed1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__MeasuresResponse_MeasuresResult *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__MeasuresResponse_MeasuresResult, SOAP_TYPE__ns1__MeasuresResponse_MeasuresResult, sizeof(_ns1__MeasuresResponse_MeasuresResult), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__MeasuresResponse_MeasuresResult * SOAP_FMAC2 soap_instantiate__ns1__MeasuresResponse_MeasuresResult(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__MeasuresResponse_MeasuresResult(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__MeasuresResponse_MeasuresResult *p;
	size_t k = sizeof(_ns1__MeasuresResponse_MeasuresResult);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__MeasuresResponse_MeasuresResult, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__MeasuresResponse_MeasuresResult);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__MeasuresResponse_MeasuresResult, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__MeasuresResponse_MeasuresResult location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__MeasuresResponse_MeasuresResult::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__MeasuresResponse_MeasuresResult(soap, tag ? tag : "ns1:MeasuresResponse-MeasuresResult", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__MeasuresResponse_MeasuresResult::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__MeasuresResponse_MeasuresResult(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__MeasuresResponse_MeasuresResult * SOAP_FMAC4 soap_get__ns1__MeasuresResponse_MeasuresResult(struct soap *soap, _ns1__MeasuresResponse_MeasuresResult *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__MeasuresResponse_MeasuresResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__MountedMoldsResponse_MountedMoldsResult::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->_ns1__MountedMoldsResponse_MountedMoldsResult::__any = NULL;
	this->_ns1__MountedMoldsResponse_MountedMoldsResult::__mixed = NULL;
}

void _ns1__MountedMoldsResponse_MountedMoldsResult::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int _ns1__MountedMoldsResponse_MountedMoldsResult::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__MountedMoldsResponse_MountedMoldsResult(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__MountedMoldsResponse_MountedMoldsResult(struct soap *soap, const char *tag, int id, const _ns1__MountedMoldsResponse_MountedMoldsResult *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__MountedMoldsResponse_MountedMoldsResult), type))
		return soap->error;
	if (soap_outliteral(soap, "-any", (char*const*)&a->_ns1__MountedMoldsResponse_MountedMoldsResult::__any, NULL))
		return soap->error;
	if (soap_outliteral(soap, "-mixed", (char*const*)&a->_ns1__MountedMoldsResponse_MountedMoldsResult::__mixed, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__MountedMoldsResponse_MountedMoldsResult::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__MountedMoldsResponse_MountedMoldsResult(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__MountedMoldsResponse_MountedMoldsResult * SOAP_FMAC4 soap_in__ns1__MountedMoldsResponse_MountedMoldsResult(struct soap *soap, const char *tag, _ns1__MountedMoldsResponse_MountedMoldsResult *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__MountedMoldsResponse_MountedMoldsResult*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__MountedMoldsResponse_MountedMoldsResult, sizeof(_ns1__MountedMoldsResponse_MountedMoldsResult), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__MountedMoldsResponse_MountedMoldsResult)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__MountedMoldsResponse_MountedMoldsResult *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___any1 = 1;
	size_t soap_flag___mixed1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag___any1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-any", (char**)&a->_ns1__MountedMoldsResponse_MountedMoldsResult::__any))
				{	soap_flag___any1--;
					continue;
				}
			}
			if (soap_flag___mixed1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-mixed", (char**)&a->_ns1__MountedMoldsResponse_MountedMoldsResult::__mixed))
				{	soap_flag___mixed1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__MountedMoldsResponse_MountedMoldsResult *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__MountedMoldsResponse_MountedMoldsResult, SOAP_TYPE__ns1__MountedMoldsResponse_MountedMoldsResult, sizeof(_ns1__MountedMoldsResponse_MountedMoldsResult), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__MountedMoldsResponse_MountedMoldsResult * SOAP_FMAC2 soap_instantiate__ns1__MountedMoldsResponse_MountedMoldsResult(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__MountedMoldsResponse_MountedMoldsResult(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__MountedMoldsResponse_MountedMoldsResult *p;
	size_t k = sizeof(_ns1__MountedMoldsResponse_MountedMoldsResult);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__MountedMoldsResponse_MountedMoldsResult, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__MountedMoldsResponse_MountedMoldsResult);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__MountedMoldsResponse_MountedMoldsResult, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__MountedMoldsResponse_MountedMoldsResult location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__MountedMoldsResponse_MountedMoldsResult::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__MountedMoldsResponse_MountedMoldsResult(soap, tag ? tag : "ns1:MountedMoldsResponse-MountedMoldsResult", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__MountedMoldsResponse_MountedMoldsResult::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__MountedMoldsResponse_MountedMoldsResult(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__MountedMoldsResponse_MountedMoldsResult * SOAP_FMAC4 soap_get__ns1__MountedMoldsResponse_MountedMoldsResult(struct soap *soap, _ns1__MountedMoldsResponse_MountedMoldsResult *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__MountedMoldsResponse_MountedMoldsResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__GetAlarmsResponse_GetAlarmsResult::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->_ns1__GetAlarmsResponse_GetAlarmsResult::__any = NULL;
	this->_ns1__GetAlarmsResponse_GetAlarmsResult::__mixed = NULL;
}

void _ns1__GetAlarmsResponse_GetAlarmsResult::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int _ns1__GetAlarmsResponse_GetAlarmsResult::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetAlarmsResponse_GetAlarmsResult(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAlarmsResponse_GetAlarmsResult(struct soap *soap, const char *tag, int id, const _ns1__GetAlarmsResponse_GetAlarmsResult *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetAlarmsResponse_GetAlarmsResult), type))
		return soap->error;
	if (soap_outliteral(soap, "-any", (char*const*)&a->_ns1__GetAlarmsResponse_GetAlarmsResult::__any, NULL))
		return soap->error;
	if (soap_outliteral(soap, "-mixed", (char*const*)&a->_ns1__GetAlarmsResponse_GetAlarmsResult::__mixed, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetAlarmsResponse_GetAlarmsResult::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__GetAlarmsResponse_GetAlarmsResult(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetAlarmsResponse_GetAlarmsResult * SOAP_FMAC4 soap_in__ns1__GetAlarmsResponse_GetAlarmsResult(struct soap *soap, const char *tag, _ns1__GetAlarmsResponse_GetAlarmsResult *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetAlarmsResponse_GetAlarmsResult*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetAlarmsResponse_GetAlarmsResult, sizeof(_ns1__GetAlarmsResponse_GetAlarmsResult), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__GetAlarmsResponse_GetAlarmsResult)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__GetAlarmsResponse_GetAlarmsResult *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___any1 = 1;
	size_t soap_flag___mixed1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag___any1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-any", (char**)&a->_ns1__GetAlarmsResponse_GetAlarmsResult::__any))
				{	soap_flag___any1--;
					continue;
				}
			}
			if (soap_flag___mixed1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-mixed", (char**)&a->_ns1__GetAlarmsResponse_GetAlarmsResult::__mixed))
				{	soap_flag___mixed1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetAlarmsResponse_GetAlarmsResult *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetAlarmsResponse_GetAlarmsResult, SOAP_TYPE__ns1__GetAlarmsResponse_GetAlarmsResult, sizeof(_ns1__GetAlarmsResponse_GetAlarmsResult), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__GetAlarmsResponse_GetAlarmsResult * SOAP_FMAC2 soap_instantiate__ns1__GetAlarmsResponse_GetAlarmsResult(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetAlarmsResponse_GetAlarmsResult(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__GetAlarmsResponse_GetAlarmsResult *p;
	size_t k = sizeof(_ns1__GetAlarmsResponse_GetAlarmsResult);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__GetAlarmsResponse_GetAlarmsResult, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__GetAlarmsResponse_GetAlarmsResult);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__GetAlarmsResponse_GetAlarmsResult, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__GetAlarmsResponse_GetAlarmsResult location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__GetAlarmsResponse_GetAlarmsResult::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__GetAlarmsResponse_GetAlarmsResult(soap, tag ? tag : "ns1:GetAlarmsResponse-GetAlarmsResult", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetAlarmsResponse_GetAlarmsResult::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetAlarmsResponse_GetAlarmsResult(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetAlarmsResponse_GetAlarmsResult * SOAP_FMAC4 soap_get__ns1__GetAlarmsResponse_GetAlarmsResult(struct soap *soap, _ns1__GetAlarmsResponse_GetAlarmsResult *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetAlarmsResponse_GetAlarmsResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->_ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult::__any = NULL;
	this->_ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult::__mixed = NULL;
}

void _ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int _ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult(struct soap *soap, const char *tag, int id, const _ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult), type))
		return soap->error;
	if (soap_outliteral(soap, "-any", (char*const*)&a->_ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult::__any, NULL))
		return soap->error;
	if (soap_outliteral(soap, "-mixed", (char*const*)&a->_ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult::__mixed, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult * SOAP_FMAC4 soap_in__ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult(struct soap *soap, const char *tag, _ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult, sizeof(_ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___any1 = 1;
	size_t soap_flag___mixed1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag___any1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-any", (char**)&a->_ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult::__any))
				{	soap_flag___any1--;
					continue;
				}
			}
			if (soap_flag___mixed1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-mixed", (char**)&a->_ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult::__mixed))
				{	soap_flag___mixed1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult, SOAP_TYPE__ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult, sizeof(_ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult * SOAP_FMAC2 soap_instantiate__ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult *p;
	size_t k = sizeof(_ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult(soap, tag ? tag : "ns1:GetAlarmsSinceLastQueryResponse-GetAlarmsSinceLastQueryResult", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult * SOAP_FMAC4 soap_get__ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult(struct soap *soap, _ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__CountsResponse_CountsResult::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->_ns1__CountsResponse_CountsResult::__any = NULL;
	this->_ns1__CountsResponse_CountsResult::__mixed = NULL;
}

void _ns1__CountsResponse_CountsResult::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int _ns1__CountsResponse_CountsResult::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__CountsResponse_CountsResult(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CountsResponse_CountsResult(struct soap *soap, const char *tag, int id, const _ns1__CountsResponse_CountsResult *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__CountsResponse_CountsResult), type))
		return soap->error;
	if (soap_outliteral(soap, "-any", (char*const*)&a->_ns1__CountsResponse_CountsResult::__any, NULL))
		return soap->error;
	if (soap_outliteral(soap, "-mixed", (char*const*)&a->_ns1__CountsResponse_CountsResult::__mixed, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__CountsResponse_CountsResult::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__CountsResponse_CountsResult(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__CountsResponse_CountsResult * SOAP_FMAC4 soap_in__ns1__CountsResponse_CountsResult(struct soap *soap, const char *tag, _ns1__CountsResponse_CountsResult *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__CountsResponse_CountsResult*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__CountsResponse_CountsResult, sizeof(_ns1__CountsResponse_CountsResult), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__CountsResponse_CountsResult)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__CountsResponse_CountsResult *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___any1 = 1;
	size_t soap_flag___mixed1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag___any1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-any", (char**)&a->_ns1__CountsResponse_CountsResult::__any))
				{	soap_flag___any1--;
					continue;
				}
			}
			if (soap_flag___mixed1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-mixed", (char**)&a->_ns1__CountsResponse_CountsResult::__mixed))
				{	soap_flag___mixed1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__CountsResponse_CountsResult *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__CountsResponse_CountsResult, SOAP_TYPE__ns1__CountsResponse_CountsResult, sizeof(_ns1__CountsResponse_CountsResult), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__CountsResponse_CountsResult * SOAP_FMAC2 soap_instantiate__ns1__CountsResponse_CountsResult(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__CountsResponse_CountsResult(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__CountsResponse_CountsResult *p;
	size_t k = sizeof(_ns1__CountsResponse_CountsResult);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__CountsResponse_CountsResult, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__CountsResponse_CountsResult);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__CountsResponse_CountsResult, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__CountsResponse_CountsResult location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__CountsResponse_CountsResult::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__CountsResponse_CountsResult(soap, tag ? tag : "ns1:CountsResponse-CountsResult", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__CountsResponse_CountsResult::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__CountsResponse_CountsResult(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__CountsResponse_CountsResult * SOAP_FMAC4 soap_get__ns1__CountsResponse_CountsResult(struct soap *soap, _ns1__CountsResponse_CountsResult *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__CountsResponse_CountsResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__ChangeSamplesResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__ChangeSamplesResponse::ChangeSamplesResult = NULL;
}

void _ns1__ChangeSamplesResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__ChangeSamplesResponse_ChangeSamplesResult(soap, &this->_ns1__ChangeSamplesResponse::ChangeSamplesResult);
#endif
}

int _ns1__ChangeSamplesResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__ChangeSamplesResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ChangeSamplesResponse(struct soap *soap, const char *tag, int id, const _ns1__ChangeSamplesResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__ChangeSamplesResponse), type))
		return soap->error;
	if (a->ChangeSamplesResult)
		soap_element_result(soap, "ns1:ChangeSamplesResult");
	if (soap_out_PointerTo_ns1__ChangeSamplesResponse_ChangeSamplesResult(soap, "ns1:ChangeSamplesResult", -1, &a->_ns1__ChangeSamplesResponse::ChangeSamplesResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__ChangeSamplesResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__ChangeSamplesResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__ChangeSamplesResponse * SOAP_FMAC4 soap_in__ns1__ChangeSamplesResponse(struct soap *soap, const char *tag, _ns1__ChangeSamplesResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__ChangeSamplesResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__ChangeSamplesResponse, sizeof(_ns1__ChangeSamplesResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__ChangeSamplesResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__ChangeSamplesResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_ChangeSamplesResult1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ChangeSamplesResult1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__ChangeSamplesResponse_ChangeSamplesResult(soap, "ns1:ChangeSamplesResult", &a->_ns1__ChangeSamplesResponse::ChangeSamplesResult, ""))
				{	soap_flag_ChangeSamplesResult1--;
					continue;
				}
			}
			soap_check_result(soap, "ns1:ChangeSamplesResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__ChangeSamplesResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__ChangeSamplesResponse, SOAP_TYPE__ns1__ChangeSamplesResponse, sizeof(_ns1__ChangeSamplesResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__ChangeSamplesResponse * SOAP_FMAC2 soap_instantiate__ns1__ChangeSamplesResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__ChangeSamplesResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__ChangeSamplesResponse *p;
	size_t k = sizeof(_ns1__ChangeSamplesResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__ChangeSamplesResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__ChangeSamplesResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__ChangeSamplesResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__ChangeSamplesResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__ChangeSamplesResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__ChangeSamplesResponse(soap, tag ? tag : "ns1:ChangeSamplesResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__ChangeSamplesResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__ChangeSamplesResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__ChangeSamplesResponse * SOAP_FMAC4 soap_get__ns1__ChangeSamplesResponse(struct soap *soap, _ns1__ChangeSamplesResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__ChangeSamplesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__ChangeSamples::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__ChangeSamples::ChangeMoldsInSampleTable = NULL;
}

void _ns1__ChangeSamples::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__MoulesPrelevesXml(soap, &this->_ns1__ChangeSamples::ChangeMoldsInSampleTable);
#endif
}

int _ns1__ChangeSamples::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__ChangeSamples(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ChangeSamples(struct soap *soap, const char *tag, int id, const _ns1__ChangeSamples *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__ChangeSamples), type))
		return soap->error;
	if (!a->_ns1__ChangeSamples::ChangeMoldsInSampleTable)
	{	if (soap_element_nil(soap, "ns1:ChangeMoldsInSampleTable"))
			return soap->error;
	}
	else if (soap_out_PointerTons1__MoulesPrelevesXml(soap, "ns1:ChangeMoldsInSampleTable", -1, &a->_ns1__ChangeSamples::ChangeMoldsInSampleTable, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__ChangeSamples::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__ChangeSamples(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__ChangeSamples * SOAP_FMAC4 soap_in__ns1__ChangeSamples(struct soap *soap, const char *tag, _ns1__ChangeSamples *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__ChangeSamples*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__ChangeSamples, sizeof(_ns1__ChangeSamples), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__ChangeSamples)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__ChangeSamples *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_ChangeMoldsInSampleTable1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ChangeMoldsInSampleTable1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__MoulesPrelevesXml(soap, "ns1:ChangeMoldsInSampleTable", &a->_ns1__ChangeSamples::ChangeMoldsInSampleTable, "ns1:MoulesPrelevesXml"))
				{	soap_flag_ChangeMoldsInSampleTable1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ChangeMoldsInSampleTable1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns1__ChangeSamples *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__ChangeSamples, SOAP_TYPE__ns1__ChangeSamples, sizeof(_ns1__ChangeSamples), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__ChangeSamples * SOAP_FMAC2 soap_instantiate__ns1__ChangeSamples(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__ChangeSamples(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__ChangeSamples *p;
	size_t k = sizeof(_ns1__ChangeSamples);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__ChangeSamples, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__ChangeSamples);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__ChangeSamples, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__ChangeSamples location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__ChangeSamples::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__ChangeSamples(soap, tag ? tag : "ns1:ChangeSamples", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__ChangeSamples::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__ChangeSamples(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__ChangeSamples * SOAP_FMAC4 soap_get__ns1__ChangeSamples(struct soap *soap, _ns1__ChangeSamples *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__ChangeSamples(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__GetVersionsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetVersionsResponse::GetVersionsResult = NULL;
}

void _ns1__GetVersionsResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetVersionsResponse_GetVersionsResult(soap, &this->_ns1__GetVersionsResponse::GetVersionsResult);
#endif
}

int _ns1__GetVersionsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetVersionsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetVersionsResponse(struct soap *soap, const char *tag, int id, const _ns1__GetVersionsResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetVersionsResponse), type))
		return soap->error;
	if (a->GetVersionsResult)
		soap_element_result(soap, "ns1:GetVersionsResult");
	if (soap_out_PointerTo_ns1__GetVersionsResponse_GetVersionsResult(soap, "ns1:GetVersionsResult", -1, &a->_ns1__GetVersionsResponse::GetVersionsResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetVersionsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__GetVersionsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetVersionsResponse * SOAP_FMAC4 soap_in__ns1__GetVersionsResponse(struct soap *soap, const char *tag, _ns1__GetVersionsResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetVersionsResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetVersionsResponse, sizeof(_ns1__GetVersionsResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__GetVersionsResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__GetVersionsResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_GetVersionsResult1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetVersionsResult1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__GetVersionsResponse_GetVersionsResult(soap, "ns1:GetVersionsResult", &a->_ns1__GetVersionsResponse::GetVersionsResult, ""))
				{	soap_flag_GetVersionsResult1--;
					continue;
				}
			}
			soap_check_result(soap, "ns1:GetVersionsResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetVersionsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetVersionsResponse, SOAP_TYPE__ns1__GetVersionsResponse, sizeof(_ns1__GetVersionsResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__GetVersionsResponse * SOAP_FMAC2 soap_instantiate__ns1__GetVersionsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetVersionsResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__GetVersionsResponse *p;
	size_t k = sizeof(_ns1__GetVersionsResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__GetVersionsResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__GetVersionsResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__GetVersionsResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__GetVersionsResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__GetVersionsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__GetVersionsResponse(soap, tag ? tag : "ns1:GetVersionsResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetVersionsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetVersionsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetVersionsResponse * SOAP_FMAC4 soap_get__ns1__GetVersionsResponse(struct soap *soap, _ns1__GetVersionsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetVersionsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__GetVersions::soap_default(struct soap *soap)
{
	this->soap = soap;
}

void _ns1__GetVersions::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int _ns1__GetVersions::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetVersions(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetVersions(struct soap *soap, const char *tag, int id, const _ns1__GetVersions *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetVersions), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetVersions::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__GetVersions(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetVersions * SOAP_FMAC4 soap_in__ns1__GetVersions(struct soap *soap, const char *tag, _ns1__GetVersions *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetVersions*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetVersions, sizeof(_ns1__GetVersions), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__GetVersions)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__GetVersions *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetVersions *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetVersions, SOAP_TYPE__ns1__GetVersions, sizeof(_ns1__GetVersions), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__GetVersions * SOAP_FMAC2 soap_instantiate__ns1__GetVersions(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetVersions(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__GetVersions *p;
	size_t k = sizeof(_ns1__GetVersions);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__GetVersions, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__GetVersions);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__GetVersions, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__GetVersions location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__GetVersions::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__GetVersions(soap, tag ? tag : "ns1:GetVersions", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetVersions::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetVersions(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetVersions * SOAP_FMAC4 soap_get__ns1__GetVersions(struct soap *soap, _ns1__GetVersions *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetVersions(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__ChangeMoldsInSampleTableResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__ChangeMoldsInSampleTableResponse::ChangeMoldsInSampleTableResult = NULL;
}

void _ns1__ChangeMoldsInSampleTableResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult(soap, &this->_ns1__ChangeMoldsInSampleTableResponse::ChangeMoldsInSampleTableResult);
#endif
}

int _ns1__ChangeMoldsInSampleTableResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__ChangeMoldsInSampleTableResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ChangeMoldsInSampleTableResponse(struct soap *soap, const char *tag, int id, const _ns1__ChangeMoldsInSampleTableResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__ChangeMoldsInSampleTableResponse), type))
		return soap->error;
	if (a->ChangeMoldsInSampleTableResult)
		soap_element_result(soap, "ns1:ChangeMoldsInSampleTableResult");
	if (soap_out_PointerTo_ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult(soap, "ns1:ChangeMoldsInSampleTableResult", -1, &a->_ns1__ChangeMoldsInSampleTableResponse::ChangeMoldsInSampleTableResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__ChangeMoldsInSampleTableResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__ChangeMoldsInSampleTableResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__ChangeMoldsInSampleTableResponse * SOAP_FMAC4 soap_in__ns1__ChangeMoldsInSampleTableResponse(struct soap *soap, const char *tag, _ns1__ChangeMoldsInSampleTableResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__ChangeMoldsInSampleTableResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__ChangeMoldsInSampleTableResponse, sizeof(_ns1__ChangeMoldsInSampleTableResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__ChangeMoldsInSampleTableResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__ChangeMoldsInSampleTableResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_ChangeMoldsInSampleTableResult1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ChangeMoldsInSampleTableResult1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult(soap, "ns1:ChangeMoldsInSampleTableResult", &a->_ns1__ChangeMoldsInSampleTableResponse::ChangeMoldsInSampleTableResult, ""))
				{	soap_flag_ChangeMoldsInSampleTableResult1--;
					continue;
				}
			}
			soap_check_result(soap, "ns1:ChangeMoldsInSampleTableResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__ChangeMoldsInSampleTableResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__ChangeMoldsInSampleTableResponse, SOAP_TYPE__ns1__ChangeMoldsInSampleTableResponse, sizeof(_ns1__ChangeMoldsInSampleTableResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__ChangeMoldsInSampleTableResponse * SOAP_FMAC2 soap_instantiate__ns1__ChangeMoldsInSampleTableResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__ChangeMoldsInSampleTableResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__ChangeMoldsInSampleTableResponse *p;
	size_t k = sizeof(_ns1__ChangeMoldsInSampleTableResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__ChangeMoldsInSampleTableResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__ChangeMoldsInSampleTableResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__ChangeMoldsInSampleTableResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__ChangeMoldsInSampleTableResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__ChangeMoldsInSampleTableResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__ChangeMoldsInSampleTableResponse(soap, tag ? tag : "ns1:ChangeMoldsInSampleTableResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__ChangeMoldsInSampleTableResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__ChangeMoldsInSampleTableResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__ChangeMoldsInSampleTableResponse * SOAP_FMAC4 soap_get__ns1__ChangeMoldsInSampleTableResponse(struct soap *soap, _ns1__ChangeMoldsInSampleTableResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__ChangeMoldsInSampleTableResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__ChangeMoldsInSampleTable::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__ChangeMoldsInSampleTable::ChangeMoldsInSampleTable = NULL;
}

void _ns1__ChangeMoldsInSampleTable::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9(soap, &this->_ns1__ChangeMoldsInSampleTable::ChangeMoldsInSampleTable);
#endif
}

int _ns1__ChangeMoldsInSampleTable::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__ChangeMoldsInSampleTable(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ChangeMoldsInSampleTable(struct soap *soap, const char *tag, int id, const _ns1__ChangeMoldsInSampleTable *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__ChangeMoldsInSampleTable), type))
		return soap->error;
	if (!a->_ns1__ChangeMoldsInSampleTable::ChangeMoldsInSampleTable)
	{	if (soap_element_nil(soap, "ns1:ChangeMoldsInSampleTable"))
			return soap->error;
	}
	else if (soap_out_PointerTons1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9(soap, "ns1:ChangeMoldsInSampleTable", -1, &a->_ns1__ChangeMoldsInSampleTable::ChangeMoldsInSampleTable, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__ChangeMoldsInSampleTable::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__ChangeMoldsInSampleTable(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__ChangeMoldsInSampleTable * SOAP_FMAC4 soap_in__ns1__ChangeMoldsInSampleTable(struct soap *soap, const char *tag, _ns1__ChangeMoldsInSampleTable *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__ChangeMoldsInSampleTable*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__ChangeMoldsInSampleTable, sizeof(_ns1__ChangeMoldsInSampleTable), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__ChangeMoldsInSampleTable)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__ChangeMoldsInSampleTable *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_ChangeMoldsInSampleTable1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ChangeMoldsInSampleTable1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9(soap, "ns1:ChangeMoldsInSampleTable", &a->_ns1__ChangeMoldsInSampleTable::ChangeMoldsInSampleTable, "ns1:MoulesPrelevesXmlPourWS1_0_9"))
				{	soap_flag_ChangeMoldsInSampleTable1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ChangeMoldsInSampleTable1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns1__ChangeMoldsInSampleTable *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__ChangeMoldsInSampleTable, SOAP_TYPE__ns1__ChangeMoldsInSampleTable, sizeof(_ns1__ChangeMoldsInSampleTable), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__ChangeMoldsInSampleTable * SOAP_FMAC2 soap_instantiate__ns1__ChangeMoldsInSampleTable(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__ChangeMoldsInSampleTable(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__ChangeMoldsInSampleTable *p;
	size_t k = sizeof(_ns1__ChangeMoldsInSampleTable);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__ChangeMoldsInSampleTable, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__ChangeMoldsInSampleTable);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__ChangeMoldsInSampleTable, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__ChangeMoldsInSampleTable location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__ChangeMoldsInSampleTable::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__ChangeMoldsInSampleTable(soap, tag ? tag : "ns1:ChangeMoldsInSampleTable", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__ChangeMoldsInSampleTable::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__ChangeMoldsInSampleTable(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__ChangeMoldsInSampleTable * SOAP_FMAC4 soap_get__ns1__ChangeMoldsInSampleTable(struct soap *soap, _ns1__ChangeMoldsInSampleTable *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__ChangeMoldsInSampleTable(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__EraseMoldsInSampleTableResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__EraseMoldsInSampleTableResponse::EraseMoldsInSampleTableResult = NULL;
}

void _ns1__EraseMoldsInSampleTableResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult(soap, &this->_ns1__EraseMoldsInSampleTableResponse::EraseMoldsInSampleTableResult);
#endif
}

int _ns1__EraseMoldsInSampleTableResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__EraseMoldsInSampleTableResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__EraseMoldsInSampleTableResponse(struct soap *soap, const char *tag, int id, const _ns1__EraseMoldsInSampleTableResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__EraseMoldsInSampleTableResponse), type))
		return soap->error;
	if (a->EraseMoldsInSampleTableResult)
		soap_element_result(soap, "ns1:EraseMoldsInSampleTableResult");
	if (soap_out_PointerTo_ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult(soap, "ns1:EraseMoldsInSampleTableResult", -1, &a->_ns1__EraseMoldsInSampleTableResponse::EraseMoldsInSampleTableResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__EraseMoldsInSampleTableResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__EraseMoldsInSampleTableResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__EraseMoldsInSampleTableResponse * SOAP_FMAC4 soap_in__ns1__EraseMoldsInSampleTableResponse(struct soap *soap, const char *tag, _ns1__EraseMoldsInSampleTableResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__EraseMoldsInSampleTableResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__EraseMoldsInSampleTableResponse, sizeof(_ns1__EraseMoldsInSampleTableResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__EraseMoldsInSampleTableResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__EraseMoldsInSampleTableResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_EraseMoldsInSampleTableResult1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_EraseMoldsInSampleTableResult1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult(soap, "ns1:EraseMoldsInSampleTableResult", &a->_ns1__EraseMoldsInSampleTableResponse::EraseMoldsInSampleTableResult, ""))
				{	soap_flag_EraseMoldsInSampleTableResult1--;
					continue;
				}
			}
			soap_check_result(soap, "ns1:EraseMoldsInSampleTableResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__EraseMoldsInSampleTableResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__EraseMoldsInSampleTableResponse, SOAP_TYPE__ns1__EraseMoldsInSampleTableResponse, sizeof(_ns1__EraseMoldsInSampleTableResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__EraseMoldsInSampleTableResponse * SOAP_FMAC2 soap_instantiate__ns1__EraseMoldsInSampleTableResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__EraseMoldsInSampleTableResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__EraseMoldsInSampleTableResponse *p;
	size_t k = sizeof(_ns1__EraseMoldsInSampleTableResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__EraseMoldsInSampleTableResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__EraseMoldsInSampleTableResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__EraseMoldsInSampleTableResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__EraseMoldsInSampleTableResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__EraseMoldsInSampleTableResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__EraseMoldsInSampleTableResponse(soap, tag ? tag : "ns1:EraseMoldsInSampleTableResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__EraseMoldsInSampleTableResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__EraseMoldsInSampleTableResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__EraseMoldsInSampleTableResponse * SOAP_FMAC4 soap_get__ns1__EraseMoldsInSampleTableResponse(struct soap *soap, _ns1__EraseMoldsInSampleTableResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__EraseMoldsInSampleTableResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__EraseMoldsInSampleTable::soap_default(struct soap *soap)
{
	this->soap = soap;
}

void _ns1__EraseMoldsInSampleTable::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int _ns1__EraseMoldsInSampleTable::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__EraseMoldsInSampleTable(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__EraseMoldsInSampleTable(struct soap *soap, const char *tag, int id, const _ns1__EraseMoldsInSampleTable *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__EraseMoldsInSampleTable), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__EraseMoldsInSampleTable::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__EraseMoldsInSampleTable(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__EraseMoldsInSampleTable * SOAP_FMAC4 soap_in__ns1__EraseMoldsInSampleTable(struct soap *soap, const char *tag, _ns1__EraseMoldsInSampleTable *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__EraseMoldsInSampleTable*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__EraseMoldsInSampleTable, sizeof(_ns1__EraseMoldsInSampleTable), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__EraseMoldsInSampleTable)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__EraseMoldsInSampleTable *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__EraseMoldsInSampleTable *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__EraseMoldsInSampleTable, SOAP_TYPE__ns1__EraseMoldsInSampleTable, sizeof(_ns1__EraseMoldsInSampleTable), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__EraseMoldsInSampleTable * SOAP_FMAC2 soap_instantiate__ns1__EraseMoldsInSampleTable(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__EraseMoldsInSampleTable(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__EraseMoldsInSampleTable *p;
	size_t k = sizeof(_ns1__EraseMoldsInSampleTable);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__EraseMoldsInSampleTable, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__EraseMoldsInSampleTable);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__EraseMoldsInSampleTable, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__EraseMoldsInSampleTable location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__EraseMoldsInSampleTable::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__EraseMoldsInSampleTable(soap, tag ? tag : "ns1:EraseMoldsInSampleTable", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__EraseMoldsInSampleTable::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__EraseMoldsInSampleTable(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__EraseMoldsInSampleTable * SOAP_FMAC4 soap_get__ns1__EraseMoldsInSampleTable(struct soap *soap, _ns1__EraseMoldsInSampleTable *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__EraseMoldsInSampleTable(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__AddEjectedMoldsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_ns1__AddEjectedMoldsResponse::AddEjectedMoldsResult);
}

void _ns1__AddEjectedMoldsResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&this->_ns1__AddEjectedMoldsResponse::AddEjectedMoldsResult);
#endif
}

int _ns1__AddEjectedMoldsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AddEjectedMoldsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AddEjectedMoldsResponse(struct soap *soap, const char *tag, int id, const _ns1__AddEjectedMoldsResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AddEjectedMoldsResponse), type))
		return soap->error;
	if (a->AddEjectedMoldsResult)
		soap_element_result(soap, "ns1:AddEjectedMoldsResult");
	if (soap_out_string(soap, "ns1:AddEjectedMoldsResult", -1, (char*const*)&a->_ns1__AddEjectedMoldsResponse::AddEjectedMoldsResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__AddEjectedMoldsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__AddEjectedMoldsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AddEjectedMoldsResponse * SOAP_FMAC4 soap_in__ns1__AddEjectedMoldsResponse(struct soap *soap, const char *tag, _ns1__AddEjectedMoldsResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AddEjectedMoldsResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AddEjectedMoldsResponse, sizeof(_ns1__AddEjectedMoldsResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__AddEjectedMoldsResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__AddEjectedMoldsResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_AddEjectedMoldsResult1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AddEjectedMoldsResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "ns1:AddEjectedMoldsResult", (char**)&a->_ns1__AddEjectedMoldsResponse::AddEjectedMoldsResult, "xsd:string"))
				{	soap_flag_AddEjectedMoldsResult1--;
					continue;
				}
			}
			soap_check_result(soap, "ns1:AddEjectedMoldsResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AddEjectedMoldsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AddEjectedMoldsResponse, SOAP_TYPE__ns1__AddEjectedMoldsResponse, sizeof(_ns1__AddEjectedMoldsResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__AddEjectedMoldsResponse * SOAP_FMAC2 soap_instantiate__ns1__AddEjectedMoldsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AddEjectedMoldsResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__AddEjectedMoldsResponse *p;
	size_t k = sizeof(_ns1__AddEjectedMoldsResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__AddEjectedMoldsResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__AddEjectedMoldsResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__AddEjectedMoldsResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__AddEjectedMoldsResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__AddEjectedMoldsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__AddEjectedMoldsResponse(soap, tag ? tag : "ns1:AddEjectedMoldsResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AddEjectedMoldsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AddEjectedMoldsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AddEjectedMoldsResponse * SOAP_FMAC4 soap_get__ns1__AddEjectedMoldsResponse(struct soap *soap, _ns1__AddEjectedMoldsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AddEjectedMoldsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__AddEjectedMolds::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__AddEjectedMolds::AddEjectedMolds = NULL;
}

void _ns1__AddEjectedMolds::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__MoulesEjectesXml(soap, &this->_ns1__AddEjectedMolds::AddEjectedMolds);
#endif
}

int _ns1__AddEjectedMolds::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AddEjectedMolds(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AddEjectedMolds(struct soap *soap, const char *tag, int id, const _ns1__AddEjectedMolds *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AddEjectedMolds), type))
		return soap->error;
	if (!a->_ns1__AddEjectedMolds::AddEjectedMolds)
	{	if (soap_element_nil(soap, "ns1:AddEjectedMolds"))
			return soap->error;
	}
	else if (soap_out_PointerTons1__MoulesEjectesXml(soap, "ns1:AddEjectedMolds", -1, &a->_ns1__AddEjectedMolds::AddEjectedMolds, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__AddEjectedMolds::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__AddEjectedMolds(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AddEjectedMolds * SOAP_FMAC4 soap_in__ns1__AddEjectedMolds(struct soap *soap, const char *tag, _ns1__AddEjectedMolds *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AddEjectedMolds*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AddEjectedMolds, sizeof(_ns1__AddEjectedMolds), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__AddEjectedMolds)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__AddEjectedMolds *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_AddEjectedMolds1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AddEjectedMolds1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__MoulesEjectesXml(soap, "ns1:AddEjectedMolds", &a->_ns1__AddEjectedMolds::AddEjectedMolds, "ns1:MoulesEjectesXml"))
				{	soap_flag_AddEjectedMolds1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_AddEjectedMolds1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns1__AddEjectedMolds *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AddEjectedMolds, SOAP_TYPE__ns1__AddEjectedMolds, sizeof(_ns1__AddEjectedMolds), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__AddEjectedMolds * SOAP_FMAC2 soap_instantiate__ns1__AddEjectedMolds(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AddEjectedMolds(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__AddEjectedMolds *p;
	size_t k = sizeof(_ns1__AddEjectedMolds);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__AddEjectedMolds, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__AddEjectedMolds);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__AddEjectedMolds, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__AddEjectedMolds location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__AddEjectedMolds::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__AddEjectedMolds(soap, tag ? tag : "ns1:AddEjectedMolds", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AddEjectedMolds::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AddEjectedMolds(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AddEjectedMolds * SOAP_FMAC4 soap_get__ns1__AddEjectedMolds(struct soap *soap, _ns1__AddEjectedMolds *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AddEjectedMolds(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__ChangeMountedMoldsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__ChangeMountedMoldsResponse::ChangeMountedMoldsResult = NULL;
}

void _ns1__ChangeMountedMoldsResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult(soap, &this->_ns1__ChangeMountedMoldsResponse::ChangeMountedMoldsResult);
#endif
}

int _ns1__ChangeMountedMoldsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__ChangeMountedMoldsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ChangeMountedMoldsResponse(struct soap *soap, const char *tag, int id, const _ns1__ChangeMountedMoldsResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__ChangeMountedMoldsResponse), type))
		return soap->error;
	if (a->ChangeMountedMoldsResult)
		soap_element_result(soap, "ns1:ChangeMountedMoldsResult");
	if (soap_out_PointerTo_ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult(soap, "ns1:ChangeMountedMoldsResult", -1, &a->_ns1__ChangeMountedMoldsResponse::ChangeMountedMoldsResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__ChangeMountedMoldsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__ChangeMountedMoldsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__ChangeMountedMoldsResponse * SOAP_FMAC4 soap_in__ns1__ChangeMountedMoldsResponse(struct soap *soap, const char *tag, _ns1__ChangeMountedMoldsResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__ChangeMountedMoldsResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__ChangeMountedMoldsResponse, sizeof(_ns1__ChangeMountedMoldsResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__ChangeMountedMoldsResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__ChangeMountedMoldsResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_ChangeMountedMoldsResult1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ChangeMountedMoldsResult1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult(soap, "ns1:ChangeMountedMoldsResult", &a->_ns1__ChangeMountedMoldsResponse::ChangeMountedMoldsResult, ""))
				{	soap_flag_ChangeMountedMoldsResult1--;
					continue;
				}
			}
			soap_check_result(soap, "ns1:ChangeMountedMoldsResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__ChangeMountedMoldsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__ChangeMountedMoldsResponse, SOAP_TYPE__ns1__ChangeMountedMoldsResponse, sizeof(_ns1__ChangeMountedMoldsResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__ChangeMountedMoldsResponse * SOAP_FMAC2 soap_instantiate__ns1__ChangeMountedMoldsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__ChangeMountedMoldsResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__ChangeMountedMoldsResponse *p;
	size_t k = sizeof(_ns1__ChangeMountedMoldsResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__ChangeMountedMoldsResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__ChangeMountedMoldsResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__ChangeMountedMoldsResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__ChangeMountedMoldsResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__ChangeMountedMoldsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__ChangeMountedMoldsResponse(soap, tag ? tag : "ns1:ChangeMountedMoldsResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__ChangeMountedMoldsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__ChangeMountedMoldsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__ChangeMountedMoldsResponse * SOAP_FMAC4 soap_get__ns1__ChangeMountedMoldsResponse(struct soap *soap, _ns1__ChangeMountedMoldsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__ChangeMountedMoldsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__ChangeMountedMolds::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__ChangeMountedMolds::mountedMolds = NULL;
}

void _ns1__ChangeMountedMolds::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__MountedMoldsXml(soap, &this->_ns1__ChangeMountedMolds::mountedMolds);
#endif
}

int _ns1__ChangeMountedMolds::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__ChangeMountedMolds(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ChangeMountedMolds(struct soap *soap, const char *tag, int id, const _ns1__ChangeMountedMolds *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__ChangeMountedMolds), type))
		return soap->error;
	if (!a->_ns1__ChangeMountedMolds::mountedMolds)
	{	if (soap_element_nil(soap, "ns1:mountedMolds"))
			return soap->error;
	}
	else if (soap_out_PointerTons1__MountedMoldsXml(soap, "ns1:mountedMolds", -1, &a->_ns1__ChangeMountedMolds::mountedMolds, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__ChangeMountedMolds::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__ChangeMountedMolds(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__ChangeMountedMolds * SOAP_FMAC4 soap_in__ns1__ChangeMountedMolds(struct soap *soap, const char *tag, _ns1__ChangeMountedMolds *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__ChangeMountedMolds*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__ChangeMountedMolds, sizeof(_ns1__ChangeMountedMolds), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__ChangeMountedMolds)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__ChangeMountedMolds *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_mountedMolds1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_mountedMolds1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__MountedMoldsXml(soap, "ns1:mountedMolds", &a->_ns1__ChangeMountedMolds::mountedMolds, "ns1:MountedMoldsXml"))
				{	soap_flag_mountedMolds1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_mountedMolds1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns1__ChangeMountedMolds *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__ChangeMountedMolds, SOAP_TYPE__ns1__ChangeMountedMolds, sizeof(_ns1__ChangeMountedMolds), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__ChangeMountedMolds * SOAP_FMAC2 soap_instantiate__ns1__ChangeMountedMolds(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__ChangeMountedMolds(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__ChangeMountedMolds *p;
	size_t k = sizeof(_ns1__ChangeMountedMolds);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__ChangeMountedMolds, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__ChangeMountedMolds);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__ChangeMountedMolds, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__ChangeMountedMolds location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__ChangeMountedMolds::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__ChangeMountedMolds(soap, tag ? tag : "ns1:ChangeMountedMolds", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__ChangeMountedMolds::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__ChangeMountedMolds(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__ChangeMountedMolds * SOAP_FMAC4 soap_get__ns1__ChangeMountedMolds(struct soap *soap, _ns1__ChangeMountedMolds *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__ChangeMountedMolds(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__GetMoldsInSampleTableResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetMoldsInSampleTableResponse::GetMoldsInSampleTableResult = NULL;
}

void _ns1__GetMoldsInSampleTableResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult(soap, &this->_ns1__GetMoldsInSampleTableResponse::GetMoldsInSampleTableResult);
#endif
}

int _ns1__GetMoldsInSampleTableResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetMoldsInSampleTableResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetMoldsInSampleTableResponse(struct soap *soap, const char *tag, int id, const _ns1__GetMoldsInSampleTableResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetMoldsInSampleTableResponse), type))
		return soap->error;
	if (a->GetMoldsInSampleTableResult)
		soap_element_result(soap, "ns1:GetMoldsInSampleTableResult");
	if (soap_out_PointerTo_ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult(soap, "ns1:GetMoldsInSampleTableResult", -1, &a->_ns1__GetMoldsInSampleTableResponse::GetMoldsInSampleTableResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetMoldsInSampleTableResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__GetMoldsInSampleTableResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetMoldsInSampleTableResponse * SOAP_FMAC4 soap_in__ns1__GetMoldsInSampleTableResponse(struct soap *soap, const char *tag, _ns1__GetMoldsInSampleTableResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetMoldsInSampleTableResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetMoldsInSampleTableResponse, sizeof(_ns1__GetMoldsInSampleTableResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__GetMoldsInSampleTableResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__GetMoldsInSampleTableResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_GetMoldsInSampleTableResult1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetMoldsInSampleTableResult1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult(soap, "ns1:GetMoldsInSampleTableResult", &a->_ns1__GetMoldsInSampleTableResponse::GetMoldsInSampleTableResult, ""))
				{	soap_flag_GetMoldsInSampleTableResult1--;
					continue;
				}
			}
			soap_check_result(soap, "ns1:GetMoldsInSampleTableResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetMoldsInSampleTableResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetMoldsInSampleTableResponse, SOAP_TYPE__ns1__GetMoldsInSampleTableResponse, sizeof(_ns1__GetMoldsInSampleTableResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__GetMoldsInSampleTableResponse * SOAP_FMAC2 soap_instantiate__ns1__GetMoldsInSampleTableResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetMoldsInSampleTableResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__GetMoldsInSampleTableResponse *p;
	size_t k = sizeof(_ns1__GetMoldsInSampleTableResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__GetMoldsInSampleTableResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__GetMoldsInSampleTableResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__GetMoldsInSampleTableResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__GetMoldsInSampleTableResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__GetMoldsInSampleTableResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__GetMoldsInSampleTableResponse(soap, tag ? tag : "ns1:GetMoldsInSampleTableResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetMoldsInSampleTableResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetMoldsInSampleTableResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetMoldsInSampleTableResponse * SOAP_FMAC4 soap_get__ns1__GetMoldsInSampleTableResponse(struct soap *soap, _ns1__GetMoldsInSampleTableResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetMoldsInSampleTableResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__GetMoldsInSampleTable::soap_default(struct soap *soap)
{
	this->soap = soap;
}

void _ns1__GetMoldsInSampleTable::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int _ns1__GetMoldsInSampleTable::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetMoldsInSampleTable(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetMoldsInSampleTable(struct soap *soap, const char *tag, int id, const _ns1__GetMoldsInSampleTable *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetMoldsInSampleTable), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetMoldsInSampleTable::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__GetMoldsInSampleTable(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetMoldsInSampleTable * SOAP_FMAC4 soap_in__ns1__GetMoldsInSampleTable(struct soap *soap, const char *tag, _ns1__GetMoldsInSampleTable *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetMoldsInSampleTable*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetMoldsInSampleTable, sizeof(_ns1__GetMoldsInSampleTable), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__GetMoldsInSampleTable)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__GetMoldsInSampleTable *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetMoldsInSampleTable *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetMoldsInSampleTable, SOAP_TYPE__ns1__GetMoldsInSampleTable, sizeof(_ns1__GetMoldsInSampleTable), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__GetMoldsInSampleTable * SOAP_FMAC2 soap_instantiate__ns1__GetMoldsInSampleTable(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetMoldsInSampleTable(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__GetMoldsInSampleTable *p;
	size_t k = sizeof(_ns1__GetMoldsInSampleTable);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__GetMoldsInSampleTable, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__GetMoldsInSampleTable);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__GetMoldsInSampleTable, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__GetMoldsInSampleTable location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__GetMoldsInSampleTable::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__GetMoldsInSampleTable(soap, tag ? tag : "ns1:GetMoldsInSampleTable", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetMoldsInSampleTable::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetMoldsInSampleTable(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetMoldsInSampleTable * SOAP_FMAC4 soap_get__ns1__GetMoldsInSampleTable(struct soap *soap, _ns1__GetMoldsInSampleTable *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetMoldsInSampleTable(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__EjectedMoldsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__EjectedMoldsResponse::EjectedMoldsResult = NULL;
}

void _ns1__EjectedMoldsResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__EjectedMoldsResponse_EjectedMoldsResult(soap, &this->_ns1__EjectedMoldsResponse::EjectedMoldsResult);
#endif
}

int _ns1__EjectedMoldsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__EjectedMoldsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__EjectedMoldsResponse(struct soap *soap, const char *tag, int id, const _ns1__EjectedMoldsResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__EjectedMoldsResponse), type))
		return soap->error;
	if (a->EjectedMoldsResult)
		soap_element_result(soap, "ns1:EjectedMoldsResult");
	if (soap_out_PointerTo_ns1__EjectedMoldsResponse_EjectedMoldsResult(soap, "ns1:EjectedMoldsResult", -1, &a->_ns1__EjectedMoldsResponse::EjectedMoldsResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__EjectedMoldsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__EjectedMoldsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__EjectedMoldsResponse * SOAP_FMAC4 soap_in__ns1__EjectedMoldsResponse(struct soap *soap, const char *tag, _ns1__EjectedMoldsResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__EjectedMoldsResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__EjectedMoldsResponse, sizeof(_ns1__EjectedMoldsResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__EjectedMoldsResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__EjectedMoldsResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_EjectedMoldsResult1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_EjectedMoldsResult1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__EjectedMoldsResponse_EjectedMoldsResult(soap, "ns1:EjectedMoldsResult", &a->_ns1__EjectedMoldsResponse::EjectedMoldsResult, ""))
				{	soap_flag_EjectedMoldsResult1--;
					continue;
				}
			}
			soap_check_result(soap, "ns1:EjectedMoldsResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__EjectedMoldsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__EjectedMoldsResponse, SOAP_TYPE__ns1__EjectedMoldsResponse, sizeof(_ns1__EjectedMoldsResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__EjectedMoldsResponse * SOAP_FMAC2 soap_instantiate__ns1__EjectedMoldsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__EjectedMoldsResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__EjectedMoldsResponse *p;
	size_t k = sizeof(_ns1__EjectedMoldsResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__EjectedMoldsResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__EjectedMoldsResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__EjectedMoldsResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__EjectedMoldsResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__EjectedMoldsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__EjectedMoldsResponse(soap, tag ? tag : "ns1:EjectedMoldsResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__EjectedMoldsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__EjectedMoldsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__EjectedMoldsResponse * SOAP_FMAC4 soap_get__ns1__EjectedMoldsResponse(struct soap *soap, _ns1__EjectedMoldsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__EjectedMoldsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__EjectedMolds::soap_default(struct soap *soap)
{
	this->soap = soap;
}

void _ns1__EjectedMolds::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int _ns1__EjectedMolds::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__EjectedMolds(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__EjectedMolds(struct soap *soap, const char *tag, int id, const _ns1__EjectedMolds *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__EjectedMolds), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__EjectedMolds::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__EjectedMolds(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__EjectedMolds * SOAP_FMAC4 soap_in__ns1__EjectedMolds(struct soap *soap, const char *tag, _ns1__EjectedMolds *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__EjectedMolds*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__EjectedMolds, sizeof(_ns1__EjectedMolds), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__EjectedMolds)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__EjectedMolds *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__EjectedMolds *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__EjectedMolds, SOAP_TYPE__ns1__EjectedMolds, sizeof(_ns1__EjectedMolds), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__EjectedMolds * SOAP_FMAC2 soap_instantiate__ns1__EjectedMolds(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__EjectedMolds(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__EjectedMolds *p;
	size_t k = sizeof(_ns1__EjectedMolds);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__EjectedMolds, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__EjectedMolds);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__EjectedMolds, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__EjectedMolds location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__EjectedMolds::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__EjectedMolds(soap, tag ? tag : "ns1:EjectedMolds", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__EjectedMolds::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__EjectedMolds(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__EjectedMolds * SOAP_FMAC4 soap_get__ns1__EjectedMolds(struct soap *soap, _ns1__EjectedMolds *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__EjectedMolds(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__ReadenMoldsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__ReadenMoldsResponse::ReadenMoldsResult = NULL;
}

void _ns1__ReadenMoldsResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__ReadenMoldsResponse_ReadenMoldsResult(soap, &this->_ns1__ReadenMoldsResponse::ReadenMoldsResult);
#endif
}

int _ns1__ReadenMoldsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__ReadenMoldsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ReadenMoldsResponse(struct soap *soap, const char *tag, int id, const _ns1__ReadenMoldsResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__ReadenMoldsResponse), type))
		return soap->error;
	if (a->ReadenMoldsResult)
		soap_element_result(soap, "ns1:ReadenMoldsResult");
	if (soap_out_PointerTo_ns1__ReadenMoldsResponse_ReadenMoldsResult(soap, "ns1:ReadenMoldsResult", -1, &a->_ns1__ReadenMoldsResponse::ReadenMoldsResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__ReadenMoldsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__ReadenMoldsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__ReadenMoldsResponse * SOAP_FMAC4 soap_in__ns1__ReadenMoldsResponse(struct soap *soap, const char *tag, _ns1__ReadenMoldsResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__ReadenMoldsResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__ReadenMoldsResponse, sizeof(_ns1__ReadenMoldsResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__ReadenMoldsResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__ReadenMoldsResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_ReadenMoldsResult1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ReadenMoldsResult1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__ReadenMoldsResponse_ReadenMoldsResult(soap, "ns1:ReadenMoldsResult", &a->_ns1__ReadenMoldsResponse::ReadenMoldsResult, ""))
				{	soap_flag_ReadenMoldsResult1--;
					continue;
				}
			}
			soap_check_result(soap, "ns1:ReadenMoldsResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__ReadenMoldsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__ReadenMoldsResponse, SOAP_TYPE__ns1__ReadenMoldsResponse, sizeof(_ns1__ReadenMoldsResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__ReadenMoldsResponse * SOAP_FMAC2 soap_instantiate__ns1__ReadenMoldsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__ReadenMoldsResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__ReadenMoldsResponse *p;
	size_t k = sizeof(_ns1__ReadenMoldsResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__ReadenMoldsResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__ReadenMoldsResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__ReadenMoldsResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__ReadenMoldsResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__ReadenMoldsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__ReadenMoldsResponse(soap, tag ? tag : "ns1:ReadenMoldsResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__ReadenMoldsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__ReadenMoldsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__ReadenMoldsResponse * SOAP_FMAC4 soap_get__ns1__ReadenMoldsResponse(struct soap *soap, _ns1__ReadenMoldsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__ReadenMoldsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__ReadenMolds::soap_default(struct soap *soap)
{
	this->soap = soap;
}

void _ns1__ReadenMolds::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int _ns1__ReadenMolds::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__ReadenMolds(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ReadenMolds(struct soap *soap, const char *tag, int id, const _ns1__ReadenMolds *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__ReadenMolds), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__ReadenMolds::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__ReadenMolds(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__ReadenMolds * SOAP_FMAC4 soap_in__ns1__ReadenMolds(struct soap *soap, const char *tag, _ns1__ReadenMolds *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__ReadenMolds*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__ReadenMolds, sizeof(_ns1__ReadenMolds), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__ReadenMolds)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__ReadenMolds *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__ReadenMolds *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__ReadenMolds, SOAP_TYPE__ns1__ReadenMolds, sizeof(_ns1__ReadenMolds), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__ReadenMolds * SOAP_FMAC2 soap_instantiate__ns1__ReadenMolds(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__ReadenMolds(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__ReadenMolds *p;
	size_t k = sizeof(_ns1__ReadenMolds);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__ReadenMolds, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__ReadenMolds);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__ReadenMolds, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__ReadenMolds location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__ReadenMolds::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__ReadenMolds(soap, tag ? tag : "ns1:ReadenMolds", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__ReadenMolds::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__ReadenMolds(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__ReadenMolds * SOAP_FMAC4 soap_get__ns1__ReadenMolds(struct soap *soap, _ns1__ReadenMolds *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__ReadenMolds(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__CumulCountsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__CumulCountsResponse::CumulCountsResult = NULL;
}

void _ns1__CumulCountsResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__CumulCountsResponse_CumulCountsResult(soap, &this->_ns1__CumulCountsResponse::CumulCountsResult);
#endif
}

int _ns1__CumulCountsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__CumulCountsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CumulCountsResponse(struct soap *soap, const char *tag, int id, const _ns1__CumulCountsResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__CumulCountsResponse), type))
		return soap->error;
	if (a->CumulCountsResult)
		soap_element_result(soap, "ns1:CumulCountsResult");
	if (soap_out_PointerTo_ns1__CumulCountsResponse_CumulCountsResult(soap, "ns1:CumulCountsResult", -1, &a->_ns1__CumulCountsResponse::CumulCountsResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__CumulCountsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__CumulCountsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__CumulCountsResponse * SOAP_FMAC4 soap_in__ns1__CumulCountsResponse(struct soap *soap, const char *tag, _ns1__CumulCountsResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__CumulCountsResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__CumulCountsResponse, sizeof(_ns1__CumulCountsResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__CumulCountsResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__CumulCountsResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_CumulCountsResult1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_CumulCountsResult1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__CumulCountsResponse_CumulCountsResult(soap, "ns1:CumulCountsResult", &a->_ns1__CumulCountsResponse::CumulCountsResult, ""))
				{	soap_flag_CumulCountsResult1--;
					continue;
				}
			}
			soap_check_result(soap, "ns1:CumulCountsResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__CumulCountsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__CumulCountsResponse, SOAP_TYPE__ns1__CumulCountsResponse, sizeof(_ns1__CumulCountsResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__CumulCountsResponse * SOAP_FMAC2 soap_instantiate__ns1__CumulCountsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__CumulCountsResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__CumulCountsResponse *p;
	size_t k = sizeof(_ns1__CumulCountsResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__CumulCountsResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__CumulCountsResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__CumulCountsResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__CumulCountsResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__CumulCountsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__CumulCountsResponse(soap, tag ? tag : "ns1:CumulCountsResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__CumulCountsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__CumulCountsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__CumulCountsResponse * SOAP_FMAC4 soap_get__ns1__CumulCountsResponse(struct soap *soap, _ns1__CumulCountsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__CumulCountsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__CumulCounts::soap_default(struct soap *soap)
{
	this->soap = soap;
}

void _ns1__CumulCounts::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int _ns1__CumulCounts::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__CumulCounts(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CumulCounts(struct soap *soap, const char *tag, int id, const _ns1__CumulCounts *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__CumulCounts), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__CumulCounts::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__CumulCounts(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__CumulCounts * SOAP_FMAC4 soap_in__ns1__CumulCounts(struct soap *soap, const char *tag, _ns1__CumulCounts *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__CumulCounts*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__CumulCounts, sizeof(_ns1__CumulCounts), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__CumulCounts)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__CumulCounts *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__CumulCounts *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__CumulCounts, SOAP_TYPE__ns1__CumulCounts, sizeof(_ns1__CumulCounts), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__CumulCounts * SOAP_FMAC2 soap_instantiate__ns1__CumulCounts(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__CumulCounts(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__CumulCounts *p;
	size_t k = sizeof(_ns1__CumulCounts);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__CumulCounts, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__CumulCounts);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__CumulCounts, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__CumulCounts location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__CumulCounts::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__CumulCounts(soap, tag ? tag : "ns1:CumulCounts", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__CumulCounts::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__CumulCounts(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__CumulCounts * SOAP_FMAC4 soap_get__ns1__CumulCounts(struct soap *soap, _ns1__CumulCounts *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__CumulCounts(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__MeasuresResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__MeasuresResponse::MeasuresResult = NULL;
}

void _ns1__MeasuresResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__MeasuresResponse_MeasuresResult(soap, &this->_ns1__MeasuresResponse::MeasuresResult);
#endif
}

int _ns1__MeasuresResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__MeasuresResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__MeasuresResponse(struct soap *soap, const char *tag, int id, const _ns1__MeasuresResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__MeasuresResponse), type))
		return soap->error;
	if (a->MeasuresResult)
		soap_element_result(soap, "ns1:MeasuresResult");
	if (soap_out_PointerTo_ns1__MeasuresResponse_MeasuresResult(soap, "ns1:MeasuresResult", -1, &a->_ns1__MeasuresResponse::MeasuresResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__MeasuresResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__MeasuresResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__MeasuresResponse * SOAP_FMAC4 soap_in__ns1__MeasuresResponse(struct soap *soap, const char *tag, _ns1__MeasuresResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__MeasuresResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__MeasuresResponse, sizeof(_ns1__MeasuresResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__MeasuresResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__MeasuresResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_MeasuresResult1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_MeasuresResult1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__MeasuresResponse_MeasuresResult(soap, "ns1:MeasuresResult", &a->_ns1__MeasuresResponse::MeasuresResult, ""))
				{	soap_flag_MeasuresResult1--;
					continue;
				}
			}
			soap_check_result(soap, "ns1:MeasuresResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__MeasuresResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__MeasuresResponse, SOAP_TYPE__ns1__MeasuresResponse, sizeof(_ns1__MeasuresResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__MeasuresResponse * SOAP_FMAC2 soap_instantiate__ns1__MeasuresResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__MeasuresResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__MeasuresResponse *p;
	size_t k = sizeof(_ns1__MeasuresResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__MeasuresResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__MeasuresResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__MeasuresResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__MeasuresResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__MeasuresResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__MeasuresResponse(soap, tag ? tag : "ns1:MeasuresResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__MeasuresResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__MeasuresResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__MeasuresResponse * SOAP_FMAC4 soap_get__ns1__MeasuresResponse(struct soap *soap, _ns1__MeasuresResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__MeasuresResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__Measures::soap_default(struct soap *soap)
{
	this->soap = soap;
}

void _ns1__Measures::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int _ns1__Measures::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__Measures(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Measures(struct soap *soap, const char *tag, int id, const _ns1__Measures *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__Measures), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__Measures::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__Measures(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__Measures * SOAP_FMAC4 soap_in__ns1__Measures(struct soap *soap, const char *tag, _ns1__Measures *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__Measures*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__Measures, sizeof(_ns1__Measures), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__Measures)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__Measures *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__Measures *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__Measures, SOAP_TYPE__ns1__Measures, sizeof(_ns1__Measures), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__Measures * SOAP_FMAC2 soap_instantiate__ns1__Measures(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__Measures(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__Measures *p;
	size_t k = sizeof(_ns1__Measures);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__Measures, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__Measures);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__Measures, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__Measures location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__Measures::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__Measures(soap, tag ? tag : "ns1:Measures", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__Measures::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__Measures(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__Measures * SOAP_FMAC4 soap_get__ns1__Measures(struct soap *soap, _ns1__Measures *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__Measures(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__MountedMoldsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__MountedMoldsResponse::MountedMoldsResult = NULL;
}

void _ns1__MountedMoldsResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__MountedMoldsResponse_MountedMoldsResult(soap, &this->_ns1__MountedMoldsResponse::MountedMoldsResult);
#endif
}

int _ns1__MountedMoldsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__MountedMoldsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__MountedMoldsResponse(struct soap *soap, const char *tag, int id, const _ns1__MountedMoldsResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__MountedMoldsResponse), type))
		return soap->error;
	if (a->MountedMoldsResult)
		soap_element_result(soap, "ns1:MountedMoldsResult");
	if (soap_out_PointerTo_ns1__MountedMoldsResponse_MountedMoldsResult(soap, "ns1:MountedMoldsResult", -1, &a->_ns1__MountedMoldsResponse::MountedMoldsResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__MountedMoldsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__MountedMoldsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__MountedMoldsResponse * SOAP_FMAC4 soap_in__ns1__MountedMoldsResponse(struct soap *soap, const char *tag, _ns1__MountedMoldsResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__MountedMoldsResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__MountedMoldsResponse, sizeof(_ns1__MountedMoldsResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__MountedMoldsResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__MountedMoldsResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_MountedMoldsResult1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_MountedMoldsResult1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__MountedMoldsResponse_MountedMoldsResult(soap, "ns1:MountedMoldsResult", &a->_ns1__MountedMoldsResponse::MountedMoldsResult, ""))
				{	soap_flag_MountedMoldsResult1--;
					continue;
				}
			}
			soap_check_result(soap, "ns1:MountedMoldsResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__MountedMoldsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__MountedMoldsResponse, SOAP_TYPE__ns1__MountedMoldsResponse, sizeof(_ns1__MountedMoldsResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__MountedMoldsResponse * SOAP_FMAC2 soap_instantiate__ns1__MountedMoldsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__MountedMoldsResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__MountedMoldsResponse *p;
	size_t k = sizeof(_ns1__MountedMoldsResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__MountedMoldsResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__MountedMoldsResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__MountedMoldsResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__MountedMoldsResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__MountedMoldsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__MountedMoldsResponse(soap, tag ? tag : "ns1:MountedMoldsResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__MountedMoldsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__MountedMoldsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__MountedMoldsResponse * SOAP_FMAC4 soap_get__ns1__MountedMoldsResponse(struct soap *soap, _ns1__MountedMoldsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__MountedMoldsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__MountedMolds::soap_default(struct soap *soap)
{
	this->soap = soap;
}

void _ns1__MountedMolds::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int _ns1__MountedMolds::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__MountedMolds(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__MountedMolds(struct soap *soap, const char *tag, int id, const _ns1__MountedMolds *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__MountedMolds), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__MountedMolds::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__MountedMolds(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__MountedMolds * SOAP_FMAC4 soap_in__ns1__MountedMolds(struct soap *soap, const char *tag, _ns1__MountedMolds *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__MountedMolds*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__MountedMolds, sizeof(_ns1__MountedMolds), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__MountedMolds)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__MountedMolds *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__MountedMolds *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__MountedMolds, SOAP_TYPE__ns1__MountedMolds, sizeof(_ns1__MountedMolds), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__MountedMolds * SOAP_FMAC2 soap_instantiate__ns1__MountedMolds(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__MountedMolds(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__MountedMolds *p;
	size_t k = sizeof(_ns1__MountedMolds);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__MountedMolds, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__MountedMolds);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__MountedMolds, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__MountedMolds location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__MountedMolds::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__MountedMolds(soap, tag ? tag : "ns1:MountedMolds", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__MountedMolds::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__MountedMolds(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__MountedMolds * SOAP_FMAC4 soap_get__ns1__MountedMolds(struct soap *soap, _ns1__MountedMolds *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__MountedMolds(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__GetAlarmsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetAlarmsResponse::GetAlarmsResult = NULL;
}

void _ns1__GetAlarmsResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetAlarmsResponse_GetAlarmsResult(soap, &this->_ns1__GetAlarmsResponse::GetAlarmsResult);
#endif
}

int _ns1__GetAlarmsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetAlarmsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAlarmsResponse(struct soap *soap, const char *tag, int id, const _ns1__GetAlarmsResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetAlarmsResponse), type))
		return soap->error;
	if (a->GetAlarmsResult)
		soap_element_result(soap, "ns1:GetAlarmsResult");
	if (soap_out_PointerTo_ns1__GetAlarmsResponse_GetAlarmsResult(soap, "ns1:GetAlarmsResult", -1, &a->_ns1__GetAlarmsResponse::GetAlarmsResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetAlarmsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__GetAlarmsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetAlarmsResponse * SOAP_FMAC4 soap_in__ns1__GetAlarmsResponse(struct soap *soap, const char *tag, _ns1__GetAlarmsResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetAlarmsResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetAlarmsResponse, sizeof(_ns1__GetAlarmsResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__GetAlarmsResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__GetAlarmsResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_GetAlarmsResult1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetAlarmsResult1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__GetAlarmsResponse_GetAlarmsResult(soap, "ns1:GetAlarmsResult", &a->_ns1__GetAlarmsResponse::GetAlarmsResult, ""))
				{	soap_flag_GetAlarmsResult1--;
					continue;
				}
			}
			soap_check_result(soap, "ns1:GetAlarmsResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetAlarmsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetAlarmsResponse, SOAP_TYPE__ns1__GetAlarmsResponse, sizeof(_ns1__GetAlarmsResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__GetAlarmsResponse * SOAP_FMAC2 soap_instantiate__ns1__GetAlarmsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetAlarmsResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__GetAlarmsResponse *p;
	size_t k = sizeof(_ns1__GetAlarmsResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__GetAlarmsResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__GetAlarmsResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__GetAlarmsResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__GetAlarmsResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__GetAlarmsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__GetAlarmsResponse(soap, tag ? tag : "ns1:GetAlarmsResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetAlarmsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetAlarmsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetAlarmsResponse * SOAP_FMAC4 soap_get__ns1__GetAlarmsResponse(struct soap *soap, _ns1__GetAlarmsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetAlarmsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__GetAlarms::soap_default(struct soap *soap)
{
	this->soap = soap;
}

void _ns1__GetAlarms::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int _ns1__GetAlarms::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetAlarms(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAlarms(struct soap *soap, const char *tag, int id, const _ns1__GetAlarms *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetAlarms), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetAlarms::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__GetAlarms(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetAlarms * SOAP_FMAC4 soap_in__ns1__GetAlarms(struct soap *soap, const char *tag, _ns1__GetAlarms *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetAlarms*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetAlarms, sizeof(_ns1__GetAlarms), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__GetAlarms)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__GetAlarms *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetAlarms *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetAlarms, SOAP_TYPE__ns1__GetAlarms, sizeof(_ns1__GetAlarms), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__GetAlarms * SOAP_FMAC2 soap_instantiate__ns1__GetAlarms(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetAlarms(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__GetAlarms *p;
	size_t k = sizeof(_ns1__GetAlarms);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__GetAlarms, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__GetAlarms);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__GetAlarms, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__GetAlarms location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__GetAlarms::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__GetAlarms(soap, tag ? tag : "ns1:GetAlarms", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetAlarms::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetAlarms(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetAlarms * SOAP_FMAC4 soap_get__ns1__GetAlarms(struct soap *soap, _ns1__GetAlarms *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetAlarms(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__GetAlarmsSinceLastQueryResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetAlarmsSinceLastQueryResponse::GetAlarmsSinceLastQueryResult = NULL;
}

void _ns1__GetAlarmsSinceLastQueryResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult(soap, &this->_ns1__GetAlarmsSinceLastQueryResponse::GetAlarmsSinceLastQueryResult);
#endif
}

int _ns1__GetAlarmsSinceLastQueryResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetAlarmsSinceLastQueryResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAlarmsSinceLastQueryResponse(struct soap *soap, const char *tag, int id, const _ns1__GetAlarmsSinceLastQueryResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetAlarmsSinceLastQueryResponse), type))
		return soap->error;
	if (a->GetAlarmsSinceLastQueryResult)
		soap_element_result(soap, "ns1:GetAlarmsSinceLastQueryResult");
	if (soap_out_PointerTo_ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult(soap, "ns1:GetAlarmsSinceLastQueryResult", -1, &a->_ns1__GetAlarmsSinceLastQueryResponse::GetAlarmsSinceLastQueryResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetAlarmsSinceLastQueryResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__GetAlarmsSinceLastQueryResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetAlarmsSinceLastQueryResponse * SOAP_FMAC4 soap_in__ns1__GetAlarmsSinceLastQueryResponse(struct soap *soap, const char *tag, _ns1__GetAlarmsSinceLastQueryResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetAlarmsSinceLastQueryResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetAlarmsSinceLastQueryResponse, sizeof(_ns1__GetAlarmsSinceLastQueryResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__GetAlarmsSinceLastQueryResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__GetAlarmsSinceLastQueryResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_GetAlarmsSinceLastQueryResult1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetAlarmsSinceLastQueryResult1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult(soap, "ns1:GetAlarmsSinceLastQueryResult", &a->_ns1__GetAlarmsSinceLastQueryResponse::GetAlarmsSinceLastQueryResult, ""))
				{	soap_flag_GetAlarmsSinceLastQueryResult1--;
					continue;
				}
			}
			soap_check_result(soap, "ns1:GetAlarmsSinceLastQueryResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetAlarmsSinceLastQueryResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetAlarmsSinceLastQueryResponse, SOAP_TYPE__ns1__GetAlarmsSinceLastQueryResponse, sizeof(_ns1__GetAlarmsSinceLastQueryResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__GetAlarmsSinceLastQueryResponse * SOAP_FMAC2 soap_instantiate__ns1__GetAlarmsSinceLastQueryResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetAlarmsSinceLastQueryResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__GetAlarmsSinceLastQueryResponse *p;
	size_t k = sizeof(_ns1__GetAlarmsSinceLastQueryResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__GetAlarmsSinceLastQueryResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__GetAlarmsSinceLastQueryResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__GetAlarmsSinceLastQueryResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__GetAlarmsSinceLastQueryResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__GetAlarmsSinceLastQueryResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__GetAlarmsSinceLastQueryResponse(soap, tag ? tag : "ns1:GetAlarmsSinceLastQueryResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetAlarmsSinceLastQueryResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetAlarmsSinceLastQueryResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetAlarmsSinceLastQueryResponse * SOAP_FMAC4 soap_get__ns1__GetAlarmsSinceLastQueryResponse(struct soap *soap, _ns1__GetAlarmsSinceLastQueryResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetAlarmsSinceLastQueryResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__GetAlarmsSinceLastQuery::soap_default(struct soap *soap)
{
	this->soap = soap;
}

void _ns1__GetAlarmsSinceLastQuery::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int _ns1__GetAlarmsSinceLastQuery::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetAlarmsSinceLastQuery(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAlarmsSinceLastQuery(struct soap *soap, const char *tag, int id, const _ns1__GetAlarmsSinceLastQuery *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetAlarmsSinceLastQuery), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetAlarmsSinceLastQuery::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__GetAlarmsSinceLastQuery(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetAlarmsSinceLastQuery * SOAP_FMAC4 soap_in__ns1__GetAlarmsSinceLastQuery(struct soap *soap, const char *tag, _ns1__GetAlarmsSinceLastQuery *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetAlarmsSinceLastQuery*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetAlarmsSinceLastQuery, sizeof(_ns1__GetAlarmsSinceLastQuery), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__GetAlarmsSinceLastQuery)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__GetAlarmsSinceLastQuery *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetAlarmsSinceLastQuery *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetAlarmsSinceLastQuery, SOAP_TYPE__ns1__GetAlarmsSinceLastQuery, sizeof(_ns1__GetAlarmsSinceLastQuery), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__GetAlarmsSinceLastQuery * SOAP_FMAC2 soap_instantiate__ns1__GetAlarmsSinceLastQuery(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetAlarmsSinceLastQuery(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__GetAlarmsSinceLastQuery *p;
	size_t k = sizeof(_ns1__GetAlarmsSinceLastQuery);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__GetAlarmsSinceLastQuery, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__GetAlarmsSinceLastQuery);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__GetAlarmsSinceLastQuery, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__GetAlarmsSinceLastQuery location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__GetAlarmsSinceLastQuery::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__GetAlarmsSinceLastQuery(soap, tag ? tag : "ns1:GetAlarmsSinceLastQuery", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetAlarmsSinceLastQuery::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetAlarmsSinceLastQuery(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetAlarmsSinceLastQuery * SOAP_FMAC4 soap_get__ns1__GetAlarmsSinceLastQuery(struct soap *soap, _ns1__GetAlarmsSinceLastQuery *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetAlarmsSinceLastQuery(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__CountsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__CountsResponse::CountsResult = NULL;
}

void _ns1__CountsResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__CountsResponse_CountsResult(soap, &this->_ns1__CountsResponse::CountsResult);
#endif
}

int _ns1__CountsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__CountsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CountsResponse(struct soap *soap, const char *tag, int id, const _ns1__CountsResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__CountsResponse), type))
		return soap->error;
	if (a->CountsResult)
		soap_element_result(soap, "ns1:CountsResult");
	if (soap_out_PointerTo_ns1__CountsResponse_CountsResult(soap, "ns1:CountsResult", -1, &a->_ns1__CountsResponse::CountsResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__CountsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__CountsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__CountsResponse * SOAP_FMAC4 soap_in__ns1__CountsResponse(struct soap *soap, const char *tag, _ns1__CountsResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__CountsResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__CountsResponse, sizeof(_ns1__CountsResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__CountsResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__CountsResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_CountsResult1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_CountsResult1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__CountsResponse_CountsResult(soap, "ns1:CountsResult", &a->_ns1__CountsResponse::CountsResult, ""))
				{	soap_flag_CountsResult1--;
					continue;
				}
			}
			soap_check_result(soap, "ns1:CountsResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__CountsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__CountsResponse, SOAP_TYPE__ns1__CountsResponse, sizeof(_ns1__CountsResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__CountsResponse * SOAP_FMAC2 soap_instantiate__ns1__CountsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__CountsResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__CountsResponse *p;
	size_t k = sizeof(_ns1__CountsResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__CountsResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__CountsResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__CountsResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__CountsResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__CountsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__CountsResponse(soap, tag ? tag : "ns1:CountsResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__CountsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__CountsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__CountsResponse * SOAP_FMAC4 soap_get__ns1__CountsResponse(struct soap *soap, _ns1__CountsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__CountsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__Counts::soap_default(struct soap *soap)
{
	this->soap = soap;
}

void _ns1__Counts::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int _ns1__Counts::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__Counts(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Counts(struct soap *soap, const char *tag, int id, const _ns1__Counts *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__Counts), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__Counts::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__Counts(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__Counts * SOAP_FMAC4 soap_in__ns1__Counts(struct soap *soap, const char *tag, _ns1__Counts *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__Counts*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__Counts, sizeof(_ns1__Counts), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__Counts)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__Counts *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__Counts *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__Counts, SOAP_TYPE__ns1__Counts, sizeof(_ns1__Counts), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__Counts * SOAP_FMAC2 soap_instantiate__ns1__Counts(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__Counts(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__Counts *p;
	size_t k = sizeof(_ns1__Counts);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__Counts, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__Counts);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__Counts, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__Counts location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__Counts::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__Counts(soap, tag ? tag : "ns1:Counts", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__Counts::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__Counts(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__Counts * SOAP_FMAC4 soap_get__ns1__Counts(struct soap *soap, _ns1__Counts *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__Counts(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__PrelevementUnitaire::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->ns1__PrelevementUnitaire::mold);
	soap_default_ns1__CodeDetection(soap, &this->ns1__PrelevementUnitaire::sensor);
	soap_default_int(soap, &this->ns1__PrelevementUnitaire::number);
}

void ns1__PrelevementUnitaire::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int ns1__PrelevementUnitaire::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__PrelevementUnitaire(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__PrelevementUnitaire(struct soap *soap, const char *tag, int id, const ns1__PrelevementUnitaire *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__PrelevementUnitaire), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:mold", -1, &a->ns1__PrelevementUnitaire::mold, ""))
		return soap->error;
	if (soap_out_ns1__CodeDetection(soap, "ns1:sensor", -1, &a->ns1__PrelevementUnitaire::sensor, ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:number", -1, &a->ns1__PrelevementUnitaire::number, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__PrelevementUnitaire::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__PrelevementUnitaire(soap, tag, this, type);
}

SOAP_FMAC3 ns1__PrelevementUnitaire * SOAP_FMAC4 soap_in_ns1__PrelevementUnitaire(struct soap *soap, const char *tag, ns1__PrelevementUnitaire *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__PrelevementUnitaire*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__PrelevementUnitaire, sizeof(ns1__PrelevementUnitaire), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__PrelevementUnitaire)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__PrelevementUnitaire *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_mold1 = 1;
	size_t soap_flag_sensor1 = 1;
	size_t soap_flag_number1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_mold1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "ns1:mold", &a->ns1__PrelevementUnitaire::mold, "xsd:int"))
				{	soap_flag_mold1--;
					continue;
				}
			}
			if (soap_flag_sensor1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_ns1__CodeDetection(soap, "ns1:sensor", &a->ns1__PrelevementUnitaire::sensor, "ns1:CodeDetection"))
				{	soap_flag_sensor1--;
					continue;
				}
			}
			if (soap_flag_number1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "ns1:number", &a->ns1__PrelevementUnitaire::number, "xsd:int"))
				{	soap_flag_number1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_mold1 > 0 || soap_flag_sensor1 > 0 || soap_flag_number1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns1__PrelevementUnitaire *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__PrelevementUnitaire, SOAP_TYPE_ns1__PrelevementUnitaire, sizeof(ns1__PrelevementUnitaire), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__PrelevementUnitaire * SOAP_FMAC2 soap_instantiate_ns1__PrelevementUnitaire(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__PrelevementUnitaire(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__PrelevementUnitaire *p;
	size_t k = sizeof(ns1__PrelevementUnitaire);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__PrelevementUnitaire, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__PrelevementUnitaire);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__PrelevementUnitaire, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__PrelevementUnitaire location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__PrelevementUnitaire::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__PrelevementUnitaire(soap, tag ? tag : "ns1:PrelevementUnitaire", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__PrelevementUnitaire::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__PrelevementUnitaire(soap, this, tag, type);
}

SOAP_FMAC3 ns1__PrelevementUnitaire * SOAP_FMAC4 soap_get_ns1__PrelevementUnitaire(struct soap *soap, ns1__PrelevementUnitaire *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__PrelevementUnitaire(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__ArrayOfPrelevementUnitaire::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ArrayOfPrelevementUnitaire::__sizesample = 0;
	this->ns1__ArrayOfPrelevementUnitaire::sample = NULL;
}

void ns1__ArrayOfPrelevementUnitaire::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (this->ns1__ArrayOfPrelevementUnitaire::sample)
	{	int i;
		for (i = 0; i < (int)this->ns1__ArrayOfPrelevementUnitaire::__sizesample; i++)
		{
			soap_serialize_PointerTons1__PrelevementUnitaire(soap, this->ns1__ArrayOfPrelevementUnitaire::sample + i);
		}
	}
#endif
}

int ns1__ArrayOfPrelevementUnitaire::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ArrayOfPrelevementUnitaire(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfPrelevementUnitaire(struct soap *soap, const char *tag, int id, const ns1__ArrayOfPrelevementUnitaire *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ArrayOfPrelevementUnitaire), type))
		return soap->error;
	if (a->ns1__ArrayOfPrelevementUnitaire::sample)
	{	int i;
		for (i = 0; i < (int)a->ns1__ArrayOfPrelevementUnitaire::__sizesample; i++)
			if (soap_out_PointerTons1__PrelevementUnitaire(soap, "sample", -1, a->ns1__ArrayOfPrelevementUnitaire::sample + i, ""))
				return soap->error;
	}
	return soap_element_end_out(soap, tag);
}

void *ns1__ArrayOfPrelevementUnitaire::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__ArrayOfPrelevementUnitaire(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ArrayOfPrelevementUnitaire * SOAP_FMAC4 soap_in_ns1__ArrayOfPrelevementUnitaire(struct soap *soap, const char *tag, ns1__ArrayOfPrelevementUnitaire *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ArrayOfPrelevementUnitaire*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ArrayOfPrelevementUnitaire, sizeof(ns1__ArrayOfPrelevementUnitaire), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__ArrayOfPrelevementUnitaire)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__ArrayOfPrelevementUnitaire *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	struct soap_blist *soap_blist_sample1 = NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "sample", 1, NULL))
			{	if (a->ns1__ArrayOfPrelevementUnitaire::sample == NULL)
				{	if (soap_blist_sample1 == NULL)
						soap_blist_sample1 = soap_alloc_block(soap);
					a->ns1__ArrayOfPrelevementUnitaire::sample = (ns1__PrelevementUnitaire **)soap_push_block_max(soap, soap_blist_sample1, sizeof(ns1__PrelevementUnitaire *));
					if (a->ns1__ArrayOfPrelevementUnitaire::sample == NULL)
						return NULL;
					*a->ns1__ArrayOfPrelevementUnitaire::sample = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerTons1__PrelevementUnitaire(soap, "sample", a->ns1__ArrayOfPrelevementUnitaire::sample, "ns1:PrelevementUnitaire"))
				{	a->ns1__ArrayOfPrelevementUnitaire::__sizesample++;
					a->ns1__ArrayOfPrelevementUnitaire::sample = NULL;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->ns1__ArrayOfPrelevementUnitaire::sample)
			soap_pop_block(soap, soap_blist_sample1);
		if (a->ns1__ArrayOfPrelevementUnitaire::__sizesample)
		{	a->ns1__ArrayOfPrelevementUnitaire::sample = (ns1__PrelevementUnitaire **)soap_save_block(soap, soap_blist_sample1, NULL, 1);
		}
		else
		{	a->ns1__ArrayOfPrelevementUnitaire::sample = NULL;
			if (soap_blist_sample1)
				soap_end_block(soap, soap_blist_sample1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ArrayOfPrelevementUnitaire *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ArrayOfPrelevementUnitaire, SOAP_TYPE_ns1__ArrayOfPrelevementUnitaire, sizeof(ns1__ArrayOfPrelevementUnitaire), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__ArrayOfPrelevementUnitaire * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfPrelevementUnitaire(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ArrayOfPrelevementUnitaire(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__ArrayOfPrelevementUnitaire *p;
	size_t k = sizeof(ns1__ArrayOfPrelevementUnitaire);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__ArrayOfPrelevementUnitaire, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__ArrayOfPrelevementUnitaire);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__ArrayOfPrelevementUnitaire, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__ArrayOfPrelevementUnitaire location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__ArrayOfPrelevementUnitaire::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__ArrayOfPrelevementUnitaire(soap, tag ? tag : "ns1:ArrayOfPrelevementUnitaire", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ArrayOfPrelevementUnitaire::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ArrayOfPrelevementUnitaire(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ArrayOfPrelevementUnitaire * SOAP_FMAC4 soap_get_ns1__ArrayOfPrelevementUnitaire(struct soap *soap, ns1__ArrayOfPrelevementUnitaire *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ArrayOfPrelevementUnitaire(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__MoulesPrelevesXml::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__MoulesPrelevesXml::Root = NULL;
	soap_default_string(soap, &this->ns1__MoulesPrelevesXml::criteria);
	soap_default_ns1__EResetMode(soap, &this->ns1__MoulesPrelevesXml::mode);
}

void ns1__MoulesPrelevesXml::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ArrayOfPrelevementUnitaire(soap, &this->ns1__MoulesPrelevesXml::Root);
	soap_serialize_string(soap, (char*const*)&this->ns1__MoulesPrelevesXml::criteria);
#endif
}

int ns1__MoulesPrelevesXml::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__MoulesPrelevesXml(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MoulesPrelevesXml(struct soap *soap, const char *tag, int id, const ns1__MoulesPrelevesXml *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__MoulesPrelevesXml), type))
		return soap->error;
	if (soap_out_PointerTons1__ArrayOfPrelevementUnitaire(soap, "Root", -1, &a->ns1__MoulesPrelevesXml::Root, ""))
		return soap->error;
	if (soap_out_string(soap, "criteria", -1, (char*const*)&a->ns1__MoulesPrelevesXml::criteria, ""))
		return soap->error;
	if (soap_out_ns1__EResetMode(soap, "mode", -1, &a->ns1__MoulesPrelevesXml::mode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__MoulesPrelevesXml::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__MoulesPrelevesXml(soap, tag, this, type);
}

SOAP_FMAC3 ns1__MoulesPrelevesXml * SOAP_FMAC4 soap_in_ns1__MoulesPrelevesXml(struct soap *soap, const char *tag, ns1__MoulesPrelevesXml *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__MoulesPrelevesXml*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__MoulesPrelevesXml, sizeof(ns1__MoulesPrelevesXml), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__MoulesPrelevesXml)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__MoulesPrelevesXml *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_Root1 = 1;
	size_t soap_flag_criteria1 = 1;
	size_t soap_flag_mode1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Root1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__ArrayOfPrelevementUnitaire(soap, "Root", &a->ns1__MoulesPrelevesXml::Root, "ns1:ArrayOfPrelevementUnitaire"))
				{	soap_flag_Root1--;
					continue;
				}
			}
			if (soap_flag_criteria1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "criteria", (char**)&a->ns1__MoulesPrelevesXml::criteria, "xsd:string"))
				{	soap_flag_criteria1--;
					continue;
				}
			}
			if (soap_flag_mode1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_ns1__EResetMode(soap, "mode", &a->ns1__MoulesPrelevesXml::mode, "ns1:EResetMode"))
				{	soap_flag_mode1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_mode1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns1__MoulesPrelevesXml *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__MoulesPrelevesXml, SOAP_TYPE_ns1__MoulesPrelevesXml, sizeof(ns1__MoulesPrelevesXml), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__MoulesPrelevesXml * SOAP_FMAC2 soap_instantiate_ns1__MoulesPrelevesXml(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__MoulesPrelevesXml(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__MoulesPrelevesXml *p;
	size_t k = sizeof(ns1__MoulesPrelevesXml);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__MoulesPrelevesXml, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__MoulesPrelevesXml);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__MoulesPrelevesXml, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__MoulesPrelevesXml location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__MoulesPrelevesXml::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__MoulesPrelevesXml(soap, tag ? tag : "ns1:MoulesPrelevesXml", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__MoulesPrelevesXml::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__MoulesPrelevesXml(soap, this, tag, type);
}

SOAP_FMAC3 ns1__MoulesPrelevesXml * SOAP_FMAC4 soap_get_ns1__MoulesPrelevesXml(struct soap *soap, ns1__MoulesPrelevesXml *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__MoulesPrelevesXml(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__PrelevementWS_USCORE1_USCORE0_USCORE9::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__PrelevementWS_USCORE1_USCORE0_USCORE9::mold = NULL;
	soap_default_string(soap, &this->ns1__PrelevementWS_USCORE1_USCORE0_USCORE9::criteria);
}

void ns1__PrelevementWS_USCORE1_USCORE0_USCORE9::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__Moule(soap, &this->ns1__PrelevementWS_USCORE1_USCORE0_USCORE9::mold);
	soap_serialize_string(soap, (char*const*)&this->ns1__PrelevementWS_USCORE1_USCORE0_USCORE9::criteria);
#endif
}

int ns1__PrelevementWS_USCORE1_USCORE0_USCORE9::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__PrelevementWS_USCORE1_USCORE0_USCORE9(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__PrelevementWS_USCORE1_USCORE0_USCORE9(struct soap *soap, const char *tag, int id, const ns1__PrelevementWS_USCORE1_USCORE0_USCORE9 *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__PrelevementWS_USCORE1_USCORE0_USCORE9), type))
		return soap->error;
	if (soap_out_PointerTons1__Moule(soap, "mold", -1, &a->ns1__PrelevementWS_USCORE1_USCORE0_USCORE9::mold, ""))
		return soap->error;
	if (soap_out_string(soap, "criteria", -1, (char*const*)&a->ns1__PrelevementWS_USCORE1_USCORE0_USCORE9::criteria, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__PrelevementWS_USCORE1_USCORE0_USCORE9::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__PrelevementWS_USCORE1_USCORE0_USCORE9(soap, tag, this, type);
}

SOAP_FMAC3 ns1__PrelevementWS_USCORE1_USCORE0_USCORE9 * SOAP_FMAC4 soap_in_ns1__PrelevementWS_USCORE1_USCORE0_USCORE9(struct soap *soap, const char *tag, ns1__PrelevementWS_USCORE1_USCORE0_USCORE9 *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__PrelevementWS_USCORE1_USCORE0_USCORE9*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__PrelevementWS_USCORE1_USCORE0_USCORE9, sizeof(ns1__PrelevementWS_USCORE1_USCORE0_USCORE9), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__PrelevementWS_USCORE1_USCORE0_USCORE9)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__PrelevementWS_USCORE1_USCORE0_USCORE9 *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_mold1 = 1;
	size_t soap_flag_criteria1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_mold1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__Moule(soap, "mold", &a->ns1__PrelevementWS_USCORE1_USCORE0_USCORE9::mold, "ns1:Moule"))
				{	soap_flag_mold1--;
					continue;
				}
			}
			if (soap_flag_criteria1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "criteria", (char**)&a->ns1__PrelevementWS_USCORE1_USCORE0_USCORE9::criteria, "xsd:string"))
				{	soap_flag_criteria1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__PrelevementWS_USCORE1_USCORE0_USCORE9 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__PrelevementWS_USCORE1_USCORE0_USCORE9, SOAP_TYPE_ns1__PrelevementWS_USCORE1_USCORE0_USCORE9, sizeof(ns1__PrelevementWS_USCORE1_USCORE0_USCORE9), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__PrelevementWS_USCORE1_USCORE0_USCORE9 * SOAP_FMAC2 soap_instantiate_ns1__PrelevementWS_USCORE1_USCORE0_USCORE9(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__PrelevementWS_USCORE1_USCORE0_USCORE9(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__PrelevementWS_USCORE1_USCORE0_USCORE9 *p;
	size_t k = sizeof(ns1__PrelevementWS_USCORE1_USCORE0_USCORE9);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__PrelevementWS_USCORE1_USCORE0_USCORE9, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__PrelevementWS_USCORE1_USCORE0_USCORE9);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__PrelevementWS_USCORE1_USCORE0_USCORE9, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__PrelevementWS_USCORE1_USCORE0_USCORE9 location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__PrelevementWS_USCORE1_USCORE0_USCORE9::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__PrelevementWS_USCORE1_USCORE0_USCORE9(soap, tag ? tag : "ns1:PrelevementWS_1_0_9", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__PrelevementWS_USCORE1_USCORE0_USCORE9::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__PrelevementWS_USCORE1_USCORE0_USCORE9(soap, this, tag, type);
}

SOAP_FMAC3 ns1__PrelevementWS_USCORE1_USCORE0_USCORE9 * SOAP_FMAC4 soap_get_ns1__PrelevementWS_USCORE1_USCORE0_USCORE9(struct soap *soap, ns1__PrelevementWS_USCORE1_USCORE0_USCORE9 *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__PrelevementWS_USCORE1_USCORE0_USCORE9(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9::__sizeRoot = 0;
	this->ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9::Root = NULL;
}

void ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (this->ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9::Root)
	{	int i;
		for (i = 0; i < (int)this->ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9::__sizeRoot; i++)
		{
			soap_serialize_PointerTons1__PrelevementWS_USCORE1_USCORE0_USCORE9(soap, this->ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9::Root + i);
		}
	}
#endif
}

int ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9(struct soap *soap, const char *tag, int id, const ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9 *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9), type))
		return soap->error;
	if (a->ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9::Root)
	{	int i;
		for (i = 0; i < (int)a->ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9::__sizeRoot; i++)
			if (soap_out_PointerTons1__PrelevementWS_USCORE1_USCORE0_USCORE9(soap, "Root", -1, a->ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9::Root + i, ""))
				return soap->error;
	}
	return soap_element_end_out(soap, tag);
}

void *ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9(soap, tag, this, type);
}

SOAP_FMAC3 ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9 * SOAP_FMAC4 soap_in_ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9(struct soap *soap, const char *tag, ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9 *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9, sizeof(ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9 *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	struct soap_blist *soap_blist_Root1 = NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "Root", 1, NULL))
			{	if (a->ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9::Root == NULL)
				{	if (soap_blist_Root1 == NULL)
						soap_blist_Root1 = soap_alloc_block(soap);
					a->ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9::Root = (ns1__PrelevementWS_USCORE1_USCORE0_USCORE9 **)soap_push_block_max(soap, soap_blist_Root1, sizeof(ns1__PrelevementWS_USCORE1_USCORE0_USCORE9 *));
					if (a->ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9::Root == NULL)
						return NULL;
					*a->ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9::Root = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerTons1__PrelevementWS_USCORE1_USCORE0_USCORE9(soap, "Root", a->ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9::Root, "ns1:PrelevementWS_1_0_9"))
				{	a->ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9::__sizeRoot++;
					a->ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9::Root = NULL;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9::Root)
			soap_pop_block(soap, soap_blist_Root1);
		if (a->ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9::__sizeRoot)
		{	a->ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9::Root = (ns1__PrelevementWS_USCORE1_USCORE0_USCORE9 **)soap_save_block(soap, soap_blist_Root1, NULL, 1);
		}
		else
		{	a->ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9::Root = NULL;
			if (soap_blist_Root1)
				soap_end_block(soap, soap_blist_Root1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9, SOAP_TYPE_ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9, sizeof(ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9 * SOAP_FMAC2 soap_instantiate_ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9 *p;
	size_t k = sizeof(ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9 location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9(soap, tag ? tag : "ns1:MoulesPrelevesXmlPourWS1_0_9", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9(soap, this, tag, type);
}

SOAP_FMAC3 ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9 * SOAP_FMAC4 soap_get_ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9(struct soap *soap, ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9 *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__RejetMoule::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->ns1__RejetMoule::nb);
}

void ns1__RejetMoule::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int ns1__RejetMoule::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__RejetMoule(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RejetMoule(struct soap *soap, const char *tag, int id, const ns1__RejetMoule *a, const char *type)
{
	soap_set_attr(soap, "nb", soap_int2s(soap, ((ns1__RejetMoule*)a)->nb), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__RejetMoule), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__RejetMoule::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__RejetMoule(soap, tag, this, type);
}

SOAP_FMAC3 ns1__RejetMoule * SOAP_FMAC4 soap_in_ns1__RejetMoule(struct soap *soap, const char *tag, ns1__RejetMoule *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__RejetMoule*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__RejetMoule, sizeof(ns1__RejetMoule), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__RejetMoule)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__RejetMoule *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2int(soap, soap_attr_value(soap, "nb", 5, 1), &((ns1__RejetMoule*)a)->nb))
		return NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__RejetMoule *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__RejetMoule, SOAP_TYPE_ns1__RejetMoule, sizeof(ns1__RejetMoule), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__RejetMoule * SOAP_FMAC2 soap_instantiate_ns1__RejetMoule(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__RejetMoule(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (soap && type && !soap_match_tag(soap, type, "ns1:RejetMouleVue"))
		return soap_instantiate_ns1__RejetMouleVue(soap, n, NULL, NULL, size);
	ns1__RejetMoule *p;
	size_t k = sizeof(ns1__RejetMoule);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__RejetMoule, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__RejetMoule);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__RejetMoule, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__RejetMoule location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__RejetMoule::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__RejetMoule(soap, tag ? tag : "ns1:RejetMoule", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__RejetMoule::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__RejetMoule(soap, this, tag, type);
}

SOAP_FMAC3 ns1__RejetMoule * SOAP_FMAC4 soap_get_ns1__RejetMoule(struct soap *soap, ns1__RejetMoule *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__RejetMoule(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__RejetMouleVue::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__RejetMoule::soap_default(soap);
	soap_default_int(soap, &this->ns1__RejetMouleVue::reason);
}

void ns1__RejetMouleVue::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->ns1__RejetMoule::soap_serialize(soap);
#endif
}

int ns1__RejetMouleVue::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__RejetMouleVue(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RejetMouleVue(struct soap *soap, const char *tag, int id, const ns1__RejetMouleVue *a, const char *type)
{
	soap_set_attr(soap, "reason", soap_int2s(soap, ((ns1__RejetMouleVue*)a)->reason), 1);
	soap_set_attr(soap, "nb", soap_int2s(soap, ((ns1__RejetMoule*)a)->nb), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__RejetMouleVue), type ? type : "ns1:RejetMouleVue"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__RejetMouleVue::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__RejetMouleVue(soap, tag, this, type);
}

SOAP_FMAC3 ns1__RejetMouleVue * SOAP_FMAC4 soap_in_ns1__RejetMouleVue(struct soap *soap, const char *tag, ns1__RejetMouleVue *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__RejetMouleVue*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__RejetMouleVue, sizeof(ns1__RejetMouleVue), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__RejetMouleVue)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__RejetMouleVue *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2int(soap, soap_attr_value(soap, "reason", 5, 1), &((ns1__RejetMouleVue*)a)->reason))
		return NULL;
	if (soap_s2int(soap, soap_attr_value(soap, "nb", 5, 1), &((ns1__RejetMoule*)a)->nb))
		return NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__RejetMouleVue *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__RejetMouleVue, SOAP_TYPE_ns1__RejetMouleVue, sizeof(ns1__RejetMouleVue), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__RejetMouleVue * SOAP_FMAC2 soap_instantiate_ns1__RejetMouleVue(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__RejetMouleVue(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__RejetMouleVue *p;
	size_t k = sizeof(ns1__RejetMouleVue);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__RejetMouleVue, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__RejetMouleVue);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__RejetMouleVue, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__RejetMouleVue location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__RejetMouleVue::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__RejetMouleVue(soap, tag ? tag : "ns1:RejetMouleVue", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__RejetMouleVue::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__RejetMouleVue(soap, this, tag, type);
}

SOAP_FMAC3 ns1__RejetMouleVue * SOAP_FMAC4 soap_get_ns1__RejetMouleVue(struct soap *soap, ns1__RejetMouleVue *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__RejetMouleVue(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__ArrayOfRejetMouleVue::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ArrayOfRejetMouleVue::__sizemold = 0;
	this->ns1__ArrayOfRejetMouleVue::mold = NULL;
}

void ns1__ArrayOfRejetMouleVue::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (this->ns1__ArrayOfRejetMouleVue::mold)
	{	int i;
		for (i = 0; i < (int)this->ns1__ArrayOfRejetMouleVue::__sizemold; i++)
		{
			soap_serialize_PointerTons1__RejetMouleVue(soap, this->ns1__ArrayOfRejetMouleVue::mold + i);
		}
	}
#endif
}

int ns1__ArrayOfRejetMouleVue::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ArrayOfRejetMouleVue(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfRejetMouleVue(struct soap *soap, const char *tag, int id, const ns1__ArrayOfRejetMouleVue *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ArrayOfRejetMouleVue), type))
		return soap->error;
	if (a->ns1__ArrayOfRejetMouleVue::mold)
	{	int i;
		for (i = 0; i < (int)a->ns1__ArrayOfRejetMouleVue::__sizemold; i++)
			if (soap_out_PointerTons1__RejetMouleVue(soap, "mold", -1, a->ns1__ArrayOfRejetMouleVue::mold + i, ""))
				return soap->error;
	}
	return soap_element_end_out(soap, tag);
}

void *ns1__ArrayOfRejetMouleVue::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__ArrayOfRejetMouleVue(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ArrayOfRejetMouleVue * SOAP_FMAC4 soap_in_ns1__ArrayOfRejetMouleVue(struct soap *soap, const char *tag, ns1__ArrayOfRejetMouleVue *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ArrayOfRejetMouleVue*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ArrayOfRejetMouleVue, sizeof(ns1__ArrayOfRejetMouleVue), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__ArrayOfRejetMouleVue)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__ArrayOfRejetMouleVue *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	struct soap_blist *soap_blist_mold1 = NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "mold", 1, NULL))
			{	if (a->ns1__ArrayOfRejetMouleVue::mold == NULL)
				{	if (soap_blist_mold1 == NULL)
						soap_blist_mold1 = soap_alloc_block(soap);
					a->ns1__ArrayOfRejetMouleVue::mold = (ns1__RejetMouleVue **)soap_push_block_max(soap, soap_blist_mold1, sizeof(ns1__RejetMouleVue *));
					if (a->ns1__ArrayOfRejetMouleVue::mold == NULL)
						return NULL;
					*a->ns1__ArrayOfRejetMouleVue::mold = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerTons1__RejetMouleVue(soap, "mold", a->ns1__ArrayOfRejetMouleVue::mold, "ns1:RejetMouleVue"))
				{	a->ns1__ArrayOfRejetMouleVue::__sizemold++;
					a->ns1__ArrayOfRejetMouleVue::mold = NULL;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->ns1__ArrayOfRejetMouleVue::mold)
			soap_pop_block(soap, soap_blist_mold1);
		if (a->ns1__ArrayOfRejetMouleVue::__sizemold)
		{	a->ns1__ArrayOfRejetMouleVue::mold = (ns1__RejetMouleVue **)soap_save_block(soap, soap_blist_mold1, NULL, 1);
		}
		else
		{	a->ns1__ArrayOfRejetMouleVue::mold = NULL;
			if (soap_blist_mold1)
				soap_end_block(soap, soap_blist_mold1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ArrayOfRejetMouleVue *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ArrayOfRejetMouleVue, SOAP_TYPE_ns1__ArrayOfRejetMouleVue, sizeof(ns1__ArrayOfRejetMouleVue), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__ArrayOfRejetMouleVue * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfRejetMouleVue(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ArrayOfRejetMouleVue(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__ArrayOfRejetMouleVue *p;
	size_t k = sizeof(ns1__ArrayOfRejetMouleVue);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__ArrayOfRejetMouleVue, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__ArrayOfRejetMouleVue);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__ArrayOfRejetMouleVue, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__ArrayOfRejetMouleVue location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__ArrayOfRejetMouleVue::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__ArrayOfRejetMouleVue(soap, tag ? tag : "ns1:ArrayOfRejetMouleVue", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ArrayOfRejetMouleVue::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ArrayOfRejetMouleVue(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ArrayOfRejetMouleVue * SOAP_FMAC4 soap_get_ns1__ArrayOfRejetMouleVue(struct soap *soap, ns1__ArrayOfRejetMouleVue *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ArrayOfRejetMouleVue(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__MoulesEjectesXml::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__MoulesEjectesXml::Root = NULL;
}

void ns1__MoulesEjectesXml::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ArrayOfRejetMouleVue(soap, &this->ns1__MoulesEjectesXml::Root);
#endif
}

int ns1__MoulesEjectesXml::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__MoulesEjectesXml(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MoulesEjectesXml(struct soap *soap, const char *tag, int id, const ns1__MoulesEjectesXml *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__MoulesEjectesXml), type))
		return soap->error;
	if (soap_out_PointerTons1__ArrayOfRejetMouleVue(soap, "Root", -1, &a->ns1__MoulesEjectesXml::Root, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__MoulesEjectesXml::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__MoulesEjectesXml(soap, tag, this, type);
}

SOAP_FMAC3 ns1__MoulesEjectesXml * SOAP_FMAC4 soap_in_ns1__MoulesEjectesXml(struct soap *soap, const char *tag, ns1__MoulesEjectesXml *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__MoulesEjectesXml*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__MoulesEjectesXml, sizeof(ns1__MoulesEjectesXml), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__MoulesEjectesXml)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__MoulesEjectesXml *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_Root1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Root1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__ArrayOfRejetMouleVue(soap, "Root", &a->ns1__MoulesEjectesXml::Root, "ns1:ArrayOfRejetMouleVue"))
				{	soap_flag_Root1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__MoulesEjectesXml *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__MoulesEjectesXml, SOAP_TYPE_ns1__MoulesEjectesXml, sizeof(ns1__MoulesEjectesXml), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__MoulesEjectesXml * SOAP_FMAC2 soap_instantiate_ns1__MoulesEjectesXml(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__MoulesEjectesXml(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__MoulesEjectesXml *p;
	size_t k = sizeof(ns1__MoulesEjectesXml);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__MoulesEjectesXml, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__MoulesEjectesXml);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__MoulesEjectesXml, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__MoulesEjectesXml location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__MoulesEjectesXml::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__MoulesEjectesXml(soap, tag ? tag : "ns1:MoulesEjectesXml", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__MoulesEjectesXml::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__MoulesEjectesXml(soap, this, tag, type);
}

SOAP_FMAC3 ns1__MoulesEjectesXml * SOAP_FMAC4 soap_get_ns1__MoulesEjectesXml(struct soap *soap, ns1__MoulesEjectesXml *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__MoulesEjectesXml(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__Moule::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->ns1__Moule::nb);
}

void ns1__Moule::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int ns1__Moule::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__Moule(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Moule(struct soap *soap, const char *tag, int id, const ns1__Moule *a, const char *type)
{
	soap_set_attr(soap, "nb", soap_int2s(soap, ((ns1__Moule*)a)->nb), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__Moule), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__Moule::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__Moule(soap, tag, this, type);
}

SOAP_FMAC3 ns1__Moule * SOAP_FMAC4 soap_in_ns1__Moule(struct soap *soap, const char *tag, ns1__Moule *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__Moule*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__Moule, sizeof(ns1__Moule), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__Moule)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__Moule *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap_s2int(soap, soap_attr_value(soap, "nb", 5, 1), &((ns1__Moule*)a)->nb))
		return NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__Moule *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__Moule, SOAP_TYPE_ns1__Moule, sizeof(ns1__Moule), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__Moule * SOAP_FMAC2 soap_instantiate_ns1__Moule(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__Moule(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__Moule *p;
	size_t k = sizeof(ns1__Moule);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__Moule, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__Moule);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__Moule, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__Moule location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__Moule::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__Moule(soap, tag ? tag : "ns1:Moule", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__Moule::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__Moule(soap, this, tag, type);
}

SOAP_FMAC3 ns1__Moule * SOAP_FMAC4 soap_get_ns1__Moule(struct soap *soap, ns1__Moule *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__Moule(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__ArrayOfMoule::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ArrayOfMoule::__sizemold = 0;
	this->ns1__ArrayOfMoule::mold = NULL;
}

void ns1__ArrayOfMoule::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (this->ns1__ArrayOfMoule::mold)
	{	int i;
		for (i = 0; i < (int)this->ns1__ArrayOfMoule::__sizemold; i++)
		{
			soap_serialize_PointerTons1__Moule(soap, this->ns1__ArrayOfMoule::mold + i);
		}
	}
#endif
}

int ns1__ArrayOfMoule::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ArrayOfMoule(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfMoule(struct soap *soap, const char *tag, int id, const ns1__ArrayOfMoule *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ArrayOfMoule), type))
		return soap->error;
	if (a->ns1__ArrayOfMoule::mold)
	{	int i;
		for (i = 0; i < (int)a->ns1__ArrayOfMoule::__sizemold; i++)
			if (soap_out_PointerTons1__Moule(soap, "mold", -1, a->ns1__ArrayOfMoule::mold + i, ""))
				return soap->error;
	}
	return soap_element_end_out(soap, tag);
}

void *ns1__ArrayOfMoule::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__ArrayOfMoule(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ArrayOfMoule * SOAP_FMAC4 soap_in_ns1__ArrayOfMoule(struct soap *soap, const char *tag, ns1__ArrayOfMoule *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ArrayOfMoule*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ArrayOfMoule, sizeof(ns1__ArrayOfMoule), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__ArrayOfMoule)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__ArrayOfMoule *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	struct soap_blist *soap_blist_mold1 = NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "mold", 1, NULL))
			{	if (a->ns1__ArrayOfMoule::mold == NULL)
				{	if (soap_blist_mold1 == NULL)
						soap_blist_mold1 = soap_alloc_block(soap);
					a->ns1__ArrayOfMoule::mold = (ns1__Moule **)soap_push_block_max(soap, soap_blist_mold1, sizeof(ns1__Moule *));
					if (a->ns1__ArrayOfMoule::mold == NULL)
						return NULL;
					*a->ns1__ArrayOfMoule::mold = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerTons1__Moule(soap, "mold", a->ns1__ArrayOfMoule::mold, "ns1:Moule"))
				{	a->ns1__ArrayOfMoule::__sizemold++;
					a->ns1__ArrayOfMoule::mold = NULL;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->ns1__ArrayOfMoule::mold)
			soap_pop_block(soap, soap_blist_mold1);
		if (a->ns1__ArrayOfMoule::__sizemold)
		{	a->ns1__ArrayOfMoule::mold = (ns1__Moule **)soap_save_block(soap, soap_blist_mold1, NULL, 1);
		}
		else
		{	a->ns1__ArrayOfMoule::mold = NULL;
			if (soap_blist_mold1)
				soap_end_block(soap, soap_blist_mold1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ArrayOfMoule *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ArrayOfMoule, SOAP_TYPE_ns1__ArrayOfMoule, sizeof(ns1__ArrayOfMoule), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__ArrayOfMoule * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfMoule(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ArrayOfMoule(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__ArrayOfMoule *p;
	size_t k = sizeof(ns1__ArrayOfMoule);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__ArrayOfMoule, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__ArrayOfMoule);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__ArrayOfMoule, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__ArrayOfMoule location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__ArrayOfMoule::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__ArrayOfMoule(soap, tag ? tag : "ns1:ArrayOfMoule", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ArrayOfMoule::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ArrayOfMoule(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ArrayOfMoule * SOAP_FMAC4 soap_get_ns1__ArrayOfMoule(struct soap *soap, ns1__ArrayOfMoule *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ArrayOfMoule(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__MountedMoldsXml::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__MountedMoldsXml::Root = NULL;
}

void ns1__MountedMoldsXml::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ArrayOfMoule(soap, &this->ns1__MountedMoldsXml::Root);
#endif
}

int ns1__MountedMoldsXml::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__MountedMoldsXml(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MountedMoldsXml(struct soap *soap, const char *tag, int id, const ns1__MountedMoldsXml *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__MountedMoldsXml), type))
		return soap->error;
	if (soap_out_PointerTons1__ArrayOfMoule(soap, "Root", -1, &a->ns1__MountedMoldsXml::Root, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__MountedMoldsXml::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__MountedMoldsXml(soap, tag, this, type);
}

SOAP_FMAC3 ns1__MountedMoldsXml * SOAP_FMAC4 soap_in_ns1__MountedMoldsXml(struct soap *soap, const char *tag, ns1__MountedMoldsXml *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__MountedMoldsXml*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__MountedMoldsXml, sizeof(ns1__MountedMoldsXml), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__MountedMoldsXml)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__MountedMoldsXml *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_Root1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Root1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__ArrayOfMoule(soap, "Root", &a->ns1__MountedMoldsXml::Root, "ns1:ArrayOfMoule"))
				{	soap_flag_Root1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__MountedMoldsXml *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__MountedMoldsXml, SOAP_TYPE_ns1__MountedMoldsXml, sizeof(ns1__MountedMoldsXml), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__MountedMoldsXml * SOAP_FMAC2 soap_instantiate_ns1__MountedMoldsXml(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__MountedMoldsXml(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__MountedMoldsXml *p;
	size_t k = sizeof(ns1__MountedMoldsXml);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__MountedMoldsXml, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__MountedMoldsXml);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__MountedMoldsXml, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__MountedMoldsXml location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__MountedMoldsXml::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__MountedMoldsXml(soap, tag ? tag : "ns1:MountedMoldsXml", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__MountedMoldsXml::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__MountedMoldsXml(soap, this, tag, type);
}

SOAP_FMAC3 ns1__MountedMoldsXml * SOAP_FMAC4 soap_get_ns1__MountedMoldsXml(struct soap *soap, ns1__MountedMoldsXml *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__MountedMoldsXml(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->faultcode);
	soap_serialize_string(soap, (char*const*)&a->faultstring);
	soap_serialize_string(soap, (char*const*)&a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Node);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode;
	soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)(void*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, (char*const*)&a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, (char*const*)&a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, (char*const*)&a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, (char*const*)&a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Fault*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in__QName(soap, "faultcode", (char**)&a->faultcode, "xsd:QName"))
				{	soap_flag_faultcode--;
					continue;
				}
			}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "faultstring", (char**)&a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "faultactor", (char**)&a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Node", (char**)&a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Role", (char**)&a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Fault *p;
	size_t k = sizeof(struct SOAP_ENV__Fault);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Fault);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Fault, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Fault location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Fault(soap, tag ? tag : "SOAP-ENV:Fault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, (char*const*)&a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Reason*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Text", (char**)&a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Reason *p;
	size_t k = sizeof(struct SOAP_ENV__Reason);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Reason);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Reason, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Reason location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_outliteral(soap, "-any", (char*const*)&a->__any, NULL))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Detail*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
			{	if ((a->fault = soap_getelement(soap, "fault", &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-any", (char**)&a->__any))
				{	soap_flag___any--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Detail *p;
	size_t k = sizeof(struct SOAP_ENV__Detail);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Detail);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Detail, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Detail location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value;
	soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)(void*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Code*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in__QName(soap, "SOAP-ENV:Value", (char**)&a->SOAP_ENV__Value, "xsd:QName"))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Code *p;
	size_t k = sizeof(struct SOAP_ENV__Code);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Code);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Code, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Code location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Header*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Header *p;
	size_t k = sizeof(struct SOAP_ENV__Header);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Header);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Header, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Header location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Header(soap, tag ? tag : "SOAP-ENV:Header", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ChangeSamples_(struct soap *soap, struct __ns1__ChangeSamples_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__ChangeSamples = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ChangeSamples_(struct soap *soap, const struct __ns1__ChangeSamples_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__ChangeSamples(soap, &a->ns1__ChangeSamples);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ChangeSamples_(struct soap *soap, const char *tag, int id, const struct __ns1__ChangeSamples_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__ChangeSamples(soap, "ns1:ChangeSamples", -1, &a->ns1__ChangeSamples, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__ChangeSamples_ * SOAP_FMAC4 soap_in___ns1__ChangeSamples_(struct soap *soap, const char *tag, struct __ns1__ChangeSamples_ *a, const char *type)
{
	size_t soap_flag_ns1__ChangeSamples = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__ChangeSamples_*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__ChangeSamples_, sizeof(struct __ns1__ChangeSamples_), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__ChangeSamples_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__ChangeSamples && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__ChangeSamples(soap, "ns1:ChangeSamples", &a->ns1__ChangeSamples, ""))
				{	soap_flag_ns1__ChangeSamples--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__ChangeSamples_ * SOAP_FMAC2 soap_instantiate___ns1__ChangeSamples_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__ChangeSamples_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__ChangeSamples_ *p;
	size_t k = sizeof(struct __ns1__ChangeSamples_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__ChangeSamples_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__ChangeSamples_);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__ChangeSamples_, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__ChangeSamples_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ChangeSamples_(struct soap *soap, const struct __ns1__ChangeSamples_ *a, const char *tag, const char *type)
{
	if (soap_out___ns1__ChangeSamples_(soap, tag ? tag : "-ns1:ChangeSamples", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__ChangeSamples_ * SOAP_FMAC4 soap_get___ns1__ChangeSamples_(struct soap *soap, struct __ns1__ChangeSamples_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__ChangeSamples_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetVersions_(struct soap *soap, struct __ns1__GetVersions_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetVersions = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetVersions_(struct soap *soap, const struct __ns1__GetVersions_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetVersions(soap, &a->ns1__GetVersions);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetVersions_(struct soap *soap, const char *tag, int id, const struct __ns1__GetVersions_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetVersions(soap, "ns1:GetVersions", -1, &a->ns1__GetVersions, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetVersions_ * SOAP_FMAC4 soap_in___ns1__GetVersions_(struct soap *soap, const char *tag, struct __ns1__GetVersions_ *a, const char *type)
{
	size_t soap_flag_ns1__GetVersions = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetVersions_*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetVersions_, sizeof(struct __ns1__GetVersions_), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetVersions_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetVersions && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__GetVersions(soap, "ns1:GetVersions", &a->ns1__GetVersions, ""))
				{	soap_flag_ns1__GetVersions--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__GetVersions_ * SOAP_FMAC2 soap_instantiate___ns1__GetVersions_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetVersions_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__GetVersions_ *p;
	size_t k = sizeof(struct __ns1__GetVersions_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__GetVersions_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__GetVersions_);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__GetVersions_, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__GetVersions_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetVersions_(struct soap *soap, const struct __ns1__GetVersions_ *a, const char *tag, const char *type)
{
	if (soap_out___ns1__GetVersions_(soap, tag ? tag : "-ns1:GetVersions", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetVersions_ * SOAP_FMAC4 soap_get___ns1__GetVersions_(struct soap *soap, struct __ns1__GetVersions_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetVersions_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ChangeMoldsInSampleTable_(struct soap *soap, struct __ns1__ChangeMoldsInSampleTable_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__ChangeMoldsInSampleTable = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ChangeMoldsInSampleTable_(struct soap *soap, const struct __ns1__ChangeMoldsInSampleTable_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__ChangeMoldsInSampleTable(soap, &a->ns1__ChangeMoldsInSampleTable);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ChangeMoldsInSampleTable_(struct soap *soap, const char *tag, int id, const struct __ns1__ChangeMoldsInSampleTable_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__ChangeMoldsInSampleTable(soap, "ns1:ChangeMoldsInSampleTable", -1, &a->ns1__ChangeMoldsInSampleTable, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__ChangeMoldsInSampleTable_ * SOAP_FMAC4 soap_in___ns1__ChangeMoldsInSampleTable_(struct soap *soap, const char *tag, struct __ns1__ChangeMoldsInSampleTable_ *a, const char *type)
{
	size_t soap_flag_ns1__ChangeMoldsInSampleTable = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__ChangeMoldsInSampleTable_*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__ChangeMoldsInSampleTable_, sizeof(struct __ns1__ChangeMoldsInSampleTable_), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__ChangeMoldsInSampleTable_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__ChangeMoldsInSampleTable && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__ChangeMoldsInSampleTable(soap, "ns1:ChangeMoldsInSampleTable", &a->ns1__ChangeMoldsInSampleTable, ""))
				{	soap_flag_ns1__ChangeMoldsInSampleTable--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__ChangeMoldsInSampleTable_ * SOAP_FMAC2 soap_instantiate___ns1__ChangeMoldsInSampleTable_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__ChangeMoldsInSampleTable_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__ChangeMoldsInSampleTable_ *p;
	size_t k = sizeof(struct __ns1__ChangeMoldsInSampleTable_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__ChangeMoldsInSampleTable_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__ChangeMoldsInSampleTable_);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__ChangeMoldsInSampleTable_, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__ChangeMoldsInSampleTable_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ChangeMoldsInSampleTable_(struct soap *soap, const struct __ns1__ChangeMoldsInSampleTable_ *a, const char *tag, const char *type)
{
	if (soap_out___ns1__ChangeMoldsInSampleTable_(soap, tag ? tag : "-ns1:ChangeMoldsInSampleTable", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__ChangeMoldsInSampleTable_ * SOAP_FMAC4 soap_get___ns1__ChangeMoldsInSampleTable_(struct soap *soap, struct __ns1__ChangeMoldsInSampleTable_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__ChangeMoldsInSampleTable_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__EraseMoldsInSampleTable_(struct soap *soap, struct __ns1__EraseMoldsInSampleTable_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__EraseMoldsInSampleTable = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__EraseMoldsInSampleTable_(struct soap *soap, const struct __ns1__EraseMoldsInSampleTable_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__EraseMoldsInSampleTable(soap, &a->ns1__EraseMoldsInSampleTable);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__EraseMoldsInSampleTable_(struct soap *soap, const char *tag, int id, const struct __ns1__EraseMoldsInSampleTable_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__EraseMoldsInSampleTable(soap, "ns1:EraseMoldsInSampleTable", -1, &a->ns1__EraseMoldsInSampleTable, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__EraseMoldsInSampleTable_ * SOAP_FMAC4 soap_in___ns1__EraseMoldsInSampleTable_(struct soap *soap, const char *tag, struct __ns1__EraseMoldsInSampleTable_ *a, const char *type)
{
	size_t soap_flag_ns1__EraseMoldsInSampleTable = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__EraseMoldsInSampleTable_*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__EraseMoldsInSampleTable_, sizeof(struct __ns1__EraseMoldsInSampleTable_), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__EraseMoldsInSampleTable_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__EraseMoldsInSampleTable && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__EraseMoldsInSampleTable(soap, "ns1:EraseMoldsInSampleTable", &a->ns1__EraseMoldsInSampleTable, ""))
				{	soap_flag_ns1__EraseMoldsInSampleTable--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__EraseMoldsInSampleTable_ * SOAP_FMAC2 soap_instantiate___ns1__EraseMoldsInSampleTable_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__EraseMoldsInSampleTable_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__EraseMoldsInSampleTable_ *p;
	size_t k = sizeof(struct __ns1__EraseMoldsInSampleTable_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__EraseMoldsInSampleTable_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__EraseMoldsInSampleTable_);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__EraseMoldsInSampleTable_, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__EraseMoldsInSampleTable_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__EraseMoldsInSampleTable_(struct soap *soap, const struct __ns1__EraseMoldsInSampleTable_ *a, const char *tag, const char *type)
{
	if (soap_out___ns1__EraseMoldsInSampleTable_(soap, tag ? tag : "-ns1:EraseMoldsInSampleTable", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__EraseMoldsInSampleTable_ * SOAP_FMAC4 soap_get___ns1__EraseMoldsInSampleTable_(struct soap *soap, struct __ns1__EraseMoldsInSampleTable_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__EraseMoldsInSampleTable_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AddEjectedMolds_(struct soap *soap, struct __ns1__AddEjectedMolds_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AddEjectedMolds = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AddEjectedMolds_(struct soap *soap, const struct __ns1__AddEjectedMolds_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__AddEjectedMolds(soap, &a->ns1__AddEjectedMolds);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AddEjectedMolds_(struct soap *soap, const char *tag, int id, const struct __ns1__AddEjectedMolds_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__AddEjectedMolds(soap, "ns1:AddEjectedMolds", -1, &a->ns1__AddEjectedMolds, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AddEjectedMolds_ * SOAP_FMAC4 soap_in___ns1__AddEjectedMolds_(struct soap *soap, const char *tag, struct __ns1__AddEjectedMolds_ *a, const char *type)
{
	size_t soap_flag_ns1__AddEjectedMolds = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__AddEjectedMolds_*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AddEjectedMolds_, sizeof(struct __ns1__AddEjectedMolds_), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AddEjectedMolds_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AddEjectedMolds && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__AddEjectedMolds(soap, "ns1:AddEjectedMolds", &a->ns1__AddEjectedMolds, ""))
				{	soap_flag_ns1__AddEjectedMolds--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__AddEjectedMolds_ * SOAP_FMAC2 soap_instantiate___ns1__AddEjectedMolds_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AddEjectedMolds_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__AddEjectedMolds_ *p;
	size_t k = sizeof(struct __ns1__AddEjectedMolds_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__AddEjectedMolds_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__AddEjectedMolds_);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__AddEjectedMolds_, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__AddEjectedMolds_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AddEjectedMolds_(struct soap *soap, const struct __ns1__AddEjectedMolds_ *a, const char *tag, const char *type)
{
	if (soap_out___ns1__AddEjectedMolds_(soap, tag ? tag : "-ns1:AddEjectedMolds", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AddEjectedMolds_ * SOAP_FMAC4 soap_get___ns1__AddEjectedMolds_(struct soap *soap, struct __ns1__AddEjectedMolds_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AddEjectedMolds_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ChangeMountedMolds_(struct soap *soap, struct __ns1__ChangeMountedMolds_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__ChangeMountedMolds = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ChangeMountedMolds_(struct soap *soap, const struct __ns1__ChangeMountedMolds_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__ChangeMountedMolds(soap, &a->ns1__ChangeMountedMolds);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ChangeMountedMolds_(struct soap *soap, const char *tag, int id, const struct __ns1__ChangeMountedMolds_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__ChangeMountedMolds(soap, "ns1:ChangeMountedMolds", -1, &a->ns1__ChangeMountedMolds, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__ChangeMountedMolds_ * SOAP_FMAC4 soap_in___ns1__ChangeMountedMolds_(struct soap *soap, const char *tag, struct __ns1__ChangeMountedMolds_ *a, const char *type)
{
	size_t soap_flag_ns1__ChangeMountedMolds = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__ChangeMountedMolds_*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__ChangeMountedMolds_, sizeof(struct __ns1__ChangeMountedMolds_), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__ChangeMountedMolds_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__ChangeMountedMolds && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__ChangeMountedMolds(soap, "ns1:ChangeMountedMolds", &a->ns1__ChangeMountedMolds, ""))
				{	soap_flag_ns1__ChangeMountedMolds--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__ChangeMountedMolds_ * SOAP_FMAC2 soap_instantiate___ns1__ChangeMountedMolds_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__ChangeMountedMolds_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__ChangeMountedMolds_ *p;
	size_t k = sizeof(struct __ns1__ChangeMountedMolds_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__ChangeMountedMolds_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__ChangeMountedMolds_);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__ChangeMountedMolds_, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__ChangeMountedMolds_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ChangeMountedMolds_(struct soap *soap, const struct __ns1__ChangeMountedMolds_ *a, const char *tag, const char *type)
{
	if (soap_out___ns1__ChangeMountedMolds_(soap, tag ? tag : "-ns1:ChangeMountedMolds", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__ChangeMountedMolds_ * SOAP_FMAC4 soap_get___ns1__ChangeMountedMolds_(struct soap *soap, struct __ns1__ChangeMountedMolds_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__ChangeMountedMolds_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetMoldsInSampleTable_(struct soap *soap, struct __ns1__GetMoldsInSampleTable_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetMoldsInSampleTable = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetMoldsInSampleTable_(struct soap *soap, const struct __ns1__GetMoldsInSampleTable_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetMoldsInSampleTable(soap, &a->ns1__GetMoldsInSampleTable);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetMoldsInSampleTable_(struct soap *soap, const char *tag, int id, const struct __ns1__GetMoldsInSampleTable_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetMoldsInSampleTable(soap, "ns1:GetMoldsInSampleTable", -1, &a->ns1__GetMoldsInSampleTable, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetMoldsInSampleTable_ * SOAP_FMAC4 soap_in___ns1__GetMoldsInSampleTable_(struct soap *soap, const char *tag, struct __ns1__GetMoldsInSampleTable_ *a, const char *type)
{
	size_t soap_flag_ns1__GetMoldsInSampleTable = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetMoldsInSampleTable_*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetMoldsInSampleTable_, sizeof(struct __ns1__GetMoldsInSampleTable_), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetMoldsInSampleTable_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetMoldsInSampleTable && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__GetMoldsInSampleTable(soap, "ns1:GetMoldsInSampleTable", &a->ns1__GetMoldsInSampleTable, ""))
				{	soap_flag_ns1__GetMoldsInSampleTable--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__GetMoldsInSampleTable_ * SOAP_FMAC2 soap_instantiate___ns1__GetMoldsInSampleTable_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetMoldsInSampleTable_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__GetMoldsInSampleTable_ *p;
	size_t k = sizeof(struct __ns1__GetMoldsInSampleTable_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__GetMoldsInSampleTable_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__GetMoldsInSampleTable_);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__GetMoldsInSampleTable_, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__GetMoldsInSampleTable_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetMoldsInSampleTable_(struct soap *soap, const struct __ns1__GetMoldsInSampleTable_ *a, const char *tag, const char *type)
{
	if (soap_out___ns1__GetMoldsInSampleTable_(soap, tag ? tag : "-ns1:GetMoldsInSampleTable", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetMoldsInSampleTable_ * SOAP_FMAC4 soap_get___ns1__GetMoldsInSampleTable_(struct soap *soap, struct __ns1__GetMoldsInSampleTable_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetMoldsInSampleTable_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__EjectedMolds_(struct soap *soap, struct __ns1__EjectedMolds_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__EjectedMolds = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__EjectedMolds_(struct soap *soap, const struct __ns1__EjectedMolds_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__EjectedMolds(soap, &a->ns1__EjectedMolds);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__EjectedMolds_(struct soap *soap, const char *tag, int id, const struct __ns1__EjectedMolds_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__EjectedMolds(soap, "ns1:EjectedMolds", -1, &a->ns1__EjectedMolds, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__EjectedMolds_ * SOAP_FMAC4 soap_in___ns1__EjectedMolds_(struct soap *soap, const char *tag, struct __ns1__EjectedMolds_ *a, const char *type)
{
	size_t soap_flag_ns1__EjectedMolds = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__EjectedMolds_*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__EjectedMolds_, sizeof(struct __ns1__EjectedMolds_), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__EjectedMolds_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__EjectedMolds && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__EjectedMolds(soap, "ns1:EjectedMolds", &a->ns1__EjectedMolds, ""))
				{	soap_flag_ns1__EjectedMolds--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__EjectedMolds_ * SOAP_FMAC2 soap_instantiate___ns1__EjectedMolds_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__EjectedMolds_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__EjectedMolds_ *p;
	size_t k = sizeof(struct __ns1__EjectedMolds_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__EjectedMolds_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__EjectedMolds_);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__EjectedMolds_, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__EjectedMolds_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__EjectedMolds_(struct soap *soap, const struct __ns1__EjectedMolds_ *a, const char *tag, const char *type)
{
	if (soap_out___ns1__EjectedMolds_(soap, tag ? tag : "-ns1:EjectedMolds", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__EjectedMolds_ * SOAP_FMAC4 soap_get___ns1__EjectedMolds_(struct soap *soap, struct __ns1__EjectedMolds_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__EjectedMolds_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ReadenMolds_(struct soap *soap, struct __ns1__ReadenMolds_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__ReadenMolds = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ReadenMolds_(struct soap *soap, const struct __ns1__ReadenMolds_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__ReadenMolds(soap, &a->ns1__ReadenMolds);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ReadenMolds_(struct soap *soap, const char *tag, int id, const struct __ns1__ReadenMolds_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__ReadenMolds(soap, "ns1:ReadenMolds", -1, &a->ns1__ReadenMolds, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__ReadenMolds_ * SOAP_FMAC4 soap_in___ns1__ReadenMolds_(struct soap *soap, const char *tag, struct __ns1__ReadenMolds_ *a, const char *type)
{
	size_t soap_flag_ns1__ReadenMolds = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__ReadenMolds_*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__ReadenMolds_, sizeof(struct __ns1__ReadenMolds_), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__ReadenMolds_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__ReadenMolds && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__ReadenMolds(soap, "ns1:ReadenMolds", &a->ns1__ReadenMolds, ""))
				{	soap_flag_ns1__ReadenMolds--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__ReadenMolds_ * SOAP_FMAC2 soap_instantiate___ns1__ReadenMolds_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__ReadenMolds_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__ReadenMolds_ *p;
	size_t k = sizeof(struct __ns1__ReadenMolds_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__ReadenMolds_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__ReadenMolds_);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__ReadenMolds_, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__ReadenMolds_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ReadenMolds_(struct soap *soap, const struct __ns1__ReadenMolds_ *a, const char *tag, const char *type)
{
	if (soap_out___ns1__ReadenMolds_(soap, tag ? tag : "-ns1:ReadenMolds", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__ReadenMolds_ * SOAP_FMAC4 soap_get___ns1__ReadenMolds_(struct soap *soap, struct __ns1__ReadenMolds_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__ReadenMolds_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CumulCounts_(struct soap *soap, struct __ns1__CumulCounts_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__CumulCounts = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CumulCounts_(struct soap *soap, const struct __ns1__CumulCounts_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__CumulCounts(soap, &a->ns1__CumulCounts);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CumulCounts_(struct soap *soap, const char *tag, int id, const struct __ns1__CumulCounts_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__CumulCounts(soap, "ns1:CumulCounts", -1, &a->ns1__CumulCounts, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__CumulCounts_ * SOAP_FMAC4 soap_in___ns1__CumulCounts_(struct soap *soap, const char *tag, struct __ns1__CumulCounts_ *a, const char *type)
{
	size_t soap_flag_ns1__CumulCounts = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__CumulCounts_*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__CumulCounts_, sizeof(struct __ns1__CumulCounts_), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__CumulCounts_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__CumulCounts && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__CumulCounts(soap, "ns1:CumulCounts", &a->ns1__CumulCounts, ""))
				{	soap_flag_ns1__CumulCounts--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__CumulCounts_ * SOAP_FMAC2 soap_instantiate___ns1__CumulCounts_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__CumulCounts_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__CumulCounts_ *p;
	size_t k = sizeof(struct __ns1__CumulCounts_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__CumulCounts_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__CumulCounts_);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__CumulCounts_, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__CumulCounts_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CumulCounts_(struct soap *soap, const struct __ns1__CumulCounts_ *a, const char *tag, const char *type)
{
	if (soap_out___ns1__CumulCounts_(soap, tag ? tag : "-ns1:CumulCounts", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__CumulCounts_ * SOAP_FMAC4 soap_get___ns1__CumulCounts_(struct soap *soap, struct __ns1__CumulCounts_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__CumulCounts_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Measures_(struct soap *soap, struct __ns1__Measures_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__Measures = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Measures_(struct soap *soap, const struct __ns1__Measures_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__Measures(soap, &a->ns1__Measures);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Measures_(struct soap *soap, const char *tag, int id, const struct __ns1__Measures_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__Measures(soap, "ns1:Measures", -1, &a->ns1__Measures, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Measures_ * SOAP_FMAC4 soap_in___ns1__Measures_(struct soap *soap, const char *tag, struct __ns1__Measures_ *a, const char *type)
{
	size_t soap_flag_ns1__Measures = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__Measures_*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__Measures_, sizeof(struct __ns1__Measures_), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__Measures_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__Measures && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__Measures(soap, "ns1:Measures", &a->ns1__Measures, ""))
				{	soap_flag_ns1__Measures--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__Measures_ * SOAP_FMAC2 soap_instantiate___ns1__Measures_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__Measures_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__Measures_ *p;
	size_t k = sizeof(struct __ns1__Measures_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__Measures_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__Measures_);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__Measures_, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__Measures_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Measures_(struct soap *soap, const struct __ns1__Measures_ *a, const char *tag, const char *type)
{
	if (soap_out___ns1__Measures_(soap, tag ? tag : "-ns1:Measures", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Measures_ * SOAP_FMAC4 soap_get___ns1__Measures_(struct soap *soap, struct __ns1__Measures_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__Measures_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__MountedMolds_(struct soap *soap, struct __ns1__MountedMolds_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__MountedMolds = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__MountedMolds_(struct soap *soap, const struct __ns1__MountedMolds_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__MountedMolds(soap, &a->ns1__MountedMolds);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__MountedMolds_(struct soap *soap, const char *tag, int id, const struct __ns1__MountedMolds_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__MountedMolds(soap, "ns1:MountedMolds", -1, &a->ns1__MountedMolds, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__MountedMolds_ * SOAP_FMAC4 soap_in___ns1__MountedMolds_(struct soap *soap, const char *tag, struct __ns1__MountedMolds_ *a, const char *type)
{
	size_t soap_flag_ns1__MountedMolds = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__MountedMolds_*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__MountedMolds_, sizeof(struct __ns1__MountedMolds_), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__MountedMolds_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__MountedMolds && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__MountedMolds(soap, "ns1:MountedMolds", &a->ns1__MountedMolds, ""))
				{	soap_flag_ns1__MountedMolds--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__MountedMolds_ * SOAP_FMAC2 soap_instantiate___ns1__MountedMolds_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__MountedMolds_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__MountedMolds_ *p;
	size_t k = sizeof(struct __ns1__MountedMolds_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__MountedMolds_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__MountedMolds_);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__MountedMolds_, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__MountedMolds_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__MountedMolds_(struct soap *soap, const struct __ns1__MountedMolds_ *a, const char *tag, const char *type)
{
	if (soap_out___ns1__MountedMolds_(soap, tag ? tag : "-ns1:MountedMolds", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__MountedMolds_ * SOAP_FMAC4 soap_get___ns1__MountedMolds_(struct soap *soap, struct __ns1__MountedMolds_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__MountedMolds_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetAlarms_(struct soap *soap, struct __ns1__GetAlarms_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetAlarms = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetAlarms_(struct soap *soap, const struct __ns1__GetAlarms_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetAlarms(soap, &a->ns1__GetAlarms);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetAlarms_(struct soap *soap, const char *tag, int id, const struct __ns1__GetAlarms_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetAlarms(soap, "ns1:GetAlarms", -1, &a->ns1__GetAlarms, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetAlarms_ * SOAP_FMAC4 soap_in___ns1__GetAlarms_(struct soap *soap, const char *tag, struct __ns1__GetAlarms_ *a, const char *type)
{
	size_t soap_flag_ns1__GetAlarms = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetAlarms_*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetAlarms_, sizeof(struct __ns1__GetAlarms_), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetAlarms_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetAlarms && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__GetAlarms(soap, "ns1:GetAlarms", &a->ns1__GetAlarms, ""))
				{	soap_flag_ns1__GetAlarms--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__GetAlarms_ * SOAP_FMAC2 soap_instantiate___ns1__GetAlarms_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetAlarms_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__GetAlarms_ *p;
	size_t k = sizeof(struct __ns1__GetAlarms_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__GetAlarms_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__GetAlarms_);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__GetAlarms_, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__GetAlarms_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetAlarms_(struct soap *soap, const struct __ns1__GetAlarms_ *a, const char *tag, const char *type)
{
	if (soap_out___ns1__GetAlarms_(soap, tag ? tag : "-ns1:GetAlarms", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetAlarms_ * SOAP_FMAC4 soap_get___ns1__GetAlarms_(struct soap *soap, struct __ns1__GetAlarms_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetAlarms_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetAlarmsSinceLastQuery_(struct soap *soap, struct __ns1__GetAlarmsSinceLastQuery_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetAlarmsSinceLastQuery = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetAlarmsSinceLastQuery_(struct soap *soap, const struct __ns1__GetAlarmsSinceLastQuery_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetAlarmsSinceLastQuery(soap, &a->ns1__GetAlarmsSinceLastQuery);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetAlarmsSinceLastQuery_(struct soap *soap, const char *tag, int id, const struct __ns1__GetAlarmsSinceLastQuery_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetAlarmsSinceLastQuery(soap, "ns1:GetAlarmsSinceLastQuery", -1, &a->ns1__GetAlarmsSinceLastQuery, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetAlarmsSinceLastQuery_ * SOAP_FMAC4 soap_in___ns1__GetAlarmsSinceLastQuery_(struct soap *soap, const char *tag, struct __ns1__GetAlarmsSinceLastQuery_ *a, const char *type)
{
	size_t soap_flag_ns1__GetAlarmsSinceLastQuery = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetAlarmsSinceLastQuery_*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetAlarmsSinceLastQuery_, sizeof(struct __ns1__GetAlarmsSinceLastQuery_), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetAlarmsSinceLastQuery_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetAlarmsSinceLastQuery && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__GetAlarmsSinceLastQuery(soap, "ns1:GetAlarmsSinceLastQuery", &a->ns1__GetAlarmsSinceLastQuery, ""))
				{	soap_flag_ns1__GetAlarmsSinceLastQuery--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__GetAlarmsSinceLastQuery_ * SOAP_FMAC2 soap_instantiate___ns1__GetAlarmsSinceLastQuery_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetAlarmsSinceLastQuery_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__GetAlarmsSinceLastQuery_ *p;
	size_t k = sizeof(struct __ns1__GetAlarmsSinceLastQuery_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__GetAlarmsSinceLastQuery_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__GetAlarmsSinceLastQuery_);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__GetAlarmsSinceLastQuery_, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__GetAlarmsSinceLastQuery_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetAlarmsSinceLastQuery_(struct soap *soap, const struct __ns1__GetAlarmsSinceLastQuery_ *a, const char *tag, const char *type)
{
	if (soap_out___ns1__GetAlarmsSinceLastQuery_(soap, tag ? tag : "-ns1:GetAlarmsSinceLastQuery", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetAlarmsSinceLastQuery_ * SOAP_FMAC4 soap_get___ns1__GetAlarmsSinceLastQuery_(struct soap *soap, struct __ns1__GetAlarmsSinceLastQuery_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetAlarmsSinceLastQuery_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Counts_(struct soap *soap, struct __ns1__Counts_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__Counts = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Counts_(struct soap *soap, const struct __ns1__Counts_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__Counts(soap, &a->ns1__Counts);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Counts_(struct soap *soap, const char *tag, int id, const struct __ns1__Counts_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__Counts(soap, "ns1:Counts", -1, &a->ns1__Counts, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Counts_ * SOAP_FMAC4 soap_in___ns1__Counts_(struct soap *soap, const char *tag, struct __ns1__Counts_ *a, const char *type)
{
	size_t soap_flag_ns1__Counts = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__Counts_*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__Counts_, sizeof(struct __ns1__Counts_), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__Counts_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__Counts && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__Counts(soap, "ns1:Counts", &a->ns1__Counts, ""))
				{	soap_flag_ns1__Counts--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__Counts_ * SOAP_FMAC2 soap_instantiate___ns1__Counts_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__Counts_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__Counts_ *p;
	size_t k = sizeof(struct __ns1__Counts_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__Counts_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__Counts_);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__Counts_, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__Counts_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Counts_(struct soap *soap, const struct __ns1__Counts_ *a, const char *tag, const char *type)
{
	if (soap_out___ns1__Counts_(soap, tag ? tag : "-ns1:Counts", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Counts_ * SOAP_FMAC4 soap_get___ns1__Counts_(struct soap *soap, struct __ns1__Counts_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__Counts_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ChangeSamples(struct soap *soap, struct __ns1__ChangeSamples *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__ChangeSamples = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ChangeSamples(struct soap *soap, const struct __ns1__ChangeSamples *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__ChangeSamples(soap, &a->ns1__ChangeSamples);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ChangeSamples(struct soap *soap, const char *tag, int id, const struct __ns1__ChangeSamples *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__ChangeSamples(soap, "ns1:ChangeSamples", -1, &a->ns1__ChangeSamples, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__ChangeSamples * SOAP_FMAC4 soap_in___ns1__ChangeSamples(struct soap *soap, const char *tag, struct __ns1__ChangeSamples *a, const char *type)
{
	size_t soap_flag_ns1__ChangeSamples = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__ChangeSamples*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__ChangeSamples, sizeof(struct __ns1__ChangeSamples), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__ChangeSamples(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__ChangeSamples && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__ChangeSamples(soap, "ns1:ChangeSamples", &a->ns1__ChangeSamples, ""))
				{	soap_flag_ns1__ChangeSamples--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__ChangeSamples * SOAP_FMAC2 soap_instantiate___ns1__ChangeSamples(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__ChangeSamples(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__ChangeSamples *p;
	size_t k = sizeof(struct __ns1__ChangeSamples);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__ChangeSamples, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__ChangeSamples);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__ChangeSamples, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__ChangeSamples location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ChangeSamples(struct soap *soap, const struct __ns1__ChangeSamples *a, const char *tag, const char *type)
{
	if (soap_out___ns1__ChangeSamples(soap, tag ? tag : "-ns1:ChangeSamples", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__ChangeSamples * SOAP_FMAC4 soap_get___ns1__ChangeSamples(struct soap *soap, struct __ns1__ChangeSamples *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__ChangeSamples(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetVersions(struct soap *soap, struct __ns1__GetVersions *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetVersions = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetVersions(struct soap *soap, const struct __ns1__GetVersions *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetVersions(soap, &a->ns1__GetVersions);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetVersions(struct soap *soap, const char *tag, int id, const struct __ns1__GetVersions *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetVersions(soap, "ns1:GetVersions", -1, &a->ns1__GetVersions, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetVersions * SOAP_FMAC4 soap_in___ns1__GetVersions(struct soap *soap, const char *tag, struct __ns1__GetVersions *a, const char *type)
{
	size_t soap_flag_ns1__GetVersions = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetVersions*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetVersions, sizeof(struct __ns1__GetVersions), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetVersions(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetVersions && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__GetVersions(soap, "ns1:GetVersions", &a->ns1__GetVersions, ""))
				{	soap_flag_ns1__GetVersions--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__GetVersions * SOAP_FMAC2 soap_instantiate___ns1__GetVersions(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetVersions(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__GetVersions *p;
	size_t k = sizeof(struct __ns1__GetVersions);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__GetVersions, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__GetVersions);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__GetVersions, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__GetVersions location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetVersions(struct soap *soap, const struct __ns1__GetVersions *a, const char *tag, const char *type)
{
	if (soap_out___ns1__GetVersions(soap, tag ? tag : "-ns1:GetVersions", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetVersions * SOAP_FMAC4 soap_get___ns1__GetVersions(struct soap *soap, struct __ns1__GetVersions *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetVersions(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ChangeMoldsInSampleTable(struct soap *soap, struct __ns1__ChangeMoldsInSampleTable *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__ChangeMoldsInSampleTable = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ChangeMoldsInSampleTable(struct soap *soap, const struct __ns1__ChangeMoldsInSampleTable *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__ChangeMoldsInSampleTable(soap, &a->ns1__ChangeMoldsInSampleTable);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ChangeMoldsInSampleTable(struct soap *soap, const char *tag, int id, const struct __ns1__ChangeMoldsInSampleTable *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__ChangeMoldsInSampleTable(soap, "ns1:ChangeMoldsInSampleTable", -1, &a->ns1__ChangeMoldsInSampleTable, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__ChangeMoldsInSampleTable * SOAP_FMAC4 soap_in___ns1__ChangeMoldsInSampleTable(struct soap *soap, const char *tag, struct __ns1__ChangeMoldsInSampleTable *a, const char *type)
{
	size_t soap_flag_ns1__ChangeMoldsInSampleTable = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__ChangeMoldsInSampleTable*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__ChangeMoldsInSampleTable, sizeof(struct __ns1__ChangeMoldsInSampleTable), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__ChangeMoldsInSampleTable(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__ChangeMoldsInSampleTable && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__ChangeMoldsInSampleTable(soap, "ns1:ChangeMoldsInSampleTable", &a->ns1__ChangeMoldsInSampleTable, ""))
				{	soap_flag_ns1__ChangeMoldsInSampleTable--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__ChangeMoldsInSampleTable * SOAP_FMAC2 soap_instantiate___ns1__ChangeMoldsInSampleTable(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__ChangeMoldsInSampleTable(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__ChangeMoldsInSampleTable *p;
	size_t k = sizeof(struct __ns1__ChangeMoldsInSampleTable);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__ChangeMoldsInSampleTable, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__ChangeMoldsInSampleTable);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__ChangeMoldsInSampleTable, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__ChangeMoldsInSampleTable location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ChangeMoldsInSampleTable(struct soap *soap, const struct __ns1__ChangeMoldsInSampleTable *a, const char *tag, const char *type)
{
	if (soap_out___ns1__ChangeMoldsInSampleTable(soap, tag ? tag : "-ns1:ChangeMoldsInSampleTable", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__ChangeMoldsInSampleTable * SOAP_FMAC4 soap_get___ns1__ChangeMoldsInSampleTable(struct soap *soap, struct __ns1__ChangeMoldsInSampleTable *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__ChangeMoldsInSampleTable(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__EraseMoldsInSampleTable(struct soap *soap, struct __ns1__EraseMoldsInSampleTable *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__EraseMoldsInSampleTable = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__EraseMoldsInSampleTable(struct soap *soap, const struct __ns1__EraseMoldsInSampleTable *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__EraseMoldsInSampleTable(soap, &a->ns1__EraseMoldsInSampleTable);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__EraseMoldsInSampleTable(struct soap *soap, const char *tag, int id, const struct __ns1__EraseMoldsInSampleTable *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__EraseMoldsInSampleTable(soap, "ns1:EraseMoldsInSampleTable", -1, &a->ns1__EraseMoldsInSampleTable, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__EraseMoldsInSampleTable * SOAP_FMAC4 soap_in___ns1__EraseMoldsInSampleTable(struct soap *soap, const char *tag, struct __ns1__EraseMoldsInSampleTable *a, const char *type)
{
	size_t soap_flag_ns1__EraseMoldsInSampleTable = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__EraseMoldsInSampleTable*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__EraseMoldsInSampleTable, sizeof(struct __ns1__EraseMoldsInSampleTable), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__EraseMoldsInSampleTable(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__EraseMoldsInSampleTable && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__EraseMoldsInSampleTable(soap, "ns1:EraseMoldsInSampleTable", &a->ns1__EraseMoldsInSampleTable, ""))
				{	soap_flag_ns1__EraseMoldsInSampleTable--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__EraseMoldsInSampleTable * SOAP_FMAC2 soap_instantiate___ns1__EraseMoldsInSampleTable(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__EraseMoldsInSampleTable(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__EraseMoldsInSampleTable *p;
	size_t k = sizeof(struct __ns1__EraseMoldsInSampleTable);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__EraseMoldsInSampleTable, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__EraseMoldsInSampleTable);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__EraseMoldsInSampleTable, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__EraseMoldsInSampleTable location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__EraseMoldsInSampleTable(struct soap *soap, const struct __ns1__EraseMoldsInSampleTable *a, const char *tag, const char *type)
{
	if (soap_out___ns1__EraseMoldsInSampleTable(soap, tag ? tag : "-ns1:EraseMoldsInSampleTable", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__EraseMoldsInSampleTable * SOAP_FMAC4 soap_get___ns1__EraseMoldsInSampleTable(struct soap *soap, struct __ns1__EraseMoldsInSampleTable *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__EraseMoldsInSampleTable(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AddEjectedMolds(struct soap *soap, struct __ns1__AddEjectedMolds *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AddEjectedMolds = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AddEjectedMolds(struct soap *soap, const struct __ns1__AddEjectedMolds *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__AddEjectedMolds(soap, &a->ns1__AddEjectedMolds);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AddEjectedMolds(struct soap *soap, const char *tag, int id, const struct __ns1__AddEjectedMolds *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__AddEjectedMolds(soap, "ns1:AddEjectedMolds", -1, &a->ns1__AddEjectedMolds, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AddEjectedMolds * SOAP_FMAC4 soap_in___ns1__AddEjectedMolds(struct soap *soap, const char *tag, struct __ns1__AddEjectedMolds *a, const char *type)
{
	size_t soap_flag_ns1__AddEjectedMolds = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__AddEjectedMolds*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AddEjectedMolds, sizeof(struct __ns1__AddEjectedMolds), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AddEjectedMolds(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AddEjectedMolds && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__AddEjectedMolds(soap, "ns1:AddEjectedMolds", &a->ns1__AddEjectedMolds, ""))
				{	soap_flag_ns1__AddEjectedMolds--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__AddEjectedMolds * SOAP_FMAC2 soap_instantiate___ns1__AddEjectedMolds(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AddEjectedMolds(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__AddEjectedMolds *p;
	size_t k = sizeof(struct __ns1__AddEjectedMolds);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__AddEjectedMolds, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__AddEjectedMolds);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__AddEjectedMolds, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__AddEjectedMolds location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AddEjectedMolds(struct soap *soap, const struct __ns1__AddEjectedMolds *a, const char *tag, const char *type)
{
	if (soap_out___ns1__AddEjectedMolds(soap, tag ? tag : "-ns1:AddEjectedMolds", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AddEjectedMolds * SOAP_FMAC4 soap_get___ns1__AddEjectedMolds(struct soap *soap, struct __ns1__AddEjectedMolds *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AddEjectedMolds(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ChangeMountedMolds(struct soap *soap, struct __ns1__ChangeMountedMolds *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__ChangeMountedMolds = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ChangeMountedMolds(struct soap *soap, const struct __ns1__ChangeMountedMolds *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__ChangeMountedMolds(soap, &a->ns1__ChangeMountedMolds);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ChangeMountedMolds(struct soap *soap, const char *tag, int id, const struct __ns1__ChangeMountedMolds *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__ChangeMountedMolds(soap, "ns1:ChangeMountedMolds", -1, &a->ns1__ChangeMountedMolds, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__ChangeMountedMolds * SOAP_FMAC4 soap_in___ns1__ChangeMountedMolds(struct soap *soap, const char *tag, struct __ns1__ChangeMountedMolds *a, const char *type)
{
	size_t soap_flag_ns1__ChangeMountedMolds = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__ChangeMountedMolds*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__ChangeMountedMolds, sizeof(struct __ns1__ChangeMountedMolds), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__ChangeMountedMolds(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__ChangeMountedMolds && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__ChangeMountedMolds(soap, "ns1:ChangeMountedMolds", &a->ns1__ChangeMountedMolds, ""))
				{	soap_flag_ns1__ChangeMountedMolds--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__ChangeMountedMolds * SOAP_FMAC2 soap_instantiate___ns1__ChangeMountedMolds(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__ChangeMountedMolds(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__ChangeMountedMolds *p;
	size_t k = sizeof(struct __ns1__ChangeMountedMolds);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__ChangeMountedMolds, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__ChangeMountedMolds);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__ChangeMountedMolds, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__ChangeMountedMolds location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ChangeMountedMolds(struct soap *soap, const struct __ns1__ChangeMountedMolds *a, const char *tag, const char *type)
{
	if (soap_out___ns1__ChangeMountedMolds(soap, tag ? tag : "-ns1:ChangeMountedMolds", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__ChangeMountedMolds * SOAP_FMAC4 soap_get___ns1__ChangeMountedMolds(struct soap *soap, struct __ns1__ChangeMountedMolds *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__ChangeMountedMolds(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetMoldsInSampleTable(struct soap *soap, struct __ns1__GetMoldsInSampleTable *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetMoldsInSampleTable = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetMoldsInSampleTable(struct soap *soap, const struct __ns1__GetMoldsInSampleTable *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetMoldsInSampleTable(soap, &a->ns1__GetMoldsInSampleTable);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetMoldsInSampleTable(struct soap *soap, const char *tag, int id, const struct __ns1__GetMoldsInSampleTable *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetMoldsInSampleTable(soap, "ns1:GetMoldsInSampleTable", -1, &a->ns1__GetMoldsInSampleTable, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetMoldsInSampleTable * SOAP_FMAC4 soap_in___ns1__GetMoldsInSampleTable(struct soap *soap, const char *tag, struct __ns1__GetMoldsInSampleTable *a, const char *type)
{
	size_t soap_flag_ns1__GetMoldsInSampleTable = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetMoldsInSampleTable*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetMoldsInSampleTable, sizeof(struct __ns1__GetMoldsInSampleTable), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetMoldsInSampleTable(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetMoldsInSampleTable && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__GetMoldsInSampleTable(soap, "ns1:GetMoldsInSampleTable", &a->ns1__GetMoldsInSampleTable, ""))
				{	soap_flag_ns1__GetMoldsInSampleTable--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__GetMoldsInSampleTable * SOAP_FMAC2 soap_instantiate___ns1__GetMoldsInSampleTable(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetMoldsInSampleTable(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__GetMoldsInSampleTable *p;
	size_t k = sizeof(struct __ns1__GetMoldsInSampleTable);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__GetMoldsInSampleTable, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__GetMoldsInSampleTable);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__GetMoldsInSampleTable, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__GetMoldsInSampleTable location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetMoldsInSampleTable(struct soap *soap, const struct __ns1__GetMoldsInSampleTable *a, const char *tag, const char *type)
{
	if (soap_out___ns1__GetMoldsInSampleTable(soap, tag ? tag : "-ns1:GetMoldsInSampleTable", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetMoldsInSampleTable * SOAP_FMAC4 soap_get___ns1__GetMoldsInSampleTable(struct soap *soap, struct __ns1__GetMoldsInSampleTable *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetMoldsInSampleTable(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__EjectedMolds(struct soap *soap, struct __ns1__EjectedMolds *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__EjectedMolds = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__EjectedMolds(struct soap *soap, const struct __ns1__EjectedMolds *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__EjectedMolds(soap, &a->ns1__EjectedMolds);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__EjectedMolds(struct soap *soap, const char *tag, int id, const struct __ns1__EjectedMolds *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__EjectedMolds(soap, "ns1:EjectedMolds", -1, &a->ns1__EjectedMolds, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__EjectedMolds * SOAP_FMAC4 soap_in___ns1__EjectedMolds(struct soap *soap, const char *tag, struct __ns1__EjectedMolds *a, const char *type)
{
	size_t soap_flag_ns1__EjectedMolds = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__EjectedMolds*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__EjectedMolds, sizeof(struct __ns1__EjectedMolds), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__EjectedMolds(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__EjectedMolds && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__EjectedMolds(soap, "ns1:EjectedMolds", &a->ns1__EjectedMolds, ""))
				{	soap_flag_ns1__EjectedMolds--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__EjectedMolds * SOAP_FMAC2 soap_instantiate___ns1__EjectedMolds(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__EjectedMolds(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__EjectedMolds *p;
	size_t k = sizeof(struct __ns1__EjectedMolds);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__EjectedMolds, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__EjectedMolds);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__EjectedMolds, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__EjectedMolds location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__EjectedMolds(struct soap *soap, const struct __ns1__EjectedMolds *a, const char *tag, const char *type)
{
	if (soap_out___ns1__EjectedMolds(soap, tag ? tag : "-ns1:EjectedMolds", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__EjectedMolds * SOAP_FMAC4 soap_get___ns1__EjectedMolds(struct soap *soap, struct __ns1__EjectedMolds *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__EjectedMolds(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ReadenMolds(struct soap *soap, struct __ns1__ReadenMolds *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__ReadenMolds = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ReadenMolds(struct soap *soap, const struct __ns1__ReadenMolds *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__ReadenMolds(soap, &a->ns1__ReadenMolds);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ReadenMolds(struct soap *soap, const char *tag, int id, const struct __ns1__ReadenMolds *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__ReadenMolds(soap, "ns1:ReadenMolds", -1, &a->ns1__ReadenMolds, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__ReadenMolds * SOAP_FMAC4 soap_in___ns1__ReadenMolds(struct soap *soap, const char *tag, struct __ns1__ReadenMolds *a, const char *type)
{
	size_t soap_flag_ns1__ReadenMolds = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__ReadenMolds*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__ReadenMolds, sizeof(struct __ns1__ReadenMolds), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__ReadenMolds(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__ReadenMolds && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__ReadenMolds(soap, "ns1:ReadenMolds", &a->ns1__ReadenMolds, ""))
				{	soap_flag_ns1__ReadenMolds--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__ReadenMolds * SOAP_FMAC2 soap_instantiate___ns1__ReadenMolds(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__ReadenMolds(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__ReadenMolds *p;
	size_t k = sizeof(struct __ns1__ReadenMolds);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__ReadenMolds, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__ReadenMolds);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__ReadenMolds, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__ReadenMolds location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ReadenMolds(struct soap *soap, const struct __ns1__ReadenMolds *a, const char *tag, const char *type)
{
	if (soap_out___ns1__ReadenMolds(soap, tag ? tag : "-ns1:ReadenMolds", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__ReadenMolds * SOAP_FMAC4 soap_get___ns1__ReadenMolds(struct soap *soap, struct __ns1__ReadenMolds *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__ReadenMolds(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CumulCounts(struct soap *soap, struct __ns1__CumulCounts *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__CumulCounts = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CumulCounts(struct soap *soap, const struct __ns1__CumulCounts *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__CumulCounts(soap, &a->ns1__CumulCounts);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CumulCounts(struct soap *soap, const char *tag, int id, const struct __ns1__CumulCounts *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__CumulCounts(soap, "ns1:CumulCounts", -1, &a->ns1__CumulCounts, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__CumulCounts * SOAP_FMAC4 soap_in___ns1__CumulCounts(struct soap *soap, const char *tag, struct __ns1__CumulCounts *a, const char *type)
{
	size_t soap_flag_ns1__CumulCounts = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__CumulCounts*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__CumulCounts, sizeof(struct __ns1__CumulCounts), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__CumulCounts(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__CumulCounts && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__CumulCounts(soap, "ns1:CumulCounts", &a->ns1__CumulCounts, ""))
				{	soap_flag_ns1__CumulCounts--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__CumulCounts * SOAP_FMAC2 soap_instantiate___ns1__CumulCounts(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__CumulCounts(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__CumulCounts *p;
	size_t k = sizeof(struct __ns1__CumulCounts);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__CumulCounts, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__CumulCounts);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__CumulCounts, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__CumulCounts location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CumulCounts(struct soap *soap, const struct __ns1__CumulCounts *a, const char *tag, const char *type)
{
	if (soap_out___ns1__CumulCounts(soap, tag ? tag : "-ns1:CumulCounts", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__CumulCounts * SOAP_FMAC4 soap_get___ns1__CumulCounts(struct soap *soap, struct __ns1__CumulCounts *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__CumulCounts(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Measures(struct soap *soap, struct __ns1__Measures *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__Measures = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Measures(struct soap *soap, const struct __ns1__Measures *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__Measures(soap, &a->ns1__Measures);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Measures(struct soap *soap, const char *tag, int id, const struct __ns1__Measures *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__Measures(soap, "ns1:Measures", -1, &a->ns1__Measures, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Measures * SOAP_FMAC4 soap_in___ns1__Measures(struct soap *soap, const char *tag, struct __ns1__Measures *a, const char *type)
{
	size_t soap_flag_ns1__Measures = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__Measures*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__Measures, sizeof(struct __ns1__Measures), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__Measures(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__Measures && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__Measures(soap, "ns1:Measures", &a->ns1__Measures, ""))
				{	soap_flag_ns1__Measures--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__Measures * SOAP_FMAC2 soap_instantiate___ns1__Measures(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__Measures(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__Measures *p;
	size_t k = sizeof(struct __ns1__Measures);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__Measures, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__Measures);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__Measures, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__Measures location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Measures(struct soap *soap, const struct __ns1__Measures *a, const char *tag, const char *type)
{
	if (soap_out___ns1__Measures(soap, tag ? tag : "-ns1:Measures", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Measures * SOAP_FMAC4 soap_get___ns1__Measures(struct soap *soap, struct __ns1__Measures *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__Measures(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__MountedMolds(struct soap *soap, struct __ns1__MountedMolds *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__MountedMolds = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__MountedMolds(struct soap *soap, const struct __ns1__MountedMolds *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__MountedMolds(soap, &a->ns1__MountedMolds);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__MountedMolds(struct soap *soap, const char *tag, int id, const struct __ns1__MountedMolds *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__MountedMolds(soap, "ns1:MountedMolds", -1, &a->ns1__MountedMolds, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__MountedMolds * SOAP_FMAC4 soap_in___ns1__MountedMolds(struct soap *soap, const char *tag, struct __ns1__MountedMolds *a, const char *type)
{
	size_t soap_flag_ns1__MountedMolds = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__MountedMolds*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__MountedMolds, sizeof(struct __ns1__MountedMolds), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__MountedMolds(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__MountedMolds && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__MountedMolds(soap, "ns1:MountedMolds", &a->ns1__MountedMolds, ""))
				{	soap_flag_ns1__MountedMolds--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__MountedMolds * SOAP_FMAC2 soap_instantiate___ns1__MountedMolds(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__MountedMolds(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__MountedMolds *p;
	size_t k = sizeof(struct __ns1__MountedMolds);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__MountedMolds, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__MountedMolds);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__MountedMolds, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__MountedMolds location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__MountedMolds(struct soap *soap, const struct __ns1__MountedMolds *a, const char *tag, const char *type)
{
	if (soap_out___ns1__MountedMolds(soap, tag ? tag : "-ns1:MountedMolds", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__MountedMolds * SOAP_FMAC4 soap_get___ns1__MountedMolds(struct soap *soap, struct __ns1__MountedMolds *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__MountedMolds(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetAlarms(struct soap *soap, struct __ns1__GetAlarms *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetAlarms = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetAlarms(struct soap *soap, const struct __ns1__GetAlarms *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetAlarms(soap, &a->ns1__GetAlarms);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetAlarms(struct soap *soap, const char *tag, int id, const struct __ns1__GetAlarms *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetAlarms(soap, "ns1:GetAlarms", -1, &a->ns1__GetAlarms, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetAlarms * SOAP_FMAC4 soap_in___ns1__GetAlarms(struct soap *soap, const char *tag, struct __ns1__GetAlarms *a, const char *type)
{
	size_t soap_flag_ns1__GetAlarms = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetAlarms*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetAlarms, sizeof(struct __ns1__GetAlarms), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetAlarms(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetAlarms && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__GetAlarms(soap, "ns1:GetAlarms", &a->ns1__GetAlarms, ""))
				{	soap_flag_ns1__GetAlarms--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__GetAlarms * SOAP_FMAC2 soap_instantiate___ns1__GetAlarms(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetAlarms(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__GetAlarms *p;
	size_t k = sizeof(struct __ns1__GetAlarms);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__GetAlarms, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__GetAlarms);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__GetAlarms, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__GetAlarms location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetAlarms(struct soap *soap, const struct __ns1__GetAlarms *a, const char *tag, const char *type)
{
	if (soap_out___ns1__GetAlarms(soap, tag ? tag : "-ns1:GetAlarms", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetAlarms * SOAP_FMAC4 soap_get___ns1__GetAlarms(struct soap *soap, struct __ns1__GetAlarms *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetAlarms(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetAlarmsSinceLastQuery(struct soap *soap, struct __ns1__GetAlarmsSinceLastQuery *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetAlarmsSinceLastQuery = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetAlarmsSinceLastQuery(struct soap *soap, const struct __ns1__GetAlarmsSinceLastQuery *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetAlarmsSinceLastQuery(soap, &a->ns1__GetAlarmsSinceLastQuery);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetAlarmsSinceLastQuery(struct soap *soap, const char *tag, int id, const struct __ns1__GetAlarmsSinceLastQuery *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetAlarmsSinceLastQuery(soap, "ns1:GetAlarmsSinceLastQuery", -1, &a->ns1__GetAlarmsSinceLastQuery, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetAlarmsSinceLastQuery * SOAP_FMAC4 soap_in___ns1__GetAlarmsSinceLastQuery(struct soap *soap, const char *tag, struct __ns1__GetAlarmsSinceLastQuery *a, const char *type)
{
	size_t soap_flag_ns1__GetAlarmsSinceLastQuery = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetAlarmsSinceLastQuery*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetAlarmsSinceLastQuery, sizeof(struct __ns1__GetAlarmsSinceLastQuery), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetAlarmsSinceLastQuery(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetAlarmsSinceLastQuery && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__GetAlarmsSinceLastQuery(soap, "ns1:GetAlarmsSinceLastQuery", &a->ns1__GetAlarmsSinceLastQuery, ""))
				{	soap_flag_ns1__GetAlarmsSinceLastQuery--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__GetAlarmsSinceLastQuery * SOAP_FMAC2 soap_instantiate___ns1__GetAlarmsSinceLastQuery(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetAlarmsSinceLastQuery(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__GetAlarmsSinceLastQuery *p;
	size_t k = sizeof(struct __ns1__GetAlarmsSinceLastQuery);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__GetAlarmsSinceLastQuery, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__GetAlarmsSinceLastQuery);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__GetAlarmsSinceLastQuery, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__GetAlarmsSinceLastQuery location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetAlarmsSinceLastQuery(struct soap *soap, const struct __ns1__GetAlarmsSinceLastQuery *a, const char *tag, const char *type)
{
	if (soap_out___ns1__GetAlarmsSinceLastQuery(soap, tag ? tag : "-ns1:GetAlarmsSinceLastQuery", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetAlarmsSinceLastQuery * SOAP_FMAC4 soap_get___ns1__GetAlarmsSinceLastQuery(struct soap *soap, struct __ns1__GetAlarmsSinceLastQuery *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetAlarmsSinceLastQuery(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Counts(struct soap *soap, struct __ns1__Counts *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__Counts = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Counts(struct soap *soap, const struct __ns1__Counts *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__Counts(soap, &a->ns1__Counts);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Counts(struct soap *soap, const char *tag, int id, const struct __ns1__Counts *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__Counts(soap, "ns1:Counts", -1, &a->ns1__Counts, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Counts * SOAP_FMAC4 soap_in___ns1__Counts(struct soap *soap, const char *tag, struct __ns1__Counts *a, const char *type)
{
	size_t soap_flag_ns1__Counts = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__Counts*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__Counts, sizeof(struct __ns1__Counts), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__Counts(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__Counts && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__Counts(soap, "ns1:Counts", &a->ns1__Counts, ""))
				{	soap_flag_ns1__Counts--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__Counts * SOAP_FMAC2 soap_instantiate___ns1__Counts(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__Counts(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__Counts *p;
	size_t k = sizeof(struct __ns1__Counts);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__Counts, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__Counts);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__Counts, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__Counts location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Counts(struct soap *soap, const struct __ns1__Counts *a, const char *tag, const char *type)
{
	if (soap_out___ns1__Counts(soap, tag ? tag : "-ns1:Counts", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Counts * SOAP_FMAC4 soap_get___ns1__Counts(struct soap *soap, struct __ns1__Counts *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__Counts(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code, &mark);
	if (id < 0)
		return soap->error;
	(void)soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ChangeSamples(struct soap *soap, _ns1__ChangeSamples *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__ChangeSamples))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ChangeSamples(struct soap *soap, const char *tag, int id, _ns1__ChangeSamples *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__ChangeSamples, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__ChangeSamples ? type : NULL);
}

SOAP_FMAC3 _ns1__ChangeSamples ** SOAP_FMAC4 soap_in_PointerTo_ns1__ChangeSamples(struct soap *soap, const char *tag, _ns1__ChangeSamples **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__ChangeSamples **)soap_malloc(soap, sizeof(_ns1__ChangeSamples *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__ChangeSamples *)soap_instantiate__ns1__ChangeSamples(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__ChangeSamples **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__ChangeSamples, sizeof(_ns1__ChangeSamples), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ChangeSamples(struct soap *soap, _ns1__ChangeSamples *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__ChangeSamples(soap, tag ? tag : "ns1:ChangeSamples", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__ChangeSamples ** SOAP_FMAC4 soap_get_PointerTo_ns1__ChangeSamples(struct soap *soap, _ns1__ChangeSamples **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__ChangeSamples(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetVersions(struct soap *soap, _ns1__GetVersions *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetVersions))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetVersions(struct soap *soap, const char *tag, int id, _ns1__GetVersions *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetVersions, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__GetVersions ? type : NULL);
}

SOAP_FMAC3 _ns1__GetVersions ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetVersions(struct soap *soap, const char *tag, _ns1__GetVersions **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetVersions **)soap_malloc(soap, sizeof(_ns1__GetVersions *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetVersions *)soap_instantiate__ns1__GetVersions(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__GetVersions **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetVersions, sizeof(_ns1__GetVersions), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetVersions(struct soap *soap, _ns1__GetVersions *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__GetVersions(soap, tag ? tag : "ns1:GetVersions", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetVersions ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetVersions(struct soap *soap, _ns1__GetVersions **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetVersions(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ChangeMoldsInSampleTable(struct soap *soap, _ns1__ChangeMoldsInSampleTable *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__ChangeMoldsInSampleTable))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ChangeMoldsInSampleTable(struct soap *soap, const char *tag, int id, _ns1__ChangeMoldsInSampleTable *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__ChangeMoldsInSampleTable, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__ChangeMoldsInSampleTable ? type : NULL);
}

SOAP_FMAC3 _ns1__ChangeMoldsInSampleTable ** SOAP_FMAC4 soap_in_PointerTo_ns1__ChangeMoldsInSampleTable(struct soap *soap, const char *tag, _ns1__ChangeMoldsInSampleTable **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__ChangeMoldsInSampleTable **)soap_malloc(soap, sizeof(_ns1__ChangeMoldsInSampleTable *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__ChangeMoldsInSampleTable *)soap_instantiate__ns1__ChangeMoldsInSampleTable(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__ChangeMoldsInSampleTable **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__ChangeMoldsInSampleTable, sizeof(_ns1__ChangeMoldsInSampleTable), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ChangeMoldsInSampleTable(struct soap *soap, _ns1__ChangeMoldsInSampleTable *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__ChangeMoldsInSampleTable(soap, tag ? tag : "ns1:ChangeMoldsInSampleTable", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__ChangeMoldsInSampleTable ** SOAP_FMAC4 soap_get_PointerTo_ns1__ChangeMoldsInSampleTable(struct soap *soap, _ns1__ChangeMoldsInSampleTable **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__ChangeMoldsInSampleTable(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__EraseMoldsInSampleTable(struct soap *soap, _ns1__EraseMoldsInSampleTable *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__EraseMoldsInSampleTable))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__EraseMoldsInSampleTable(struct soap *soap, const char *tag, int id, _ns1__EraseMoldsInSampleTable *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__EraseMoldsInSampleTable, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__EraseMoldsInSampleTable ? type : NULL);
}

SOAP_FMAC3 _ns1__EraseMoldsInSampleTable ** SOAP_FMAC4 soap_in_PointerTo_ns1__EraseMoldsInSampleTable(struct soap *soap, const char *tag, _ns1__EraseMoldsInSampleTable **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__EraseMoldsInSampleTable **)soap_malloc(soap, sizeof(_ns1__EraseMoldsInSampleTable *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__EraseMoldsInSampleTable *)soap_instantiate__ns1__EraseMoldsInSampleTable(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__EraseMoldsInSampleTable **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__EraseMoldsInSampleTable, sizeof(_ns1__EraseMoldsInSampleTable), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__EraseMoldsInSampleTable(struct soap *soap, _ns1__EraseMoldsInSampleTable *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__EraseMoldsInSampleTable(soap, tag ? tag : "ns1:EraseMoldsInSampleTable", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__EraseMoldsInSampleTable ** SOAP_FMAC4 soap_get_PointerTo_ns1__EraseMoldsInSampleTable(struct soap *soap, _ns1__EraseMoldsInSampleTable **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__EraseMoldsInSampleTable(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__AddEjectedMolds(struct soap *soap, _ns1__AddEjectedMolds *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__AddEjectedMolds))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__AddEjectedMolds(struct soap *soap, const char *tag, int id, _ns1__AddEjectedMolds *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__AddEjectedMolds, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__AddEjectedMolds ? type : NULL);
}

SOAP_FMAC3 _ns1__AddEjectedMolds ** SOAP_FMAC4 soap_in_PointerTo_ns1__AddEjectedMolds(struct soap *soap, const char *tag, _ns1__AddEjectedMolds **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__AddEjectedMolds **)soap_malloc(soap, sizeof(_ns1__AddEjectedMolds *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__AddEjectedMolds *)soap_instantiate__ns1__AddEjectedMolds(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__AddEjectedMolds **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__AddEjectedMolds, sizeof(_ns1__AddEjectedMolds), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__AddEjectedMolds(struct soap *soap, _ns1__AddEjectedMolds *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__AddEjectedMolds(soap, tag ? tag : "ns1:AddEjectedMolds", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__AddEjectedMolds ** SOAP_FMAC4 soap_get_PointerTo_ns1__AddEjectedMolds(struct soap *soap, _ns1__AddEjectedMolds **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__AddEjectedMolds(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ChangeMountedMolds(struct soap *soap, _ns1__ChangeMountedMolds *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__ChangeMountedMolds))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ChangeMountedMolds(struct soap *soap, const char *tag, int id, _ns1__ChangeMountedMolds *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__ChangeMountedMolds, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__ChangeMountedMolds ? type : NULL);
}

SOAP_FMAC3 _ns1__ChangeMountedMolds ** SOAP_FMAC4 soap_in_PointerTo_ns1__ChangeMountedMolds(struct soap *soap, const char *tag, _ns1__ChangeMountedMolds **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__ChangeMountedMolds **)soap_malloc(soap, sizeof(_ns1__ChangeMountedMolds *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__ChangeMountedMolds *)soap_instantiate__ns1__ChangeMountedMolds(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__ChangeMountedMolds **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__ChangeMountedMolds, sizeof(_ns1__ChangeMountedMolds), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ChangeMountedMolds(struct soap *soap, _ns1__ChangeMountedMolds *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__ChangeMountedMolds(soap, tag ? tag : "ns1:ChangeMountedMolds", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__ChangeMountedMolds ** SOAP_FMAC4 soap_get_PointerTo_ns1__ChangeMountedMolds(struct soap *soap, _ns1__ChangeMountedMolds **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__ChangeMountedMolds(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetMoldsInSampleTable(struct soap *soap, _ns1__GetMoldsInSampleTable *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetMoldsInSampleTable))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetMoldsInSampleTable(struct soap *soap, const char *tag, int id, _ns1__GetMoldsInSampleTable *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetMoldsInSampleTable, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__GetMoldsInSampleTable ? type : NULL);
}

SOAP_FMAC3 _ns1__GetMoldsInSampleTable ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetMoldsInSampleTable(struct soap *soap, const char *tag, _ns1__GetMoldsInSampleTable **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetMoldsInSampleTable **)soap_malloc(soap, sizeof(_ns1__GetMoldsInSampleTable *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetMoldsInSampleTable *)soap_instantiate__ns1__GetMoldsInSampleTable(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__GetMoldsInSampleTable **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetMoldsInSampleTable, sizeof(_ns1__GetMoldsInSampleTable), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetMoldsInSampleTable(struct soap *soap, _ns1__GetMoldsInSampleTable *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__GetMoldsInSampleTable(soap, tag ? tag : "ns1:GetMoldsInSampleTable", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetMoldsInSampleTable ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetMoldsInSampleTable(struct soap *soap, _ns1__GetMoldsInSampleTable **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetMoldsInSampleTable(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__EjectedMolds(struct soap *soap, _ns1__EjectedMolds *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__EjectedMolds))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__EjectedMolds(struct soap *soap, const char *tag, int id, _ns1__EjectedMolds *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__EjectedMolds, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__EjectedMolds ? type : NULL);
}

SOAP_FMAC3 _ns1__EjectedMolds ** SOAP_FMAC4 soap_in_PointerTo_ns1__EjectedMolds(struct soap *soap, const char *tag, _ns1__EjectedMolds **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__EjectedMolds **)soap_malloc(soap, sizeof(_ns1__EjectedMolds *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__EjectedMolds *)soap_instantiate__ns1__EjectedMolds(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__EjectedMolds **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__EjectedMolds, sizeof(_ns1__EjectedMolds), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__EjectedMolds(struct soap *soap, _ns1__EjectedMolds *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__EjectedMolds(soap, tag ? tag : "ns1:EjectedMolds", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__EjectedMolds ** SOAP_FMAC4 soap_get_PointerTo_ns1__EjectedMolds(struct soap *soap, _ns1__EjectedMolds **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__EjectedMolds(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ReadenMolds(struct soap *soap, _ns1__ReadenMolds *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__ReadenMolds))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ReadenMolds(struct soap *soap, const char *tag, int id, _ns1__ReadenMolds *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__ReadenMolds, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__ReadenMolds ? type : NULL);
}

SOAP_FMAC3 _ns1__ReadenMolds ** SOAP_FMAC4 soap_in_PointerTo_ns1__ReadenMolds(struct soap *soap, const char *tag, _ns1__ReadenMolds **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__ReadenMolds **)soap_malloc(soap, sizeof(_ns1__ReadenMolds *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__ReadenMolds *)soap_instantiate__ns1__ReadenMolds(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__ReadenMolds **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__ReadenMolds, sizeof(_ns1__ReadenMolds), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ReadenMolds(struct soap *soap, _ns1__ReadenMolds *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__ReadenMolds(soap, tag ? tag : "ns1:ReadenMolds", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__ReadenMolds ** SOAP_FMAC4 soap_get_PointerTo_ns1__ReadenMolds(struct soap *soap, _ns1__ReadenMolds **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__ReadenMolds(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CumulCounts(struct soap *soap, _ns1__CumulCounts *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__CumulCounts))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CumulCounts(struct soap *soap, const char *tag, int id, _ns1__CumulCounts *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__CumulCounts, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__CumulCounts ? type : NULL);
}

SOAP_FMAC3 _ns1__CumulCounts ** SOAP_FMAC4 soap_in_PointerTo_ns1__CumulCounts(struct soap *soap, const char *tag, _ns1__CumulCounts **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__CumulCounts **)soap_malloc(soap, sizeof(_ns1__CumulCounts *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__CumulCounts *)soap_instantiate__ns1__CumulCounts(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__CumulCounts **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__CumulCounts, sizeof(_ns1__CumulCounts), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CumulCounts(struct soap *soap, _ns1__CumulCounts *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__CumulCounts(soap, tag ? tag : "ns1:CumulCounts", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__CumulCounts ** SOAP_FMAC4 soap_get_PointerTo_ns1__CumulCounts(struct soap *soap, _ns1__CumulCounts **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__CumulCounts(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Measures(struct soap *soap, _ns1__Measures *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__Measures))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Measures(struct soap *soap, const char *tag, int id, _ns1__Measures *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__Measures, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__Measures ? type : NULL);
}

SOAP_FMAC3 _ns1__Measures ** SOAP_FMAC4 soap_in_PointerTo_ns1__Measures(struct soap *soap, const char *tag, _ns1__Measures **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__Measures **)soap_malloc(soap, sizeof(_ns1__Measures *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__Measures *)soap_instantiate__ns1__Measures(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__Measures **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__Measures, sizeof(_ns1__Measures), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Measures(struct soap *soap, _ns1__Measures *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__Measures(soap, tag ? tag : "ns1:Measures", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__Measures ** SOAP_FMAC4 soap_get_PointerTo_ns1__Measures(struct soap *soap, _ns1__Measures **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__Measures(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__MountedMolds(struct soap *soap, _ns1__MountedMolds *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__MountedMolds))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__MountedMolds(struct soap *soap, const char *tag, int id, _ns1__MountedMolds *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__MountedMolds, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__MountedMolds ? type : NULL);
}

SOAP_FMAC3 _ns1__MountedMolds ** SOAP_FMAC4 soap_in_PointerTo_ns1__MountedMolds(struct soap *soap, const char *tag, _ns1__MountedMolds **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__MountedMolds **)soap_malloc(soap, sizeof(_ns1__MountedMolds *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__MountedMolds *)soap_instantiate__ns1__MountedMolds(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__MountedMolds **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__MountedMolds, sizeof(_ns1__MountedMolds), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__MountedMolds(struct soap *soap, _ns1__MountedMolds *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__MountedMolds(soap, tag ? tag : "ns1:MountedMolds", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__MountedMolds ** SOAP_FMAC4 soap_get_PointerTo_ns1__MountedMolds(struct soap *soap, _ns1__MountedMolds **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__MountedMolds(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetAlarms(struct soap *soap, _ns1__GetAlarms *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetAlarms))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetAlarms(struct soap *soap, const char *tag, int id, _ns1__GetAlarms *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetAlarms, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__GetAlarms ? type : NULL);
}

SOAP_FMAC3 _ns1__GetAlarms ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetAlarms(struct soap *soap, const char *tag, _ns1__GetAlarms **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetAlarms **)soap_malloc(soap, sizeof(_ns1__GetAlarms *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetAlarms *)soap_instantiate__ns1__GetAlarms(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__GetAlarms **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetAlarms, sizeof(_ns1__GetAlarms), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetAlarms(struct soap *soap, _ns1__GetAlarms *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__GetAlarms(soap, tag ? tag : "ns1:GetAlarms", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetAlarms ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetAlarms(struct soap *soap, _ns1__GetAlarms **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetAlarms(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetAlarmsSinceLastQuery(struct soap *soap, _ns1__GetAlarmsSinceLastQuery *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetAlarmsSinceLastQuery))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetAlarmsSinceLastQuery(struct soap *soap, const char *tag, int id, _ns1__GetAlarmsSinceLastQuery *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetAlarmsSinceLastQuery, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__GetAlarmsSinceLastQuery ? type : NULL);
}

SOAP_FMAC3 _ns1__GetAlarmsSinceLastQuery ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetAlarmsSinceLastQuery(struct soap *soap, const char *tag, _ns1__GetAlarmsSinceLastQuery **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetAlarmsSinceLastQuery **)soap_malloc(soap, sizeof(_ns1__GetAlarmsSinceLastQuery *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetAlarmsSinceLastQuery *)soap_instantiate__ns1__GetAlarmsSinceLastQuery(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__GetAlarmsSinceLastQuery **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetAlarmsSinceLastQuery, sizeof(_ns1__GetAlarmsSinceLastQuery), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetAlarmsSinceLastQuery(struct soap *soap, _ns1__GetAlarmsSinceLastQuery *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__GetAlarmsSinceLastQuery(soap, tag ? tag : "ns1:GetAlarmsSinceLastQuery", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetAlarmsSinceLastQuery ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetAlarmsSinceLastQuery(struct soap *soap, _ns1__GetAlarmsSinceLastQuery **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetAlarmsSinceLastQuery(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Counts(struct soap *soap, _ns1__Counts *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__Counts))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Counts(struct soap *soap, const char *tag, int id, _ns1__Counts *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__Counts, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__Counts ? type : NULL);
}

SOAP_FMAC3 _ns1__Counts ** SOAP_FMAC4 soap_in_PointerTo_ns1__Counts(struct soap *soap, const char *tag, _ns1__Counts **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__Counts **)soap_malloc(soap, sizeof(_ns1__Counts *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__Counts *)soap_instantiate__ns1__Counts(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__Counts **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__Counts, sizeof(_ns1__Counts), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Counts(struct soap *soap, _ns1__Counts *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__Counts(soap, tag ? tag : "ns1:Counts", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__Counts ** SOAP_FMAC4 soap_get_PointerTo_ns1__Counts(struct soap *soap, _ns1__Counts **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__Counts(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ChangeSamplesResponse_ChangeSamplesResult(struct soap *soap, _ns1__ChangeSamplesResponse_ChangeSamplesResult *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__ChangeSamplesResponse_ChangeSamplesResult))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ChangeSamplesResponse_ChangeSamplesResult(struct soap *soap, const char *tag, int id, _ns1__ChangeSamplesResponse_ChangeSamplesResult *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__ChangeSamplesResponse_ChangeSamplesResult, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__ChangeSamplesResponse_ChangeSamplesResult ? type : NULL);
}

SOAP_FMAC3 _ns1__ChangeSamplesResponse_ChangeSamplesResult ** SOAP_FMAC4 soap_in_PointerTo_ns1__ChangeSamplesResponse_ChangeSamplesResult(struct soap *soap, const char *tag, _ns1__ChangeSamplesResponse_ChangeSamplesResult **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__ChangeSamplesResponse_ChangeSamplesResult **)soap_malloc(soap, sizeof(_ns1__ChangeSamplesResponse_ChangeSamplesResult *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__ChangeSamplesResponse_ChangeSamplesResult *)soap_instantiate__ns1__ChangeSamplesResponse_ChangeSamplesResult(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__ChangeSamplesResponse_ChangeSamplesResult **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__ChangeSamplesResponse_ChangeSamplesResult, sizeof(_ns1__ChangeSamplesResponse_ChangeSamplesResult), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ChangeSamplesResponse_ChangeSamplesResult(struct soap *soap, _ns1__ChangeSamplesResponse_ChangeSamplesResult *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__ChangeSamplesResponse_ChangeSamplesResult(soap, tag ? tag : "ns1:ChangeSamplesResponse-ChangeSamplesResult", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__ChangeSamplesResponse_ChangeSamplesResult ** SOAP_FMAC4 soap_get_PointerTo_ns1__ChangeSamplesResponse_ChangeSamplesResult(struct soap *soap, _ns1__ChangeSamplesResponse_ChangeSamplesResult **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__ChangeSamplesResponse_ChangeSamplesResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MoulesPrelevesXml(struct soap *soap, ns1__MoulesPrelevesXml *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__MoulesPrelevesXml))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MoulesPrelevesXml(struct soap *soap, const char *tag, int id, ns1__MoulesPrelevesXml *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__MoulesPrelevesXml, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__MoulesPrelevesXml ? type : NULL);
}

SOAP_FMAC3 ns1__MoulesPrelevesXml ** SOAP_FMAC4 soap_in_PointerTons1__MoulesPrelevesXml(struct soap *soap, const char *tag, ns1__MoulesPrelevesXml **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__MoulesPrelevesXml **)soap_malloc(soap, sizeof(ns1__MoulesPrelevesXml *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__MoulesPrelevesXml *)soap_instantiate_ns1__MoulesPrelevesXml(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__MoulesPrelevesXml **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__MoulesPrelevesXml, sizeof(ns1__MoulesPrelevesXml), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MoulesPrelevesXml(struct soap *soap, ns1__MoulesPrelevesXml *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__MoulesPrelevesXml(soap, tag ? tag : "ns1:MoulesPrelevesXml", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__MoulesPrelevesXml ** SOAP_FMAC4 soap_get_PointerTons1__MoulesPrelevesXml(struct soap *soap, ns1__MoulesPrelevesXml **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__MoulesPrelevesXml(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetVersionsResponse_GetVersionsResult(struct soap *soap, _ns1__GetVersionsResponse_GetVersionsResult *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetVersionsResponse_GetVersionsResult))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetVersionsResponse_GetVersionsResult(struct soap *soap, const char *tag, int id, _ns1__GetVersionsResponse_GetVersionsResult *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetVersionsResponse_GetVersionsResult, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__GetVersionsResponse_GetVersionsResult ? type : NULL);
}

SOAP_FMAC3 _ns1__GetVersionsResponse_GetVersionsResult ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetVersionsResponse_GetVersionsResult(struct soap *soap, const char *tag, _ns1__GetVersionsResponse_GetVersionsResult **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetVersionsResponse_GetVersionsResult **)soap_malloc(soap, sizeof(_ns1__GetVersionsResponse_GetVersionsResult *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetVersionsResponse_GetVersionsResult *)soap_instantiate__ns1__GetVersionsResponse_GetVersionsResult(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__GetVersionsResponse_GetVersionsResult **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetVersionsResponse_GetVersionsResult, sizeof(_ns1__GetVersionsResponse_GetVersionsResult), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetVersionsResponse_GetVersionsResult(struct soap *soap, _ns1__GetVersionsResponse_GetVersionsResult *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__GetVersionsResponse_GetVersionsResult(soap, tag ? tag : "ns1:GetVersionsResponse-GetVersionsResult", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetVersionsResponse_GetVersionsResult ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetVersionsResponse_GetVersionsResult(struct soap *soap, _ns1__GetVersionsResponse_GetVersionsResult **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetVersionsResponse_GetVersionsResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult(struct soap *soap, _ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult(struct soap *soap, const char *tag, int id, _ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult ? type : NULL);
}

SOAP_FMAC3 _ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult ** SOAP_FMAC4 soap_in_PointerTo_ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult(struct soap *soap, const char *tag, _ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult **)soap_malloc(soap, sizeof(_ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult *)soap_instantiate__ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult, sizeof(_ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult(struct soap *soap, _ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult(soap, tag ? tag : "ns1:ChangeMoldsInSampleTableResponse-ChangeMoldsInSampleTableResult", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult ** SOAP_FMAC4 soap_get_PointerTo_ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult(struct soap *soap, _ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9(struct soap *soap, ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9 *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9(struct soap *soap, const char *tag, int id, ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9 ? type : NULL);
}

SOAP_FMAC3 ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9 ** SOAP_FMAC4 soap_in_PointerTons1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9(struct soap *soap, const char *tag, ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9 **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9 **)soap_malloc(soap, sizeof(ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9 *)soap_instantiate_ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9, sizeof(ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9(struct soap *soap, ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9 *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9(soap, tag ? tag : "ns1:MoulesPrelevesXmlPourWS1_0_9", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9 ** SOAP_FMAC4 soap_get_PointerTons1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9(struct soap *soap, ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult(struct soap *soap, _ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult(struct soap *soap, const char *tag, int id, _ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult ? type : NULL);
}

SOAP_FMAC3 _ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult ** SOAP_FMAC4 soap_in_PointerTo_ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult(struct soap *soap, const char *tag, _ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult **)soap_malloc(soap, sizeof(_ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult *)soap_instantiate__ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult, sizeof(_ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult(struct soap *soap, _ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult(soap, tag ? tag : "ns1:EraseMoldsInSampleTableResponse-EraseMoldsInSampleTableResult", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult ** SOAP_FMAC4 soap_get_PointerTo_ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult(struct soap *soap, _ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MoulesEjectesXml(struct soap *soap, ns1__MoulesEjectesXml *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__MoulesEjectesXml))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MoulesEjectesXml(struct soap *soap, const char *tag, int id, ns1__MoulesEjectesXml *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__MoulesEjectesXml, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__MoulesEjectesXml ? type : NULL);
}

SOAP_FMAC3 ns1__MoulesEjectesXml ** SOAP_FMAC4 soap_in_PointerTons1__MoulesEjectesXml(struct soap *soap, const char *tag, ns1__MoulesEjectesXml **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__MoulesEjectesXml **)soap_malloc(soap, sizeof(ns1__MoulesEjectesXml *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__MoulesEjectesXml *)soap_instantiate_ns1__MoulesEjectesXml(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__MoulesEjectesXml **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__MoulesEjectesXml, sizeof(ns1__MoulesEjectesXml), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MoulesEjectesXml(struct soap *soap, ns1__MoulesEjectesXml *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__MoulesEjectesXml(soap, tag ? tag : "ns1:MoulesEjectesXml", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__MoulesEjectesXml ** SOAP_FMAC4 soap_get_PointerTons1__MoulesEjectesXml(struct soap *soap, ns1__MoulesEjectesXml **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__MoulesEjectesXml(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult(struct soap *soap, _ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult(struct soap *soap, const char *tag, int id, _ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult ? type : NULL);
}

SOAP_FMAC3 _ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult ** SOAP_FMAC4 soap_in_PointerTo_ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult(struct soap *soap, const char *tag, _ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult **)soap_malloc(soap, sizeof(_ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult *)soap_instantiate__ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult, sizeof(_ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult(struct soap *soap, _ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult(soap, tag ? tag : "ns1:ChangeMountedMoldsResponse-ChangeMountedMoldsResult", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult ** SOAP_FMAC4 soap_get_PointerTo_ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult(struct soap *soap, _ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MountedMoldsXml(struct soap *soap, ns1__MountedMoldsXml *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__MountedMoldsXml))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MountedMoldsXml(struct soap *soap, const char *tag, int id, ns1__MountedMoldsXml *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__MountedMoldsXml, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__MountedMoldsXml ? type : NULL);
}

SOAP_FMAC3 ns1__MountedMoldsXml ** SOAP_FMAC4 soap_in_PointerTons1__MountedMoldsXml(struct soap *soap, const char *tag, ns1__MountedMoldsXml **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__MountedMoldsXml **)soap_malloc(soap, sizeof(ns1__MountedMoldsXml *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__MountedMoldsXml *)soap_instantiate_ns1__MountedMoldsXml(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__MountedMoldsXml **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__MountedMoldsXml, sizeof(ns1__MountedMoldsXml), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MountedMoldsXml(struct soap *soap, ns1__MountedMoldsXml *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__MountedMoldsXml(soap, tag ? tag : "ns1:MountedMoldsXml", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__MountedMoldsXml ** SOAP_FMAC4 soap_get_PointerTons1__MountedMoldsXml(struct soap *soap, ns1__MountedMoldsXml **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__MountedMoldsXml(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult(struct soap *soap, _ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult(struct soap *soap, const char *tag, int id, _ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult ? type : NULL);
}

SOAP_FMAC3 _ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult(struct soap *soap, const char *tag, _ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult **)soap_malloc(soap, sizeof(_ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult *)soap_instantiate__ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult, sizeof(_ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult(struct soap *soap, _ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult(soap, tag ? tag : "ns1:GetMoldsInSampleTableResponse-GetMoldsInSampleTableResult", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult(struct soap *soap, _ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__EjectedMoldsResponse_EjectedMoldsResult(struct soap *soap, _ns1__EjectedMoldsResponse_EjectedMoldsResult *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__EjectedMoldsResponse_EjectedMoldsResult))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__EjectedMoldsResponse_EjectedMoldsResult(struct soap *soap, const char *tag, int id, _ns1__EjectedMoldsResponse_EjectedMoldsResult *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__EjectedMoldsResponse_EjectedMoldsResult, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__EjectedMoldsResponse_EjectedMoldsResult ? type : NULL);
}

SOAP_FMAC3 _ns1__EjectedMoldsResponse_EjectedMoldsResult ** SOAP_FMAC4 soap_in_PointerTo_ns1__EjectedMoldsResponse_EjectedMoldsResult(struct soap *soap, const char *tag, _ns1__EjectedMoldsResponse_EjectedMoldsResult **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__EjectedMoldsResponse_EjectedMoldsResult **)soap_malloc(soap, sizeof(_ns1__EjectedMoldsResponse_EjectedMoldsResult *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__EjectedMoldsResponse_EjectedMoldsResult *)soap_instantiate__ns1__EjectedMoldsResponse_EjectedMoldsResult(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__EjectedMoldsResponse_EjectedMoldsResult **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__EjectedMoldsResponse_EjectedMoldsResult, sizeof(_ns1__EjectedMoldsResponse_EjectedMoldsResult), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__EjectedMoldsResponse_EjectedMoldsResult(struct soap *soap, _ns1__EjectedMoldsResponse_EjectedMoldsResult *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__EjectedMoldsResponse_EjectedMoldsResult(soap, tag ? tag : "ns1:EjectedMoldsResponse-EjectedMoldsResult", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__EjectedMoldsResponse_EjectedMoldsResult ** SOAP_FMAC4 soap_get_PointerTo_ns1__EjectedMoldsResponse_EjectedMoldsResult(struct soap *soap, _ns1__EjectedMoldsResponse_EjectedMoldsResult **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__EjectedMoldsResponse_EjectedMoldsResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ReadenMoldsResponse_ReadenMoldsResult(struct soap *soap, _ns1__ReadenMoldsResponse_ReadenMoldsResult *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__ReadenMoldsResponse_ReadenMoldsResult))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ReadenMoldsResponse_ReadenMoldsResult(struct soap *soap, const char *tag, int id, _ns1__ReadenMoldsResponse_ReadenMoldsResult *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__ReadenMoldsResponse_ReadenMoldsResult, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__ReadenMoldsResponse_ReadenMoldsResult ? type : NULL);
}

SOAP_FMAC3 _ns1__ReadenMoldsResponse_ReadenMoldsResult ** SOAP_FMAC4 soap_in_PointerTo_ns1__ReadenMoldsResponse_ReadenMoldsResult(struct soap *soap, const char *tag, _ns1__ReadenMoldsResponse_ReadenMoldsResult **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__ReadenMoldsResponse_ReadenMoldsResult **)soap_malloc(soap, sizeof(_ns1__ReadenMoldsResponse_ReadenMoldsResult *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__ReadenMoldsResponse_ReadenMoldsResult *)soap_instantiate__ns1__ReadenMoldsResponse_ReadenMoldsResult(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__ReadenMoldsResponse_ReadenMoldsResult **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__ReadenMoldsResponse_ReadenMoldsResult, sizeof(_ns1__ReadenMoldsResponse_ReadenMoldsResult), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ReadenMoldsResponse_ReadenMoldsResult(struct soap *soap, _ns1__ReadenMoldsResponse_ReadenMoldsResult *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__ReadenMoldsResponse_ReadenMoldsResult(soap, tag ? tag : "ns1:ReadenMoldsResponse-ReadenMoldsResult", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__ReadenMoldsResponse_ReadenMoldsResult ** SOAP_FMAC4 soap_get_PointerTo_ns1__ReadenMoldsResponse_ReadenMoldsResult(struct soap *soap, _ns1__ReadenMoldsResponse_ReadenMoldsResult **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__ReadenMoldsResponse_ReadenMoldsResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CumulCountsResponse_CumulCountsResult(struct soap *soap, _ns1__CumulCountsResponse_CumulCountsResult *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__CumulCountsResponse_CumulCountsResult))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CumulCountsResponse_CumulCountsResult(struct soap *soap, const char *tag, int id, _ns1__CumulCountsResponse_CumulCountsResult *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__CumulCountsResponse_CumulCountsResult, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__CumulCountsResponse_CumulCountsResult ? type : NULL);
}

SOAP_FMAC3 _ns1__CumulCountsResponse_CumulCountsResult ** SOAP_FMAC4 soap_in_PointerTo_ns1__CumulCountsResponse_CumulCountsResult(struct soap *soap, const char *tag, _ns1__CumulCountsResponse_CumulCountsResult **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__CumulCountsResponse_CumulCountsResult **)soap_malloc(soap, sizeof(_ns1__CumulCountsResponse_CumulCountsResult *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__CumulCountsResponse_CumulCountsResult *)soap_instantiate__ns1__CumulCountsResponse_CumulCountsResult(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__CumulCountsResponse_CumulCountsResult **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__CumulCountsResponse_CumulCountsResult, sizeof(_ns1__CumulCountsResponse_CumulCountsResult), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CumulCountsResponse_CumulCountsResult(struct soap *soap, _ns1__CumulCountsResponse_CumulCountsResult *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__CumulCountsResponse_CumulCountsResult(soap, tag ? tag : "ns1:CumulCountsResponse-CumulCountsResult", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__CumulCountsResponse_CumulCountsResult ** SOAP_FMAC4 soap_get_PointerTo_ns1__CumulCountsResponse_CumulCountsResult(struct soap *soap, _ns1__CumulCountsResponse_CumulCountsResult **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__CumulCountsResponse_CumulCountsResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__MeasuresResponse_MeasuresResult(struct soap *soap, _ns1__MeasuresResponse_MeasuresResult *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__MeasuresResponse_MeasuresResult))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__MeasuresResponse_MeasuresResult(struct soap *soap, const char *tag, int id, _ns1__MeasuresResponse_MeasuresResult *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__MeasuresResponse_MeasuresResult, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__MeasuresResponse_MeasuresResult ? type : NULL);
}

SOAP_FMAC3 _ns1__MeasuresResponse_MeasuresResult ** SOAP_FMAC4 soap_in_PointerTo_ns1__MeasuresResponse_MeasuresResult(struct soap *soap, const char *tag, _ns1__MeasuresResponse_MeasuresResult **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__MeasuresResponse_MeasuresResult **)soap_malloc(soap, sizeof(_ns1__MeasuresResponse_MeasuresResult *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__MeasuresResponse_MeasuresResult *)soap_instantiate__ns1__MeasuresResponse_MeasuresResult(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__MeasuresResponse_MeasuresResult **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__MeasuresResponse_MeasuresResult, sizeof(_ns1__MeasuresResponse_MeasuresResult), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__MeasuresResponse_MeasuresResult(struct soap *soap, _ns1__MeasuresResponse_MeasuresResult *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__MeasuresResponse_MeasuresResult(soap, tag ? tag : "ns1:MeasuresResponse-MeasuresResult", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__MeasuresResponse_MeasuresResult ** SOAP_FMAC4 soap_get_PointerTo_ns1__MeasuresResponse_MeasuresResult(struct soap *soap, _ns1__MeasuresResponse_MeasuresResult **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__MeasuresResponse_MeasuresResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__MountedMoldsResponse_MountedMoldsResult(struct soap *soap, _ns1__MountedMoldsResponse_MountedMoldsResult *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__MountedMoldsResponse_MountedMoldsResult))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__MountedMoldsResponse_MountedMoldsResult(struct soap *soap, const char *tag, int id, _ns1__MountedMoldsResponse_MountedMoldsResult *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__MountedMoldsResponse_MountedMoldsResult, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__MountedMoldsResponse_MountedMoldsResult ? type : NULL);
}

SOAP_FMAC3 _ns1__MountedMoldsResponse_MountedMoldsResult ** SOAP_FMAC4 soap_in_PointerTo_ns1__MountedMoldsResponse_MountedMoldsResult(struct soap *soap, const char *tag, _ns1__MountedMoldsResponse_MountedMoldsResult **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__MountedMoldsResponse_MountedMoldsResult **)soap_malloc(soap, sizeof(_ns1__MountedMoldsResponse_MountedMoldsResult *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__MountedMoldsResponse_MountedMoldsResult *)soap_instantiate__ns1__MountedMoldsResponse_MountedMoldsResult(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__MountedMoldsResponse_MountedMoldsResult **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__MountedMoldsResponse_MountedMoldsResult, sizeof(_ns1__MountedMoldsResponse_MountedMoldsResult), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__MountedMoldsResponse_MountedMoldsResult(struct soap *soap, _ns1__MountedMoldsResponse_MountedMoldsResult *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__MountedMoldsResponse_MountedMoldsResult(soap, tag ? tag : "ns1:MountedMoldsResponse-MountedMoldsResult", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__MountedMoldsResponse_MountedMoldsResult ** SOAP_FMAC4 soap_get_PointerTo_ns1__MountedMoldsResponse_MountedMoldsResult(struct soap *soap, _ns1__MountedMoldsResponse_MountedMoldsResult **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__MountedMoldsResponse_MountedMoldsResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetAlarmsResponse_GetAlarmsResult(struct soap *soap, _ns1__GetAlarmsResponse_GetAlarmsResult *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetAlarmsResponse_GetAlarmsResult))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetAlarmsResponse_GetAlarmsResult(struct soap *soap, const char *tag, int id, _ns1__GetAlarmsResponse_GetAlarmsResult *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetAlarmsResponse_GetAlarmsResult, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__GetAlarmsResponse_GetAlarmsResult ? type : NULL);
}

SOAP_FMAC3 _ns1__GetAlarmsResponse_GetAlarmsResult ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetAlarmsResponse_GetAlarmsResult(struct soap *soap, const char *tag, _ns1__GetAlarmsResponse_GetAlarmsResult **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetAlarmsResponse_GetAlarmsResult **)soap_malloc(soap, sizeof(_ns1__GetAlarmsResponse_GetAlarmsResult *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetAlarmsResponse_GetAlarmsResult *)soap_instantiate__ns1__GetAlarmsResponse_GetAlarmsResult(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__GetAlarmsResponse_GetAlarmsResult **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetAlarmsResponse_GetAlarmsResult, sizeof(_ns1__GetAlarmsResponse_GetAlarmsResult), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetAlarmsResponse_GetAlarmsResult(struct soap *soap, _ns1__GetAlarmsResponse_GetAlarmsResult *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__GetAlarmsResponse_GetAlarmsResult(soap, tag ? tag : "ns1:GetAlarmsResponse-GetAlarmsResult", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetAlarmsResponse_GetAlarmsResult ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetAlarmsResponse_GetAlarmsResult(struct soap *soap, _ns1__GetAlarmsResponse_GetAlarmsResult **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetAlarmsResponse_GetAlarmsResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult(struct soap *soap, _ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult(struct soap *soap, const char *tag, int id, _ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult ? type : NULL);
}

SOAP_FMAC3 _ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult(struct soap *soap, const char *tag, _ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult **)soap_malloc(soap, sizeof(_ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult *)soap_instantiate__ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult, sizeof(_ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult(struct soap *soap, _ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult(soap, tag ? tag : "ns1:GetAlarmsSinceLastQueryResponse-GetAlarmsSinceLastQueryResult", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult(struct soap *soap, _ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CountsResponse_CountsResult(struct soap *soap, _ns1__CountsResponse_CountsResult *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__CountsResponse_CountsResult))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CountsResponse_CountsResult(struct soap *soap, const char *tag, int id, _ns1__CountsResponse_CountsResult *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__CountsResponse_CountsResult, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__CountsResponse_CountsResult ? type : NULL);
}

SOAP_FMAC3 _ns1__CountsResponse_CountsResult ** SOAP_FMAC4 soap_in_PointerTo_ns1__CountsResponse_CountsResult(struct soap *soap, const char *tag, _ns1__CountsResponse_CountsResult **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__CountsResponse_CountsResult **)soap_malloc(soap, sizeof(_ns1__CountsResponse_CountsResult *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__CountsResponse_CountsResult *)soap_instantiate__ns1__CountsResponse_CountsResult(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__CountsResponse_CountsResult **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__CountsResponse_CountsResult, sizeof(_ns1__CountsResponse_CountsResult), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CountsResponse_CountsResult(struct soap *soap, _ns1__CountsResponse_CountsResult *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__CountsResponse_CountsResult(soap, tag ? tag : "ns1:CountsResponse-CountsResult", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__CountsResponse_CountsResult ** SOAP_FMAC4 soap_get_PointerTo_ns1__CountsResponse_CountsResult(struct soap *soap, _ns1__CountsResponse_CountsResult **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__CountsResponse_CountsResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__PrelevementUnitaire(struct soap *soap, ns1__PrelevementUnitaire **const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_PointerTons1__PrelevementUnitaire))
		soap_serialize_PointerTons1__PrelevementUnitaire(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__PrelevementUnitaire(struct soap *soap, const char *tag, int id, ns1__PrelevementUnitaire **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PointerTons1__PrelevementUnitaire, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_PointerTons1__PrelevementUnitaire(soap, tag, id, *a, type);
}

SOAP_FMAC3 ns1__PrelevementUnitaire *** SOAP_FMAC4 soap_in_PointerToPointerTons1__PrelevementUnitaire(struct soap *soap, const char *tag, ns1__PrelevementUnitaire ***a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__PrelevementUnitaire ***)soap_malloc(soap, sizeof(ns1__PrelevementUnitaire **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerTons1__PrelevementUnitaire(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (ns1__PrelevementUnitaire ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__PrelevementUnitaire, sizeof(ns1__PrelevementUnitaire), 1, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__PrelevementUnitaire(struct soap *soap, ns1__PrelevementUnitaire **const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToPointerTons1__PrelevementUnitaire(soap, tag ? tag : "ns1:PrelevementUnitaire", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__PrelevementUnitaire *** SOAP_FMAC4 soap_get_PointerToPointerTons1__PrelevementUnitaire(struct soap *soap, ns1__PrelevementUnitaire ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerTons1__PrelevementUnitaire(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__PrelevementUnitaire(struct soap *soap, ns1__PrelevementUnitaire *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__PrelevementUnitaire))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__PrelevementUnitaire(struct soap *soap, const char *tag, int id, ns1__PrelevementUnitaire *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__PrelevementUnitaire, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__PrelevementUnitaire ? type : NULL);
}

SOAP_FMAC3 ns1__PrelevementUnitaire ** SOAP_FMAC4 soap_in_PointerTons1__PrelevementUnitaire(struct soap *soap, const char *tag, ns1__PrelevementUnitaire **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__PrelevementUnitaire **)soap_malloc(soap, sizeof(ns1__PrelevementUnitaire *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__PrelevementUnitaire *)soap_instantiate_ns1__PrelevementUnitaire(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__PrelevementUnitaire **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__PrelevementUnitaire, sizeof(ns1__PrelevementUnitaire), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__PrelevementUnitaire(struct soap *soap, ns1__PrelevementUnitaire *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__PrelevementUnitaire(soap, tag ? tag : "ns1:PrelevementUnitaire", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__PrelevementUnitaire ** SOAP_FMAC4 soap_get_PointerTons1__PrelevementUnitaire(struct soap *soap, ns1__PrelevementUnitaire **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__PrelevementUnitaire(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfPrelevementUnitaire(struct soap *soap, ns1__ArrayOfPrelevementUnitaire *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ArrayOfPrelevementUnitaire))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfPrelevementUnitaire(struct soap *soap, const char *tag, int id, ns1__ArrayOfPrelevementUnitaire *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ArrayOfPrelevementUnitaire, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__ArrayOfPrelevementUnitaire ? type : NULL);
}

SOAP_FMAC3 ns1__ArrayOfPrelevementUnitaire ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfPrelevementUnitaire(struct soap *soap, const char *tag, ns1__ArrayOfPrelevementUnitaire **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ArrayOfPrelevementUnitaire **)soap_malloc(soap, sizeof(ns1__ArrayOfPrelevementUnitaire *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ArrayOfPrelevementUnitaire *)soap_instantiate_ns1__ArrayOfPrelevementUnitaire(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__ArrayOfPrelevementUnitaire **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ArrayOfPrelevementUnitaire, sizeof(ns1__ArrayOfPrelevementUnitaire), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfPrelevementUnitaire(struct soap *soap, ns1__ArrayOfPrelevementUnitaire *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__ArrayOfPrelevementUnitaire(soap, tag ? tag : "ns1:ArrayOfPrelevementUnitaire", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ArrayOfPrelevementUnitaire ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfPrelevementUnitaire(struct soap *soap, ns1__ArrayOfPrelevementUnitaire **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ArrayOfPrelevementUnitaire(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__PrelevementWS_USCORE1_USCORE0_USCORE9(struct soap *soap, ns1__PrelevementWS_USCORE1_USCORE0_USCORE9 **const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_PointerTons1__PrelevementWS_USCORE1_USCORE0_USCORE9))
		soap_serialize_PointerTons1__PrelevementWS_USCORE1_USCORE0_USCORE9(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__PrelevementWS_USCORE1_USCORE0_USCORE9(struct soap *soap, const char *tag, int id, ns1__PrelevementWS_USCORE1_USCORE0_USCORE9 **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PointerTons1__PrelevementWS_USCORE1_USCORE0_USCORE9, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_PointerTons1__PrelevementWS_USCORE1_USCORE0_USCORE9(soap, tag, id, *a, type);
}

SOAP_FMAC3 ns1__PrelevementWS_USCORE1_USCORE0_USCORE9 *** SOAP_FMAC4 soap_in_PointerToPointerTons1__PrelevementWS_USCORE1_USCORE0_USCORE9(struct soap *soap, const char *tag, ns1__PrelevementWS_USCORE1_USCORE0_USCORE9 ***a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__PrelevementWS_USCORE1_USCORE0_USCORE9 ***)soap_malloc(soap, sizeof(ns1__PrelevementWS_USCORE1_USCORE0_USCORE9 **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerTons1__PrelevementWS_USCORE1_USCORE0_USCORE9(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (ns1__PrelevementWS_USCORE1_USCORE0_USCORE9 ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__PrelevementWS_USCORE1_USCORE0_USCORE9, sizeof(ns1__PrelevementWS_USCORE1_USCORE0_USCORE9), 1, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__PrelevementWS_USCORE1_USCORE0_USCORE9(struct soap *soap, ns1__PrelevementWS_USCORE1_USCORE0_USCORE9 **const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToPointerTons1__PrelevementWS_USCORE1_USCORE0_USCORE9(soap, tag ? tag : "ns1:PrelevementWS_1_0_9", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__PrelevementWS_USCORE1_USCORE0_USCORE9 *** SOAP_FMAC4 soap_get_PointerToPointerTons1__PrelevementWS_USCORE1_USCORE0_USCORE9(struct soap *soap, ns1__PrelevementWS_USCORE1_USCORE0_USCORE9 ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerTons1__PrelevementWS_USCORE1_USCORE0_USCORE9(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__PrelevementWS_USCORE1_USCORE0_USCORE9(struct soap *soap, ns1__PrelevementWS_USCORE1_USCORE0_USCORE9 *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__PrelevementWS_USCORE1_USCORE0_USCORE9))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__PrelevementWS_USCORE1_USCORE0_USCORE9(struct soap *soap, const char *tag, int id, ns1__PrelevementWS_USCORE1_USCORE0_USCORE9 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__PrelevementWS_USCORE1_USCORE0_USCORE9, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__PrelevementWS_USCORE1_USCORE0_USCORE9 ? type : NULL);
}

SOAP_FMAC3 ns1__PrelevementWS_USCORE1_USCORE0_USCORE9 ** SOAP_FMAC4 soap_in_PointerTons1__PrelevementWS_USCORE1_USCORE0_USCORE9(struct soap *soap, const char *tag, ns1__PrelevementWS_USCORE1_USCORE0_USCORE9 **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__PrelevementWS_USCORE1_USCORE0_USCORE9 **)soap_malloc(soap, sizeof(ns1__PrelevementWS_USCORE1_USCORE0_USCORE9 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__PrelevementWS_USCORE1_USCORE0_USCORE9 *)soap_instantiate_ns1__PrelevementWS_USCORE1_USCORE0_USCORE9(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__PrelevementWS_USCORE1_USCORE0_USCORE9 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__PrelevementWS_USCORE1_USCORE0_USCORE9, sizeof(ns1__PrelevementWS_USCORE1_USCORE0_USCORE9), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__PrelevementWS_USCORE1_USCORE0_USCORE9(struct soap *soap, ns1__PrelevementWS_USCORE1_USCORE0_USCORE9 *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__PrelevementWS_USCORE1_USCORE0_USCORE9(soap, tag ? tag : "ns1:PrelevementWS_1_0_9", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__PrelevementWS_USCORE1_USCORE0_USCORE9 ** SOAP_FMAC4 soap_get_PointerTons1__PrelevementWS_USCORE1_USCORE0_USCORE9(struct soap *soap, ns1__PrelevementWS_USCORE1_USCORE0_USCORE9 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__PrelevementWS_USCORE1_USCORE0_USCORE9(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__RejetMouleVue(struct soap *soap, ns1__RejetMouleVue **const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_PointerTons1__RejetMouleVue))
		soap_serialize_PointerTons1__RejetMouleVue(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__RejetMouleVue(struct soap *soap, const char *tag, int id, ns1__RejetMouleVue **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PointerTons1__RejetMouleVue, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_PointerTons1__RejetMouleVue(soap, tag, id, *a, type);
}

SOAP_FMAC3 ns1__RejetMouleVue *** SOAP_FMAC4 soap_in_PointerToPointerTons1__RejetMouleVue(struct soap *soap, const char *tag, ns1__RejetMouleVue ***a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__RejetMouleVue ***)soap_malloc(soap, sizeof(ns1__RejetMouleVue **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerTons1__RejetMouleVue(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (ns1__RejetMouleVue ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__RejetMouleVue, sizeof(ns1__RejetMouleVue), 1, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__RejetMouleVue(struct soap *soap, ns1__RejetMouleVue **const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToPointerTons1__RejetMouleVue(soap, tag ? tag : "ns1:RejetMouleVue", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__RejetMouleVue *** SOAP_FMAC4 soap_get_PointerToPointerTons1__RejetMouleVue(struct soap *soap, ns1__RejetMouleVue ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerTons1__RejetMouleVue(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__RejetMouleVue(struct soap *soap, ns1__RejetMouleVue *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__RejetMouleVue))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__RejetMouleVue(struct soap *soap, const char *tag, int id, ns1__RejetMouleVue *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__RejetMouleVue, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__RejetMouleVue ? type : NULL);
}

SOAP_FMAC3 ns1__RejetMouleVue ** SOAP_FMAC4 soap_in_PointerTons1__RejetMouleVue(struct soap *soap, const char *tag, ns1__RejetMouleVue **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__RejetMouleVue **)soap_malloc(soap, sizeof(ns1__RejetMouleVue *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__RejetMouleVue *)soap_instantiate_ns1__RejetMouleVue(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__RejetMouleVue **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__RejetMouleVue, sizeof(ns1__RejetMouleVue), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__RejetMouleVue(struct soap *soap, ns1__RejetMouleVue *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__RejetMouleVue(soap, tag ? tag : "ns1:RejetMouleVue", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__RejetMouleVue ** SOAP_FMAC4 soap_get_PointerTons1__RejetMouleVue(struct soap *soap, ns1__RejetMouleVue **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__RejetMouleVue(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfRejetMouleVue(struct soap *soap, ns1__ArrayOfRejetMouleVue *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ArrayOfRejetMouleVue))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfRejetMouleVue(struct soap *soap, const char *tag, int id, ns1__ArrayOfRejetMouleVue *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ArrayOfRejetMouleVue, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__ArrayOfRejetMouleVue ? type : NULL);
}

SOAP_FMAC3 ns1__ArrayOfRejetMouleVue ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfRejetMouleVue(struct soap *soap, const char *tag, ns1__ArrayOfRejetMouleVue **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ArrayOfRejetMouleVue **)soap_malloc(soap, sizeof(ns1__ArrayOfRejetMouleVue *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ArrayOfRejetMouleVue *)soap_instantiate_ns1__ArrayOfRejetMouleVue(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__ArrayOfRejetMouleVue **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ArrayOfRejetMouleVue, sizeof(ns1__ArrayOfRejetMouleVue), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfRejetMouleVue(struct soap *soap, ns1__ArrayOfRejetMouleVue *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__ArrayOfRejetMouleVue(soap, tag ? tag : "ns1:ArrayOfRejetMouleVue", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ArrayOfRejetMouleVue ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfRejetMouleVue(struct soap *soap, ns1__ArrayOfRejetMouleVue **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ArrayOfRejetMouleVue(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__Moule(struct soap *soap, ns1__Moule **const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_PointerTons1__Moule))
		soap_serialize_PointerTons1__Moule(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__Moule(struct soap *soap, const char *tag, int id, ns1__Moule **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PointerTons1__Moule, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_PointerTons1__Moule(soap, tag, id, *a, type);
}

SOAP_FMAC3 ns1__Moule *** SOAP_FMAC4 soap_in_PointerToPointerTons1__Moule(struct soap *soap, const char *tag, ns1__Moule ***a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__Moule ***)soap_malloc(soap, sizeof(ns1__Moule **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerTons1__Moule(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (ns1__Moule ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__Moule, sizeof(ns1__Moule), 1, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__Moule(struct soap *soap, ns1__Moule **const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToPointerTons1__Moule(soap, tag ? tag : "ns1:Moule", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__Moule *** SOAP_FMAC4 soap_get_PointerToPointerTons1__Moule(struct soap *soap, ns1__Moule ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerTons1__Moule(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Moule(struct soap *soap, ns1__Moule *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__Moule))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Moule(struct soap *soap, const char *tag, int id, ns1__Moule *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__Moule, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__Moule ? type : NULL);
}

SOAP_FMAC3 ns1__Moule ** SOAP_FMAC4 soap_in_PointerTons1__Moule(struct soap *soap, const char *tag, ns1__Moule **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__Moule **)soap_malloc(soap, sizeof(ns1__Moule *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__Moule *)soap_instantiate_ns1__Moule(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__Moule **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__Moule, sizeof(ns1__Moule), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Moule(struct soap *soap, ns1__Moule *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__Moule(soap, tag ? tag : "ns1:Moule", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__Moule ** SOAP_FMAC4 soap_get_PointerTons1__Moule(struct soap *soap, ns1__Moule **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__Moule(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfMoule(struct soap *soap, ns1__ArrayOfMoule *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ArrayOfMoule))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfMoule(struct soap *soap, const char *tag, int id, ns1__ArrayOfMoule *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ArrayOfMoule, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__ArrayOfMoule ? type : NULL);
}

SOAP_FMAC3 ns1__ArrayOfMoule ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfMoule(struct soap *soap, const char *tag, ns1__ArrayOfMoule **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ArrayOfMoule **)soap_malloc(soap, sizeof(ns1__ArrayOfMoule *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ArrayOfMoule *)soap_instantiate_ns1__ArrayOfMoule(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__ArrayOfMoule **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ArrayOfMoule, sizeof(ns1__ArrayOfMoule), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfMoule(struct soap *soap, ns1__ArrayOfMoule *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__ArrayOfMoule(soap, tag ? tag : "ns1:ArrayOfMoule", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ArrayOfMoule ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfMoule(struct soap *soap, ns1__ArrayOfMoule **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ArrayOfMoule(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out__QName(soap, tag ? tag : "QName", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n)
{
	char * *a = static_cast<char * *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char *)));
	for (char * *p = a; p && n--; ++p)
		soap_default_string(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out_string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
