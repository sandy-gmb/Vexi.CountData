/* soapStub.h
   Generated by gSOAP 2.8.29 for service.h

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#define SOAP_NAMESPACE_OF_ns1	"http://www.tiama-inspection.com/"

#ifndef soapStub_H
#define soapStub_H
#include "stdsoap2.h"
#if GSOAP_VERSION != 20829
# error "GSOAP VERSION 20829 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Enumeration Types                                                          *
 *                                                                            *
\******************************************************************************/


/* service.h:275 */
#ifndef SOAP_TYPE_ns1__CodeDetection
#define SOAP_TYPE_ns1__CodeDetection (49)
/* ns1:CodeDetection */
enum ns1__CodeDetection {
	ns1__CodeDetection__0 = 0,
	ns1__CodeDetection__1 = 1,
	ns1__CodeDetection__2 = 2,
	ns1__CodeDetection__3 = 3,
	ns1__CodeDetection__4 = 4,
	ns1__CodeDetection__9 = 9,
	ns1__CodeDetection__10 = 10,
	ns1__CodeDetection__12 = 12,
	ns1__CodeDetection__16 = 16,
	ns1__CodeDetection__17 = 17,
	ns1__CodeDetection__26 = 26,
	ns1__CodeDetection__27 = 27,
	ns1__CodeDetection__30 = 30,
	ns1__CodeDetection__32 = 32,
	ns1__CodeDetection__35 = 35,
	ns1__CodeDetection__37 = 37,
	ns1__CodeDetection__38 = 38,
	ns1__CodeDetection__39 = 39,
	ns1__CodeDetection__40 = 40,
	ns1__CodeDetection__41 = 41,
	ns1__CodeDetection__42 = 42,
	ns1__CodeDetection__43 = 43,
	ns1__CodeDetection__44 = 44,
	ns1__CodeDetection__46 = 46,
	ns1__CodeDetection__47 = 47,
	ns1__CodeDetection__49 = 49,
	ns1__CodeDetection__54 = 54,
	ns1__CodeDetection__55 = 55,
	ns1__CodeDetection__56 = 56,
	ns1__CodeDetection__58 = 58,
	ns1__CodeDetection__66 = 'B',
	ns1__CodeDetection__80 = 'P',
	ns1__CodeDetection__91 = 91,
	ns1__CodeDetection__92 = 92,
	ns1__CodeDetection__93 = 93,
	ns1__CodeDetection__94 = 94,
	ns1__CodeDetection__100 = 'd',
	ns1__CodeDetection__101 = 'e',
	ns1__CodeDetection__102 = 'f',
	ns1__CodeDetection__103 = 'g',
	ns1__CodeDetection__104 = 'h',
	ns1__CodeDetection__105 = 'i',
	ns1__CodeDetection__106 = 'j',
	ns1__CodeDetection__107 = 'k',
	ns1__CodeDetection__108 = 'l'
};
#endif

/* service.h:327 */
#ifndef SOAP_TYPE_ns1__EResetMode
#define SOAP_TYPE_ns1__EResetMode (50)
/* ns1:EResetMode */
enum ns1__EResetMode {
	ns1__EResetMode__Normal = 0,
	ns1__EResetMode__OneShot = 1
};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes, Structs and Unions                                                *
 *                                                                            *
\******************************************************************************/

class ns1__MountedMoldsXml;	/* service.h:138 */
class ns1__ArrayOfMoule;	/* service.h:141 */
class ns1__Moule;	/* service.h:144 */
class ns1__MoulesEjectesXml;	/* service.h:147 */
class ns1__ArrayOfRejetMouleVue;	/* service.h:150 */
class ns1__RejetMoule;	/* service.h:156 */
class ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9;	/* service.h:159 */
class ns1__PrelevementWS_USCORE1_USCORE0_USCORE9;	/* service.h:162 */
class ns1__MoulesPrelevesXml;	/* service.h:165 */
class ns1__ArrayOfPrelevementUnitaire;	/* service.h:168 */
class ns1__PrelevementUnitaire;	/* service.h:171 */
class _ns1__Counts;	/* service.h:174 */
class _ns1__CountsResponse_CountsResult;	/* service.h:622 */
class _ns1__CountsResponse;	/* service.h:177 */
class _ns1__GetAlarmsSinceLastQuery;	/* service.h:180 */
class _ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult;	/* service.h:684 */
class _ns1__GetAlarmsSinceLastQueryResponse;	/* service.h:183 */
class _ns1__GetAlarms;	/* service.h:186 */
class _ns1__GetAlarmsResponse_GetAlarmsResult;	/* service.h:746 */
class _ns1__GetAlarmsResponse;	/* service.h:189 */
class _ns1__MountedMolds;	/* service.h:192 */
class _ns1__MountedMoldsResponse_MountedMoldsResult;	/* service.h:808 */
class _ns1__MountedMoldsResponse;	/* service.h:195 */
class _ns1__Measures;	/* service.h:198 */
class _ns1__MeasuresResponse_MeasuresResult;	/* service.h:870 */
class _ns1__MeasuresResponse;	/* service.h:201 */
class _ns1__CumulCounts;	/* service.h:204 */
class _ns1__CumulCountsResponse_CumulCountsResult;	/* service.h:932 */
class _ns1__CumulCountsResponse;	/* service.h:207 */
class _ns1__ReadenMolds;	/* service.h:210 */
class _ns1__ReadenMoldsResponse_ReadenMoldsResult;	/* service.h:994 */
class _ns1__ReadenMoldsResponse;	/* service.h:213 */
class _ns1__EjectedMolds;	/* service.h:216 */
class _ns1__EjectedMoldsResponse_EjectedMoldsResult;	/* service.h:1056 */
class _ns1__EjectedMoldsResponse;	/* service.h:219 */
class _ns1__GetMoldsInSampleTable;	/* service.h:222 */
class _ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult;	/* service.h:1118 */
class _ns1__GetMoldsInSampleTableResponse;	/* service.h:225 */
class _ns1__ChangeMountedMolds;	/* service.h:228 */
class _ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult;	/* service.h:1182 */
class _ns1__ChangeMountedMoldsResponse;	/* service.h:231 */
class _ns1__AddEjectedMolds;	/* service.h:234 */
class _ns1__AddEjectedMoldsResponse;	/* service.h:237 */
class _ns1__EraseMoldsInSampleTable;	/* service.h:240 */
class _ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult;	/* service.h:1286 */
class _ns1__EraseMoldsInSampleTableResponse;	/* service.h:243 */
class _ns1__ChangeMoldsInSampleTable;	/* service.h:246 */
class _ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult;	/* service.h:1350 */
class _ns1__ChangeMoldsInSampleTableResponse;	/* service.h:249 */
class _ns1__GetVersions;	/* service.h:252 */
class _ns1__GetVersionsResponse_GetVersionsResult;	/* service.h:1412 */
class _ns1__GetVersionsResponse;	/* service.h:255 */
class _ns1__ChangeSamples;	/* service.h:258 */
class _ns1__ChangeSamplesResponse_ChangeSamplesResult;	/* service.h:1476 */
class _ns1__ChangeSamplesResponse;	/* service.h:261 */
class ns1__RejetMouleVue;	/* service.h:153 */
struct __ns1__Counts;	/* service.h:1714 */
struct __ns1__GetAlarmsSinceLastQuery;	/* service.h:1780 */
struct __ns1__GetAlarms;	/* service.h:1846 */
struct __ns1__MountedMolds;	/* service.h:1912 */
struct __ns1__Measures;	/* service.h:1978 */
struct __ns1__CumulCounts;	/* service.h:2044 */
struct __ns1__ReadenMolds;	/* service.h:2110 */
struct __ns1__EjectedMolds;	/* service.h:2176 */
struct __ns1__GetMoldsInSampleTable;	/* service.h:2242 */
struct __ns1__ChangeMountedMolds;	/* service.h:2308 */
struct __ns1__AddEjectedMolds;	/* service.h:2374 */
struct __ns1__EraseMoldsInSampleTable;	/* service.h:2440 */
struct __ns1__ChangeMoldsInSampleTable;	/* service.h:2506 */
struct __ns1__GetVersions;	/* service.h:2572 */
struct __ns1__ChangeSamples;	/* service.h:2638 */
struct __ns1__Counts_;	/* service.h:2704 */
struct __ns1__GetAlarmsSinceLastQuery_;	/* service.h:2770 */
struct __ns1__GetAlarms_;	/* service.h:2836 */
struct __ns1__MountedMolds_;	/* service.h:2902 */
struct __ns1__Measures_;	/* service.h:2968 */
struct __ns1__CumulCounts_;	/* service.h:3034 */
struct __ns1__ReadenMolds_;	/* service.h:3100 */
struct __ns1__EjectedMolds_;	/* service.h:3166 */
struct __ns1__GetMoldsInSampleTable_;	/* service.h:3232 */
struct __ns1__ChangeMountedMolds_;	/* service.h:3298 */
struct __ns1__AddEjectedMolds_;	/* service.h:3364 */
struct __ns1__EraseMoldsInSampleTable_;	/* service.h:3430 */
struct __ns1__ChangeMoldsInSampleTable_;	/* service.h:3496 */
struct __ns1__GetVersions_;	/* service.h:3562 */
struct __ns1__ChangeSamples_;	/* service.h:3628 */

/* service.h:138 */
#ifndef SOAP_TYPE_ns1__MountedMoldsXml
#define SOAP_TYPE_ns1__MountedMoldsXml (7)
/* complex XSD type 'ns1:MountedMoldsXml': */
class SOAP_CMAC ns1__MountedMoldsXml {
      public:
        /// Optional element 'Root' of XSD type 'ns1:ArrayOfMoule'
        ns1__ArrayOfMoule *Root;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns1__MountedMoldsXml
        virtual int soap_type(void) const { return SOAP_TYPE_ns1__MountedMoldsXml; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__MountedMoldsXml, default initialized and not managed by a soap context
        virtual ns1__MountedMoldsXml *soap_alloc(void) const { return SOAP_NEW(ns1__MountedMoldsXml); }
      public:
        /// Constructor with initializations
        ns1__MountedMoldsXml()
        {
          Root = (ns1__ArrayOfMoule *)0;
          soap = (struct soap *)0;
        }
        virtual ~ns1__MountedMoldsXml() { }
        /// Friend allocator used by soap_new_ns1__MountedMoldsXml(struct soap*, int)
        friend SOAP_FMAC1 ns1__MountedMoldsXml * SOAP_FMAC2 soap_instantiate_ns1__MountedMoldsXml(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:141 */
#ifndef SOAP_TYPE_ns1__ArrayOfMoule
#define SOAP_TYPE_ns1__ArrayOfMoule (8)
/* complex XSD type 'ns1:ArrayOfMoule': */
class SOAP_CMAC ns1__ArrayOfMoule {
      public:
        /// Sequence of elements 'mold' of XSD type 'ns1:Moule' stored in dynamic array mold of length __sizemold
        int __sizemold;
        ns1__Moule **mold;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns1__ArrayOfMoule
        virtual int soap_type(void) const { return SOAP_TYPE_ns1__ArrayOfMoule; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__ArrayOfMoule, default initialized and not managed by a soap context
        virtual ns1__ArrayOfMoule *soap_alloc(void) const { return SOAP_NEW(ns1__ArrayOfMoule); }
      public:
        /// Constructor with initializations
        ns1__ArrayOfMoule()
        {
          __sizemold = 0;
          mold = NULL;
          soap = (struct soap *)0;
        }
        virtual ~ns1__ArrayOfMoule() { }
        /// Friend allocator used by soap_new_ns1__ArrayOfMoule(struct soap*, int)
        friend SOAP_FMAC1 ns1__ArrayOfMoule * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfMoule(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:144 */
#ifndef SOAP_TYPE_ns1__Moule
#define SOAP_TYPE_ns1__Moule (9)
/* complex XSD type 'ns1:Moule': */
class SOAP_CMAC ns1__Moule {
      public:
        /// required attribute 'nb' of XSD type 'xsd:int'
        int nb;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns1__Moule
        virtual int soap_type(void) const { return SOAP_TYPE_ns1__Moule; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__Moule, default initialized and not managed by a soap context
        virtual ns1__Moule *soap_alloc(void) const { return SOAP_NEW(ns1__Moule); }
      public:
        /// Constructor with initializations
        ns1__Moule()
        {
          nb = (int)0;
          soap = (struct soap *)0;
        }
        virtual ~ns1__Moule() { }
        /// Friend allocator used by soap_new_ns1__Moule(struct soap*, int)
        friend SOAP_FMAC1 ns1__Moule * SOAP_FMAC2 soap_instantiate_ns1__Moule(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:147 */
#ifndef SOAP_TYPE_ns1__MoulesEjectesXml
#define SOAP_TYPE_ns1__MoulesEjectesXml (10)
/* complex XSD type 'ns1:MoulesEjectesXml': */
class SOAP_CMAC ns1__MoulesEjectesXml {
      public:
        /// Optional element 'Root' of XSD type 'ns1:ArrayOfRejetMouleVue'
        ns1__ArrayOfRejetMouleVue *Root;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns1__MoulesEjectesXml
        virtual int soap_type(void) const { return SOAP_TYPE_ns1__MoulesEjectesXml; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__MoulesEjectesXml, default initialized and not managed by a soap context
        virtual ns1__MoulesEjectesXml *soap_alloc(void) const { return SOAP_NEW(ns1__MoulesEjectesXml); }
      public:
        /// Constructor with initializations
        ns1__MoulesEjectesXml()
        {
          Root = (ns1__ArrayOfRejetMouleVue *)0;
          soap = (struct soap *)0;
        }
        virtual ~ns1__MoulesEjectesXml() { }
        /// Friend allocator used by soap_new_ns1__MoulesEjectesXml(struct soap*, int)
        friend SOAP_FMAC1 ns1__MoulesEjectesXml * SOAP_FMAC2 soap_instantiate_ns1__MoulesEjectesXml(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:150 */
#ifndef SOAP_TYPE_ns1__ArrayOfRejetMouleVue
#define SOAP_TYPE_ns1__ArrayOfRejetMouleVue (11)
/* complex XSD type 'ns1:ArrayOfRejetMouleVue': */
class SOAP_CMAC ns1__ArrayOfRejetMouleVue {
      public:
        /// Sequence of elements 'mold' of XSD type 'ns1:RejetMouleVue' stored in dynamic array mold of length __sizemold
        int __sizemold;
        ns1__RejetMouleVue **mold;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns1__ArrayOfRejetMouleVue
        virtual int soap_type(void) const { return SOAP_TYPE_ns1__ArrayOfRejetMouleVue; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__ArrayOfRejetMouleVue, default initialized and not managed by a soap context
        virtual ns1__ArrayOfRejetMouleVue *soap_alloc(void) const { return SOAP_NEW(ns1__ArrayOfRejetMouleVue); }
      public:
        /// Constructor with initializations
        ns1__ArrayOfRejetMouleVue()
        {
          __sizemold = 0;
          mold = NULL;
          soap = (struct soap *)0;
        }
        virtual ~ns1__ArrayOfRejetMouleVue() { }
        /// Friend allocator used by soap_new_ns1__ArrayOfRejetMouleVue(struct soap*, int)
        friend SOAP_FMAC1 ns1__ArrayOfRejetMouleVue * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfRejetMouleVue(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:156 */
#ifndef SOAP_TYPE_ns1__RejetMoule
#define SOAP_TYPE_ns1__RejetMoule (13)
/* Type ns1__RejetMoule is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'ns1:RejetMoule': */
class SOAP_CMAC ns1__RejetMoule {
      public:
        /// required attribute 'nb' of XSD type 'xsd:int'
        int nb;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns1__RejetMoule
        virtual int soap_type(void) const { return SOAP_TYPE_ns1__RejetMoule; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__RejetMoule, default initialized and not managed by a soap context
        virtual ns1__RejetMoule *soap_alloc(void) const { return SOAP_NEW(ns1__RejetMoule); }
      public:
        /// Constructor with initializations
        ns1__RejetMoule()
        {
          nb = (int)0;
          soap = (struct soap *)0;
        }
        virtual ~ns1__RejetMoule() { }
        /// Friend allocator used by soap_new_ns1__RejetMoule(struct soap*, int)
        friend SOAP_FMAC1 ns1__RejetMoule * SOAP_FMAC2 soap_instantiate_ns1__RejetMoule(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:159 */
#ifndef SOAP_TYPE_ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9
#define SOAP_TYPE_ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9 (14)
/* complex XSD type 'ns1:MoulesPrelevesXmlPourWS1_0_9': */
class SOAP_CMAC ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9 {
      public:
        /// Sequence of elements 'Root' of XSD type 'ns1:PrelevementWS_1_0_9' stored in dynamic array Root of length __sizeRoot
        int __sizeRoot;
        ns1__PrelevementWS_USCORE1_USCORE0_USCORE9 **Root;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9
        virtual int soap_type(void) const { return SOAP_TYPE_ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9, default initialized and not managed by a soap context
        virtual ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9 *soap_alloc(void) const { return SOAP_NEW(ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9); }
      public:
        /// Constructor with initializations
        ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9()
        {
          __sizeRoot = 0;
          Root = NULL;
          soap = (struct soap *)0;
        }
        virtual ~ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9() { }
        /// Friend allocator used by soap_new_ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9(struct soap*, int)
        friend SOAP_FMAC1 ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9 * SOAP_FMAC2 soap_instantiate_ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:162 */
#ifndef SOAP_TYPE_ns1__PrelevementWS_USCORE1_USCORE0_USCORE9
#define SOAP_TYPE_ns1__PrelevementWS_USCORE1_USCORE0_USCORE9 (15)
/* complex XSD type 'ns1:PrelevementWS_1_0_9': */
class SOAP_CMAC ns1__PrelevementWS_USCORE1_USCORE0_USCORE9 {
      public:
        /// Optional element 'mold' of XSD type 'ns1:Moule'
        ns1__Moule *mold;
        /// Optional element 'criteria' of XSD type 'xsd:string'
        char *criteria;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns1__PrelevementWS_USCORE1_USCORE0_USCORE9
        virtual int soap_type(void) const { return SOAP_TYPE_ns1__PrelevementWS_USCORE1_USCORE0_USCORE9; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__PrelevementWS_USCORE1_USCORE0_USCORE9, default initialized and not managed by a soap context
        virtual ns1__PrelevementWS_USCORE1_USCORE0_USCORE9 *soap_alloc(void) const { return SOAP_NEW(ns1__PrelevementWS_USCORE1_USCORE0_USCORE9); }
      public:
        /// Constructor with initializations
        ns1__PrelevementWS_USCORE1_USCORE0_USCORE9()
        {
          mold = (ns1__Moule *)0;
          criteria = (char *)0;
          soap = (struct soap *)0;
        }
        virtual ~ns1__PrelevementWS_USCORE1_USCORE0_USCORE9() { }
        /// Friend allocator used by soap_new_ns1__PrelevementWS_USCORE1_USCORE0_USCORE9(struct soap*, int)
        friend SOAP_FMAC1 ns1__PrelevementWS_USCORE1_USCORE0_USCORE9 * SOAP_FMAC2 soap_instantiate_ns1__PrelevementWS_USCORE1_USCORE0_USCORE9(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:165 */
#ifndef SOAP_TYPE_ns1__MoulesPrelevesXml
#define SOAP_TYPE_ns1__MoulesPrelevesXml (16)
/* complex XSD type 'ns1:MoulesPrelevesXml': */
class SOAP_CMAC ns1__MoulesPrelevesXml {
      public:
        /// Optional element 'Root' of XSD type 'ns1:ArrayOfPrelevementUnitaire'
        ns1__ArrayOfPrelevementUnitaire *Root;
        /// Optional element 'criteria' of XSD type 'xsd:string'
        char *criteria;
        /// Required element 'mode' of XSD type 'ns1:EResetMode'
        enum ns1__EResetMode mode;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns1__MoulesPrelevesXml
        virtual int soap_type(void) const { return SOAP_TYPE_ns1__MoulesPrelevesXml; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__MoulesPrelevesXml, default initialized and not managed by a soap context
        virtual ns1__MoulesPrelevesXml *soap_alloc(void) const { return SOAP_NEW(ns1__MoulesPrelevesXml); }
      public:
        /// Constructor with initializations
        ns1__MoulesPrelevesXml()
        {
          Root = (ns1__ArrayOfPrelevementUnitaire *)0;
          criteria = (char *)0;
          mode = (enum ns1__EResetMode)0;
          soap = (struct soap *)0;
        }
        virtual ~ns1__MoulesPrelevesXml() { }
        /// Friend allocator used by soap_new_ns1__MoulesPrelevesXml(struct soap*, int)
        friend SOAP_FMAC1 ns1__MoulesPrelevesXml * SOAP_FMAC2 soap_instantiate_ns1__MoulesPrelevesXml(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:168 */
#ifndef SOAP_TYPE_ns1__ArrayOfPrelevementUnitaire
#define SOAP_TYPE_ns1__ArrayOfPrelevementUnitaire (17)
/* complex XSD type 'ns1:ArrayOfPrelevementUnitaire': */
class SOAP_CMAC ns1__ArrayOfPrelevementUnitaire {
      public:
        /// Sequence of elements 'sample' of XSD type 'ns1:PrelevementUnitaire' stored in dynamic array sample of length __sizesample
        int __sizesample;
        ns1__PrelevementUnitaire **sample;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns1__ArrayOfPrelevementUnitaire
        virtual int soap_type(void) const { return SOAP_TYPE_ns1__ArrayOfPrelevementUnitaire; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__ArrayOfPrelevementUnitaire, default initialized and not managed by a soap context
        virtual ns1__ArrayOfPrelevementUnitaire *soap_alloc(void) const { return SOAP_NEW(ns1__ArrayOfPrelevementUnitaire); }
      public:
        /// Constructor with initializations
        ns1__ArrayOfPrelevementUnitaire()
        {
          __sizesample = 0;
          sample = NULL;
          soap = (struct soap *)0;
        }
        virtual ~ns1__ArrayOfPrelevementUnitaire() { }
        /// Friend allocator used by soap_new_ns1__ArrayOfPrelevementUnitaire(struct soap*, int)
        friend SOAP_FMAC1 ns1__ArrayOfPrelevementUnitaire * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfPrelevementUnitaire(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:171 */
#ifndef SOAP_TYPE_ns1__PrelevementUnitaire
#define SOAP_TYPE_ns1__PrelevementUnitaire (18)
/* complex XSD type 'ns1:PrelevementUnitaire': */
class SOAP_CMAC ns1__PrelevementUnitaire {
      public:
        /// Required element 'ns1:mold' of XSD type 'xsd:int'
        int mold;
        /// Required element 'ns1:sensor' of XSD type 'ns1:CodeDetection'
        enum ns1__CodeDetection sensor;
        /// Required element 'ns1:number' of XSD type 'xsd:int'
        int number;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns1__PrelevementUnitaire
        virtual int soap_type(void) const { return SOAP_TYPE_ns1__PrelevementUnitaire; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__PrelevementUnitaire, default initialized and not managed by a soap context
        virtual ns1__PrelevementUnitaire *soap_alloc(void) const { return SOAP_NEW(ns1__PrelevementUnitaire); }
      public:
        /// Constructor with initializations
        ns1__PrelevementUnitaire()
        {
          mold = (int)0;
          sensor = (enum ns1__CodeDetection)0;
          number = (int)0;
          soap = (struct soap *)0;
        }
        virtual ~ns1__PrelevementUnitaire() { }
        /// Friend allocator used by soap_new_ns1__PrelevementUnitaire(struct soap*, int)
        friend SOAP_FMAC1 ns1__PrelevementUnitaire * SOAP_FMAC2 soap_instantiate_ns1__PrelevementUnitaire(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:174 */
#ifndef SOAP_TYPE__ns1__Counts
#define SOAP_TYPE__ns1__Counts (19)
/* complex XSD type 'ns1:Counts': */
class SOAP_CMAC _ns1__Counts {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__Counts
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__Counts; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__Counts, default initialized and not managed by a soap context
        virtual _ns1__Counts *soap_alloc(void) const { return SOAP_NEW(_ns1__Counts); }
      public:
        /// Constructor with initializations
        _ns1__Counts()
        {
          soap = (struct soap *)0;
        }
        virtual ~_ns1__Counts() { }
        /// Friend allocator used by soap_new__ns1__Counts(struct soap*, int)
        friend SOAP_FMAC1 _ns1__Counts * SOAP_FMAC2 soap_instantiate__ns1__Counts(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:622 */
#ifndef SOAP_TYPE__ns1__CountsResponse_CountsResult
#define SOAP_TYPE__ns1__CountsResponse_CountsResult (63)
/* complex XSD type 'ns1:CountsResponse-CountsResult': */
class SOAP_CMAC _ns1__CountsResponse_CountsResult {
      public:
        char *__any;
        char *__mixed;
      public:
        /// Return unique type id SOAP_TYPE__ns1__CountsResponse_CountsResult
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__CountsResponse_CountsResult; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__CountsResponse_CountsResult, default initialized and not managed by a soap context
        virtual _ns1__CountsResponse_CountsResult *soap_alloc(void) const { return SOAP_NEW(_ns1__CountsResponse_CountsResult); }
      public:
        /// Constructor with initializations
        _ns1__CountsResponse_CountsResult()
        {
          __any = (char *)0;
          __mixed = (char *)0;
        }
        virtual ~_ns1__CountsResponse_CountsResult() { }
        /// Friend allocator used by soap_new__ns1__CountsResponse_CountsResult(struct soap*, int)
        friend SOAP_FMAC1 _ns1__CountsResponse_CountsResult * SOAP_FMAC2 soap_instantiate__ns1__CountsResponse_CountsResult(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:177 */
#ifndef SOAP_TYPE__ns1__CountsResponse
#define SOAP_TYPE__ns1__CountsResponse (20)
/* complex XSD type 'ns1:CountsResponse': */
class SOAP_CMAC _ns1__CountsResponse {
      public:
        /// Optional element 'ns1:CountsResult' of XSD type 'ns1:CountsResponse-CountsResult'
        _ns1__CountsResponse_CountsResult *CountsResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__CountsResponse
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__CountsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__CountsResponse, default initialized and not managed by a soap context
        virtual _ns1__CountsResponse *soap_alloc(void) const { return SOAP_NEW(_ns1__CountsResponse); }
      public:
        /// Constructor with initializations
        _ns1__CountsResponse()
        {
          CountsResult = (_ns1__CountsResponse_CountsResult *)0;
          soap = (struct soap *)0;
        }
        virtual ~_ns1__CountsResponse() { }
        /// Friend allocator used by soap_new__ns1__CountsResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__CountsResponse * SOAP_FMAC2 soap_instantiate__ns1__CountsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:180 */
#ifndef SOAP_TYPE__ns1__GetAlarmsSinceLastQuery
#define SOAP_TYPE__ns1__GetAlarmsSinceLastQuery (21)
/* complex XSD type 'ns1:GetAlarmsSinceLastQuery': */
class SOAP_CMAC _ns1__GetAlarmsSinceLastQuery {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetAlarmsSinceLastQuery
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__GetAlarmsSinceLastQuery; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetAlarmsSinceLastQuery, default initialized and not managed by a soap context
        virtual _ns1__GetAlarmsSinceLastQuery *soap_alloc(void) const { return SOAP_NEW(_ns1__GetAlarmsSinceLastQuery); }
      public:
        /// Constructor with initializations
        _ns1__GetAlarmsSinceLastQuery()
        {
          soap = (struct soap *)0;
        }
        virtual ~_ns1__GetAlarmsSinceLastQuery() { }
        /// Friend allocator used by soap_new__ns1__GetAlarmsSinceLastQuery(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetAlarmsSinceLastQuery * SOAP_FMAC2 soap_instantiate__ns1__GetAlarmsSinceLastQuery(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:684 */
#ifndef SOAP_TYPE__ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult
#define SOAP_TYPE__ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult (65)
/* complex XSD type 'ns1:GetAlarmsSinceLastQueryResponse-GetAlarmsSinceLastQueryResult': */
class SOAP_CMAC _ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult {
      public:
        char *__any;
        char *__mixed;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult, default initialized and not managed by a soap context
        virtual _ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult *soap_alloc(void) const { return SOAP_NEW(_ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult); }
      public:
        /// Constructor with initializations
        _ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult()
        {
          __any = (char *)0;
          __mixed = (char *)0;
        }
        virtual ~_ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult() { }
        /// Friend allocator used by soap_new__ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult * SOAP_FMAC2 soap_instantiate__ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:183 */
#ifndef SOAP_TYPE__ns1__GetAlarmsSinceLastQueryResponse
#define SOAP_TYPE__ns1__GetAlarmsSinceLastQueryResponse (22)
/* complex XSD type 'ns1:GetAlarmsSinceLastQueryResponse': */
class SOAP_CMAC _ns1__GetAlarmsSinceLastQueryResponse {
      public:
        /// Optional element 'ns1:GetAlarmsSinceLastQueryResult' of XSD type 'ns1:GetAlarmsSinceLastQueryResponse-GetAlarmsSinceLastQueryResult'
        _ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult *GetAlarmsSinceLastQueryResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetAlarmsSinceLastQueryResponse
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__GetAlarmsSinceLastQueryResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetAlarmsSinceLastQueryResponse, default initialized and not managed by a soap context
        virtual _ns1__GetAlarmsSinceLastQueryResponse *soap_alloc(void) const { return SOAP_NEW(_ns1__GetAlarmsSinceLastQueryResponse); }
      public:
        /// Constructor with initializations
        _ns1__GetAlarmsSinceLastQueryResponse()
        {
          GetAlarmsSinceLastQueryResult = (_ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult *)0;
          soap = (struct soap *)0;
        }
        virtual ~_ns1__GetAlarmsSinceLastQueryResponse() { }
        /// Friend allocator used by soap_new__ns1__GetAlarmsSinceLastQueryResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetAlarmsSinceLastQueryResponse * SOAP_FMAC2 soap_instantiate__ns1__GetAlarmsSinceLastQueryResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:186 */
#ifndef SOAP_TYPE__ns1__GetAlarms
#define SOAP_TYPE__ns1__GetAlarms (23)
/* complex XSD type 'ns1:GetAlarms': */
class SOAP_CMAC _ns1__GetAlarms {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetAlarms
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__GetAlarms; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetAlarms, default initialized and not managed by a soap context
        virtual _ns1__GetAlarms *soap_alloc(void) const { return SOAP_NEW(_ns1__GetAlarms); }
      public:
        /// Constructor with initializations
        _ns1__GetAlarms()
        {
          soap = (struct soap *)0;
        }
        virtual ~_ns1__GetAlarms() { }
        /// Friend allocator used by soap_new__ns1__GetAlarms(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetAlarms * SOAP_FMAC2 soap_instantiate__ns1__GetAlarms(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:746 */
#ifndef SOAP_TYPE__ns1__GetAlarmsResponse_GetAlarmsResult
#define SOAP_TYPE__ns1__GetAlarmsResponse_GetAlarmsResult (67)
/* complex XSD type 'ns1:GetAlarmsResponse-GetAlarmsResult': */
class SOAP_CMAC _ns1__GetAlarmsResponse_GetAlarmsResult {
      public:
        char *__any;
        char *__mixed;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetAlarmsResponse_GetAlarmsResult
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__GetAlarmsResponse_GetAlarmsResult; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetAlarmsResponse_GetAlarmsResult, default initialized and not managed by a soap context
        virtual _ns1__GetAlarmsResponse_GetAlarmsResult *soap_alloc(void) const { return SOAP_NEW(_ns1__GetAlarmsResponse_GetAlarmsResult); }
      public:
        /// Constructor with initializations
        _ns1__GetAlarmsResponse_GetAlarmsResult()
        {
          __any = (char *)0;
          __mixed = (char *)0;
        }
        virtual ~_ns1__GetAlarmsResponse_GetAlarmsResult() { }
        /// Friend allocator used by soap_new__ns1__GetAlarmsResponse_GetAlarmsResult(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetAlarmsResponse_GetAlarmsResult * SOAP_FMAC2 soap_instantiate__ns1__GetAlarmsResponse_GetAlarmsResult(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:189 */
#ifndef SOAP_TYPE__ns1__GetAlarmsResponse
#define SOAP_TYPE__ns1__GetAlarmsResponse (24)
/* complex XSD type 'ns1:GetAlarmsResponse': */
class SOAP_CMAC _ns1__GetAlarmsResponse {
      public:
        /// Optional element 'ns1:GetAlarmsResult' of XSD type 'ns1:GetAlarmsResponse-GetAlarmsResult'
        _ns1__GetAlarmsResponse_GetAlarmsResult *GetAlarmsResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetAlarmsResponse
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__GetAlarmsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetAlarmsResponse, default initialized and not managed by a soap context
        virtual _ns1__GetAlarmsResponse *soap_alloc(void) const { return SOAP_NEW(_ns1__GetAlarmsResponse); }
      public:
        /// Constructor with initializations
        _ns1__GetAlarmsResponse()
        {
          GetAlarmsResult = (_ns1__GetAlarmsResponse_GetAlarmsResult *)0;
          soap = (struct soap *)0;
        }
        virtual ~_ns1__GetAlarmsResponse() { }
        /// Friend allocator used by soap_new__ns1__GetAlarmsResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetAlarmsResponse * SOAP_FMAC2 soap_instantiate__ns1__GetAlarmsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:192 */
#ifndef SOAP_TYPE__ns1__MountedMolds
#define SOAP_TYPE__ns1__MountedMolds (25)
/* complex XSD type 'ns1:MountedMolds': */
class SOAP_CMAC _ns1__MountedMolds {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__MountedMolds
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__MountedMolds; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__MountedMolds, default initialized and not managed by a soap context
        virtual _ns1__MountedMolds *soap_alloc(void) const { return SOAP_NEW(_ns1__MountedMolds); }
      public:
        /// Constructor with initializations
        _ns1__MountedMolds()
        {
          soap = (struct soap *)0;
        }
        virtual ~_ns1__MountedMolds() { }
        /// Friend allocator used by soap_new__ns1__MountedMolds(struct soap*, int)
        friend SOAP_FMAC1 _ns1__MountedMolds * SOAP_FMAC2 soap_instantiate__ns1__MountedMolds(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:808 */
#ifndef SOAP_TYPE__ns1__MountedMoldsResponse_MountedMoldsResult
#define SOAP_TYPE__ns1__MountedMoldsResponse_MountedMoldsResult (69)
/* complex XSD type 'ns1:MountedMoldsResponse-MountedMoldsResult': */
class SOAP_CMAC _ns1__MountedMoldsResponse_MountedMoldsResult {
      public:
        char *__any;
        char *__mixed;
      public:
        /// Return unique type id SOAP_TYPE__ns1__MountedMoldsResponse_MountedMoldsResult
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__MountedMoldsResponse_MountedMoldsResult; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__MountedMoldsResponse_MountedMoldsResult, default initialized and not managed by a soap context
        virtual _ns1__MountedMoldsResponse_MountedMoldsResult *soap_alloc(void) const { return SOAP_NEW(_ns1__MountedMoldsResponse_MountedMoldsResult); }
      public:
        /// Constructor with initializations
        _ns1__MountedMoldsResponse_MountedMoldsResult()
        {
          __any = (char *)0;
          __mixed = (char *)0;
        }
        virtual ~_ns1__MountedMoldsResponse_MountedMoldsResult() { }
        /// Friend allocator used by soap_new__ns1__MountedMoldsResponse_MountedMoldsResult(struct soap*, int)
        friend SOAP_FMAC1 _ns1__MountedMoldsResponse_MountedMoldsResult * SOAP_FMAC2 soap_instantiate__ns1__MountedMoldsResponse_MountedMoldsResult(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:195 */
#ifndef SOAP_TYPE__ns1__MountedMoldsResponse
#define SOAP_TYPE__ns1__MountedMoldsResponse (26)
/* complex XSD type 'ns1:MountedMoldsResponse': */
class SOAP_CMAC _ns1__MountedMoldsResponse {
      public:
        /// Optional element 'ns1:MountedMoldsResult' of XSD type 'ns1:MountedMoldsResponse-MountedMoldsResult'
        _ns1__MountedMoldsResponse_MountedMoldsResult *MountedMoldsResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__MountedMoldsResponse
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__MountedMoldsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__MountedMoldsResponse, default initialized and not managed by a soap context
        virtual _ns1__MountedMoldsResponse *soap_alloc(void) const { return SOAP_NEW(_ns1__MountedMoldsResponse); }
      public:
        /// Constructor with initializations
        _ns1__MountedMoldsResponse()
        {
          MountedMoldsResult = (_ns1__MountedMoldsResponse_MountedMoldsResult *)0;
          soap = (struct soap *)0;
        }
        virtual ~_ns1__MountedMoldsResponse() { }
        /// Friend allocator used by soap_new__ns1__MountedMoldsResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__MountedMoldsResponse * SOAP_FMAC2 soap_instantiate__ns1__MountedMoldsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:198 */
#ifndef SOAP_TYPE__ns1__Measures
#define SOAP_TYPE__ns1__Measures (27)
/* complex XSD type 'ns1:Measures': */
class SOAP_CMAC _ns1__Measures {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__Measures
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__Measures; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__Measures, default initialized and not managed by a soap context
        virtual _ns1__Measures *soap_alloc(void) const { return SOAP_NEW(_ns1__Measures); }
      public:
        /// Constructor with initializations
        _ns1__Measures()
        {
          soap = (struct soap *)0;
        }
        virtual ~_ns1__Measures() { }
        /// Friend allocator used by soap_new__ns1__Measures(struct soap*, int)
        friend SOAP_FMAC1 _ns1__Measures * SOAP_FMAC2 soap_instantiate__ns1__Measures(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:870 */
#ifndef SOAP_TYPE__ns1__MeasuresResponse_MeasuresResult
#define SOAP_TYPE__ns1__MeasuresResponse_MeasuresResult (71)
/* complex XSD type 'ns1:MeasuresResponse-MeasuresResult': */
class SOAP_CMAC _ns1__MeasuresResponse_MeasuresResult {
      public:
        char *__any;
        char *__mixed;
      public:
        /// Return unique type id SOAP_TYPE__ns1__MeasuresResponse_MeasuresResult
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__MeasuresResponse_MeasuresResult; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__MeasuresResponse_MeasuresResult, default initialized and not managed by a soap context
        virtual _ns1__MeasuresResponse_MeasuresResult *soap_alloc(void) const { return SOAP_NEW(_ns1__MeasuresResponse_MeasuresResult); }
      public:
        /// Constructor with initializations
        _ns1__MeasuresResponse_MeasuresResult()
        {
          __any = (char *)0;
          __mixed = (char *)0;
        }
        virtual ~_ns1__MeasuresResponse_MeasuresResult() { }
        /// Friend allocator used by soap_new__ns1__MeasuresResponse_MeasuresResult(struct soap*, int)
        friend SOAP_FMAC1 _ns1__MeasuresResponse_MeasuresResult * SOAP_FMAC2 soap_instantiate__ns1__MeasuresResponse_MeasuresResult(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:201 */
#ifndef SOAP_TYPE__ns1__MeasuresResponse
#define SOAP_TYPE__ns1__MeasuresResponse (28)
/* complex XSD type 'ns1:MeasuresResponse': */
class SOAP_CMAC _ns1__MeasuresResponse {
      public:
        /// Optional element 'ns1:MeasuresResult' of XSD type 'ns1:MeasuresResponse-MeasuresResult'
        _ns1__MeasuresResponse_MeasuresResult *MeasuresResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__MeasuresResponse
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__MeasuresResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__MeasuresResponse, default initialized and not managed by a soap context
        virtual _ns1__MeasuresResponse *soap_alloc(void) const { return SOAP_NEW(_ns1__MeasuresResponse); }
      public:
        /// Constructor with initializations
        _ns1__MeasuresResponse()
        {
          MeasuresResult = (_ns1__MeasuresResponse_MeasuresResult *)0;
          soap = (struct soap *)0;
        }
        virtual ~_ns1__MeasuresResponse() { }
        /// Friend allocator used by soap_new__ns1__MeasuresResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__MeasuresResponse * SOAP_FMAC2 soap_instantiate__ns1__MeasuresResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:204 */
#ifndef SOAP_TYPE__ns1__CumulCounts
#define SOAP_TYPE__ns1__CumulCounts (29)
/* complex XSD type 'ns1:CumulCounts': */
class SOAP_CMAC _ns1__CumulCounts {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__CumulCounts
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__CumulCounts; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__CumulCounts, default initialized and not managed by a soap context
        virtual _ns1__CumulCounts *soap_alloc(void) const { return SOAP_NEW(_ns1__CumulCounts); }
      public:
        /// Constructor with initializations
        _ns1__CumulCounts()
        {
          soap = (struct soap *)0;
        }
        virtual ~_ns1__CumulCounts() { }
        /// Friend allocator used by soap_new__ns1__CumulCounts(struct soap*, int)
        friend SOAP_FMAC1 _ns1__CumulCounts * SOAP_FMAC2 soap_instantiate__ns1__CumulCounts(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:932 */
#ifndef SOAP_TYPE__ns1__CumulCountsResponse_CumulCountsResult
#define SOAP_TYPE__ns1__CumulCountsResponse_CumulCountsResult (73)
/* complex XSD type 'ns1:CumulCountsResponse-CumulCountsResult': */
class SOAP_CMAC _ns1__CumulCountsResponse_CumulCountsResult {
      public:
        char *__any;
        char *__mixed;
      public:
        /// Return unique type id SOAP_TYPE__ns1__CumulCountsResponse_CumulCountsResult
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__CumulCountsResponse_CumulCountsResult; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__CumulCountsResponse_CumulCountsResult, default initialized and not managed by a soap context
        virtual _ns1__CumulCountsResponse_CumulCountsResult *soap_alloc(void) const { return SOAP_NEW(_ns1__CumulCountsResponse_CumulCountsResult); }
      public:
        /// Constructor with initializations
        _ns1__CumulCountsResponse_CumulCountsResult()
        {
          __any = (char *)0;
          __mixed = (char *)0;
        }
        virtual ~_ns1__CumulCountsResponse_CumulCountsResult() { }
        /// Friend allocator used by soap_new__ns1__CumulCountsResponse_CumulCountsResult(struct soap*, int)
        friend SOAP_FMAC1 _ns1__CumulCountsResponse_CumulCountsResult * SOAP_FMAC2 soap_instantiate__ns1__CumulCountsResponse_CumulCountsResult(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:207 */
#ifndef SOAP_TYPE__ns1__CumulCountsResponse
#define SOAP_TYPE__ns1__CumulCountsResponse (30)
/* complex XSD type 'ns1:CumulCountsResponse': */
class SOAP_CMAC _ns1__CumulCountsResponse {
      public:
        /// Optional element 'ns1:CumulCountsResult' of XSD type 'ns1:CumulCountsResponse-CumulCountsResult'
        _ns1__CumulCountsResponse_CumulCountsResult *CumulCountsResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__CumulCountsResponse
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__CumulCountsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__CumulCountsResponse, default initialized and not managed by a soap context
        virtual _ns1__CumulCountsResponse *soap_alloc(void) const { return SOAP_NEW(_ns1__CumulCountsResponse); }
      public:
        /// Constructor with initializations
        _ns1__CumulCountsResponse()
        {
          CumulCountsResult = (_ns1__CumulCountsResponse_CumulCountsResult *)0;
          soap = (struct soap *)0;
        }
        virtual ~_ns1__CumulCountsResponse() { }
        /// Friend allocator used by soap_new__ns1__CumulCountsResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__CumulCountsResponse * SOAP_FMAC2 soap_instantiate__ns1__CumulCountsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:210 */
#ifndef SOAP_TYPE__ns1__ReadenMolds
#define SOAP_TYPE__ns1__ReadenMolds (31)
/* complex XSD type 'ns1:ReadenMolds': */
class SOAP_CMAC _ns1__ReadenMolds {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__ReadenMolds
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__ReadenMolds; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__ReadenMolds, default initialized and not managed by a soap context
        virtual _ns1__ReadenMolds *soap_alloc(void) const { return SOAP_NEW(_ns1__ReadenMolds); }
      public:
        /// Constructor with initializations
        _ns1__ReadenMolds()
        {
          soap = (struct soap *)0;
        }
        virtual ~_ns1__ReadenMolds() { }
        /// Friend allocator used by soap_new__ns1__ReadenMolds(struct soap*, int)
        friend SOAP_FMAC1 _ns1__ReadenMolds * SOAP_FMAC2 soap_instantiate__ns1__ReadenMolds(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:994 */
#ifndef SOAP_TYPE__ns1__ReadenMoldsResponse_ReadenMoldsResult
#define SOAP_TYPE__ns1__ReadenMoldsResponse_ReadenMoldsResult (75)
/* complex XSD type 'ns1:ReadenMoldsResponse-ReadenMoldsResult': */
class SOAP_CMAC _ns1__ReadenMoldsResponse_ReadenMoldsResult {
      public:
        char *__any;
        char *__mixed;
      public:
        /// Return unique type id SOAP_TYPE__ns1__ReadenMoldsResponse_ReadenMoldsResult
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__ReadenMoldsResponse_ReadenMoldsResult; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__ReadenMoldsResponse_ReadenMoldsResult, default initialized and not managed by a soap context
        virtual _ns1__ReadenMoldsResponse_ReadenMoldsResult *soap_alloc(void) const { return SOAP_NEW(_ns1__ReadenMoldsResponse_ReadenMoldsResult); }
      public:
        /// Constructor with initializations
        _ns1__ReadenMoldsResponse_ReadenMoldsResult()
        {
          __any = (char *)0;
          __mixed = (char *)0;
        }
        virtual ~_ns1__ReadenMoldsResponse_ReadenMoldsResult() { }
        /// Friend allocator used by soap_new__ns1__ReadenMoldsResponse_ReadenMoldsResult(struct soap*, int)
        friend SOAP_FMAC1 _ns1__ReadenMoldsResponse_ReadenMoldsResult * SOAP_FMAC2 soap_instantiate__ns1__ReadenMoldsResponse_ReadenMoldsResult(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:213 */
#ifndef SOAP_TYPE__ns1__ReadenMoldsResponse
#define SOAP_TYPE__ns1__ReadenMoldsResponse (32)
/* complex XSD type 'ns1:ReadenMoldsResponse': */
class SOAP_CMAC _ns1__ReadenMoldsResponse {
      public:
        /// Optional element 'ns1:ReadenMoldsResult' of XSD type 'ns1:ReadenMoldsResponse-ReadenMoldsResult'
        _ns1__ReadenMoldsResponse_ReadenMoldsResult *ReadenMoldsResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__ReadenMoldsResponse
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__ReadenMoldsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__ReadenMoldsResponse, default initialized and not managed by a soap context
        virtual _ns1__ReadenMoldsResponse *soap_alloc(void) const { return SOAP_NEW(_ns1__ReadenMoldsResponse); }
      public:
        /// Constructor with initializations
        _ns1__ReadenMoldsResponse()
        {
          ReadenMoldsResult = (_ns1__ReadenMoldsResponse_ReadenMoldsResult *)0;
          soap = (struct soap *)0;
        }
        virtual ~_ns1__ReadenMoldsResponse() { }
        /// Friend allocator used by soap_new__ns1__ReadenMoldsResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__ReadenMoldsResponse * SOAP_FMAC2 soap_instantiate__ns1__ReadenMoldsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:216 */
#ifndef SOAP_TYPE__ns1__EjectedMolds
#define SOAP_TYPE__ns1__EjectedMolds (33)
/* complex XSD type 'ns1:EjectedMolds': */
class SOAP_CMAC _ns1__EjectedMolds {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__EjectedMolds
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__EjectedMolds; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__EjectedMolds, default initialized and not managed by a soap context
        virtual _ns1__EjectedMolds *soap_alloc(void) const { return SOAP_NEW(_ns1__EjectedMolds); }
      public:
        /// Constructor with initializations
        _ns1__EjectedMolds()
        {
          soap = (struct soap *)0;
        }
        virtual ~_ns1__EjectedMolds() { }
        /// Friend allocator used by soap_new__ns1__EjectedMolds(struct soap*, int)
        friend SOAP_FMAC1 _ns1__EjectedMolds * SOAP_FMAC2 soap_instantiate__ns1__EjectedMolds(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:1056 */
#ifndef SOAP_TYPE__ns1__EjectedMoldsResponse_EjectedMoldsResult
#define SOAP_TYPE__ns1__EjectedMoldsResponse_EjectedMoldsResult (77)
/* complex XSD type 'ns1:EjectedMoldsResponse-EjectedMoldsResult': */
class SOAP_CMAC _ns1__EjectedMoldsResponse_EjectedMoldsResult {
      public:
        char *__any;
        char *__mixed;
      public:
        /// Return unique type id SOAP_TYPE__ns1__EjectedMoldsResponse_EjectedMoldsResult
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__EjectedMoldsResponse_EjectedMoldsResult; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__EjectedMoldsResponse_EjectedMoldsResult, default initialized and not managed by a soap context
        virtual _ns1__EjectedMoldsResponse_EjectedMoldsResult *soap_alloc(void) const { return SOAP_NEW(_ns1__EjectedMoldsResponse_EjectedMoldsResult); }
      public:
        /// Constructor with initializations
        _ns1__EjectedMoldsResponse_EjectedMoldsResult()
        {
          __any = (char *)0;
          __mixed = (char *)0;
        }
        virtual ~_ns1__EjectedMoldsResponse_EjectedMoldsResult() { }
        /// Friend allocator used by soap_new__ns1__EjectedMoldsResponse_EjectedMoldsResult(struct soap*, int)
        friend SOAP_FMAC1 _ns1__EjectedMoldsResponse_EjectedMoldsResult * SOAP_FMAC2 soap_instantiate__ns1__EjectedMoldsResponse_EjectedMoldsResult(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:219 */
#ifndef SOAP_TYPE__ns1__EjectedMoldsResponse
#define SOAP_TYPE__ns1__EjectedMoldsResponse (34)
/* complex XSD type 'ns1:EjectedMoldsResponse': */
class SOAP_CMAC _ns1__EjectedMoldsResponse {
      public:
        /// Optional element 'ns1:EjectedMoldsResult' of XSD type 'ns1:EjectedMoldsResponse-EjectedMoldsResult'
        _ns1__EjectedMoldsResponse_EjectedMoldsResult *EjectedMoldsResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__EjectedMoldsResponse
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__EjectedMoldsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__EjectedMoldsResponse, default initialized and not managed by a soap context
        virtual _ns1__EjectedMoldsResponse *soap_alloc(void) const { return SOAP_NEW(_ns1__EjectedMoldsResponse); }
      public:
        /// Constructor with initializations
        _ns1__EjectedMoldsResponse()
        {
          EjectedMoldsResult = (_ns1__EjectedMoldsResponse_EjectedMoldsResult *)0;
          soap = (struct soap *)0;
        }
        virtual ~_ns1__EjectedMoldsResponse() { }
        /// Friend allocator used by soap_new__ns1__EjectedMoldsResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__EjectedMoldsResponse * SOAP_FMAC2 soap_instantiate__ns1__EjectedMoldsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:222 */
#ifndef SOAP_TYPE__ns1__GetMoldsInSampleTable
#define SOAP_TYPE__ns1__GetMoldsInSampleTable (35)
/* complex XSD type 'ns1:GetMoldsInSampleTable': */
class SOAP_CMAC _ns1__GetMoldsInSampleTable {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetMoldsInSampleTable
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__GetMoldsInSampleTable; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetMoldsInSampleTable, default initialized and not managed by a soap context
        virtual _ns1__GetMoldsInSampleTable *soap_alloc(void) const { return SOAP_NEW(_ns1__GetMoldsInSampleTable); }
      public:
        /// Constructor with initializations
        _ns1__GetMoldsInSampleTable()
        {
          soap = (struct soap *)0;
        }
        virtual ~_ns1__GetMoldsInSampleTable() { }
        /// Friend allocator used by soap_new__ns1__GetMoldsInSampleTable(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetMoldsInSampleTable * SOAP_FMAC2 soap_instantiate__ns1__GetMoldsInSampleTable(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:1118 */
#ifndef SOAP_TYPE__ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult
#define SOAP_TYPE__ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult (79)
/* complex XSD type 'ns1:GetMoldsInSampleTableResponse-GetMoldsInSampleTableResult': */
class SOAP_CMAC _ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult {
      public:
        char *__any;
        char *__mixed;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult, default initialized and not managed by a soap context
        virtual _ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult *soap_alloc(void) const { return SOAP_NEW(_ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult); }
      public:
        /// Constructor with initializations
        _ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult()
        {
          __any = (char *)0;
          __mixed = (char *)0;
        }
        virtual ~_ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult() { }
        /// Friend allocator used by soap_new__ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult * SOAP_FMAC2 soap_instantiate__ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:225 */
#ifndef SOAP_TYPE__ns1__GetMoldsInSampleTableResponse
#define SOAP_TYPE__ns1__GetMoldsInSampleTableResponse (36)
/* complex XSD type 'ns1:GetMoldsInSampleTableResponse': */
class SOAP_CMAC _ns1__GetMoldsInSampleTableResponse {
      public:
        /// Optional element 'ns1:GetMoldsInSampleTableResult' of XSD type 'ns1:GetMoldsInSampleTableResponse-GetMoldsInSampleTableResult'
        _ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult *GetMoldsInSampleTableResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetMoldsInSampleTableResponse
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__GetMoldsInSampleTableResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetMoldsInSampleTableResponse, default initialized and not managed by a soap context
        virtual _ns1__GetMoldsInSampleTableResponse *soap_alloc(void) const { return SOAP_NEW(_ns1__GetMoldsInSampleTableResponse); }
      public:
        /// Constructor with initializations
        _ns1__GetMoldsInSampleTableResponse()
        {
          GetMoldsInSampleTableResult = (_ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult *)0;
          soap = (struct soap *)0;
        }
        virtual ~_ns1__GetMoldsInSampleTableResponse() { }
        /// Friend allocator used by soap_new__ns1__GetMoldsInSampleTableResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetMoldsInSampleTableResponse * SOAP_FMAC2 soap_instantiate__ns1__GetMoldsInSampleTableResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:228 */
#ifndef SOAP_TYPE__ns1__ChangeMountedMolds
#define SOAP_TYPE__ns1__ChangeMountedMolds (37)
/* complex XSD type 'ns1:ChangeMountedMolds': */
class SOAP_CMAC _ns1__ChangeMountedMolds {
      public:
        /// Required element 'ns1:mountedMolds' of XSD type 'ns1:MountedMoldsXml'
        ns1__MountedMoldsXml *mountedMolds;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__ChangeMountedMolds
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__ChangeMountedMolds; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__ChangeMountedMolds, default initialized and not managed by a soap context
        virtual _ns1__ChangeMountedMolds *soap_alloc(void) const { return SOAP_NEW(_ns1__ChangeMountedMolds); }
      public:
        /// Constructor with initializations
        _ns1__ChangeMountedMolds()
        {
          mountedMolds = (ns1__MountedMoldsXml *)0;
          soap = (struct soap *)0;
        }
        virtual ~_ns1__ChangeMountedMolds() { }
        /// Friend allocator used by soap_new__ns1__ChangeMountedMolds(struct soap*, int)
        friend SOAP_FMAC1 _ns1__ChangeMountedMolds * SOAP_FMAC2 soap_instantiate__ns1__ChangeMountedMolds(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:1182 */
#ifndef SOAP_TYPE__ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult
#define SOAP_TYPE__ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult (82)
/* complex XSD type 'ns1:ChangeMountedMoldsResponse-ChangeMountedMoldsResult': */
class SOAP_CMAC _ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult {
      public:
        char *__any;
        char *__mixed;
      public:
        /// Return unique type id SOAP_TYPE__ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult, default initialized and not managed by a soap context
        virtual _ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult *soap_alloc(void) const { return SOAP_NEW(_ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult); }
      public:
        /// Constructor with initializations
        _ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult()
        {
          __any = (char *)0;
          __mixed = (char *)0;
        }
        virtual ~_ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult() { }
        /// Friend allocator used by soap_new__ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult(struct soap*, int)
        friend SOAP_FMAC1 _ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult * SOAP_FMAC2 soap_instantiate__ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:231 */
#ifndef SOAP_TYPE__ns1__ChangeMountedMoldsResponse
#define SOAP_TYPE__ns1__ChangeMountedMoldsResponse (38)
/* complex XSD type 'ns1:ChangeMountedMoldsResponse': */
class SOAP_CMAC _ns1__ChangeMountedMoldsResponse {
      public:
        /// Optional element 'ns1:ChangeMountedMoldsResult' of XSD type 'ns1:ChangeMountedMoldsResponse-ChangeMountedMoldsResult'
        _ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult *ChangeMountedMoldsResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__ChangeMountedMoldsResponse
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__ChangeMountedMoldsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__ChangeMountedMoldsResponse, default initialized and not managed by a soap context
        virtual _ns1__ChangeMountedMoldsResponse *soap_alloc(void) const { return SOAP_NEW(_ns1__ChangeMountedMoldsResponse); }
      public:
        /// Constructor with initializations
        _ns1__ChangeMountedMoldsResponse()
        {
          ChangeMountedMoldsResult = (_ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult *)0;
          soap = (struct soap *)0;
        }
        virtual ~_ns1__ChangeMountedMoldsResponse() { }
        /// Friend allocator used by soap_new__ns1__ChangeMountedMoldsResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__ChangeMountedMoldsResponse * SOAP_FMAC2 soap_instantiate__ns1__ChangeMountedMoldsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:234 */
#ifndef SOAP_TYPE__ns1__AddEjectedMolds
#define SOAP_TYPE__ns1__AddEjectedMolds (39)
/* complex XSD type 'ns1:AddEjectedMolds': */
class SOAP_CMAC _ns1__AddEjectedMolds {
      public:
        /// Required element 'ns1:AddEjectedMolds' of XSD type 'ns1:MoulesEjectesXml'
        ns1__MoulesEjectesXml *AddEjectedMolds;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__AddEjectedMolds
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__AddEjectedMolds; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__AddEjectedMolds, default initialized and not managed by a soap context
        virtual _ns1__AddEjectedMolds *soap_alloc(void) const { return SOAP_NEW(_ns1__AddEjectedMolds); }
      public:
        /// Constructor with initializations
        _ns1__AddEjectedMolds()
        {
          AddEjectedMolds = (ns1__MoulesEjectesXml *)0;
          soap = (struct soap *)0;
        }
        virtual ~_ns1__AddEjectedMolds() { }
        /// Friend allocator used by soap_new__ns1__AddEjectedMolds(struct soap*, int)
        friend SOAP_FMAC1 _ns1__AddEjectedMolds * SOAP_FMAC2 soap_instantiate__ns1__AddEjectedMolds(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:237 */
#ifndef SOAP_TYPE__ns1__AddEjectedMoldsResponse
#define SOAP_TYPE__ns1__AddEjectedMoldsResponse (40)
/* complex XSD type 'ns1:AddEjectedMoldsResponse': */
class SOAP_CMAC _ns1__AddEjectedMoldsResponse {
      public:
        /// Optional element 'ns1:AddEjectedMoldsResult' of XSD type 'xsd:string'
        char *AddEjectedMoldsResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__AddEjectedMoldsResponse
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__AddEjectedMoldsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__AddEjectedMoldsResponse, default initialized and not managed by a soap context
        virtual _ns1__AddEjectedMoldsResponse *soap_alloc(void) const { return SOAP_NEW(_ns1__AddEjectedMoldsResponse); }
      public:
        /// Constructor with initializations
        _ns1__AddEjectedMoldsResponse()
        {
          AddEjectedMoldsResult = (char *)0;
          soap = (struct soap *)0;
        }
        virtual ~_ns1__AddEjectedMoldsResponse() { }
        /// Friend allocator used by soap_new__ns1__AddEjectedMoldsResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__AddEjectedMoldsResponse * SOAP_FMAC2 soap_instantiate__ns1__AddEjectedMoldsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:240 */
#ifndef SOAP_TYPE__ns1__EraseMoldsInSampleTable
#define SOAP_TYPE__ns1__EraseMoldsInSampleTable (41)
/* complex XSD type 'ns1:EraseMoldsInSampleTable': */
class SOAP_CMAC _ns1__EraseMoldsInSampleTable {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__EraseMoldsInSampleTable
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__EraseMoldsInSampleTable; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__EraseMoldsInSampleTable, default initialized and not managed by a soap context
        virtual _ns1__EraseMoldsInSampleTable *soap_alloc(void) const { return SOAP_NEW(_ns1__EraseMoldsInSampleTable); }
      public:
        /// Constructor with initializations
        _ns1__EraseMoldsInSampleTable()
        {
          soap = (struct soap *)0;
        }
        virtual ~_ns1__EraseMoldsInSampleTable() { }
        /// Friend allocator used by soap_new__ns1__EraseMoldsInSampleTable(struct soap*, int)
        friend SOAP_FMAC1 _ns1__EraseMoldsInSampleTable * SOAP_FMAC2 soap_instantiate__ns1__EraseMoldsInSampleTable(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:1286 */
#ifndef SOAP_TYPE__ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult
#define SOAP_TYPE__ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult (85)
/* complex XSD type 'ns1:EraseMoldsInSampleTableResponse-EraseMoldsInSampleTableResult': */
class SOAP_CMAC _ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult {
      public:
        char *__any;
        char *__mixed;
      public:
        /// Return unique type id SOAP_TYPE__ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult, default initialized and not managed by a soap context
        virtual _ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult *soap_alloc(void) const { return SOAP_NEW(_ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult); }
      public:
        /// Constructor with initializations
        _ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult()
        {
          __any = (char *)0;
          __mixed = (char *)0;
        }
        virtual ~_ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult() { }
        /// Friend allocator used by soap_new__ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult(struct soap*, int)
        friend SOAP_FMAC1 _ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult * SOAP_FMAC2 soap_instantiate__ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:243 */
#ifndef SOAP_TYPE__ns1__EraseMoldsInSampleTableResponse
#define SOAP_TYPE__ns1__EraseMoldsInSampleTableResponse (42)
/* complex XSD type 'ns1:EraseMoldsInSampleTableResponse': */
class SOAP_CMAC _ns1__EraseMoldsInSampleTableResponse {
      public:
        /// Optional element 'ns1:EraseMoldsInSampleTableResult' of XSD type 'ns1:EraseMoldsInSampleTableResponse-EraseMoldsInSampleTableResult'
        _ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult *EraseMoldsInSampleTableResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__EraseMoldsInSampleTableResponse
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__EraseMoldsInSampleTableResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__EraseMoldsInSampleTableResponse, default initialized and not managed by a soap context
        virtual _ns1__EraseMoldsInSampleTableResponse *soap_alloc(void) const { return SOAP_NEW(_ns1__EraseMoldsInSampleTableResponse); }
      public:
        /// Constructor with initializations
        _ns1__EraseMoldsInSampleTableResponse()
        {
          EraseMoldsInSampleTableResult = (_ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult *)0;
          soap = (struct soap *)0;
        }
        virtual ~_ns1__EraseMoldsInSampleTableResponse() { }
        /// Friend allocator used by soap_new__ns1__EraseMoldsInSampleTableResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__EraseMoldsInSampleTableResponse * SOAP_FMAC2 soap_instantiate__ns1__EraseMoldsInSampleTableResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:246 */
#ifndef SOAP_TYPE__ns1__ChangeMoldsInSampleTable
#define SOAP_TYPE__ns1__ChangeMoldsInSampleTable (43)
/* complex XSD type 'ns1:ChangeMoldsInSampleTable': */
class SOAP_CMAC _ns1__ChangeMoldsInSampleTable {
      public:
        /// Required element 'ns1:ChangeMoldsInSampleTable' of XSD type 'ns1:MoulesPrelevesXmlPourWS1_0_9'
        ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9 *ChangeMoldsInSampleTable;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__ChangeMoldsInSampleTable
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__ChangeMoldsInSampleTable; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__ChangeMoldsInSampleTable, default initialized and not managed by a soap context
        virtual _ns1__ChangeMoldsInSampleTable *soap_alloc(void) const { return SOAP_NEW(_ns1__ChangeMoldsInSampleTable); }
      public:
        /// Constructor with initializations
        _ns1__ChangeMoldsInSampleTable()
        {
          ChangeMoldsInSampleTable = (ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9 *)0;
          soap = (struct soap *)0;
        }
        virtual ~_ns1__ChangeMoldsInSampleTable() { }
        /// Friend allocator used by soap_new__ns1__ChangeMoldsInSampleTable(struct soap*, int)
        friend SOAP_FMAC1 _ns1__ChangeMoldsInSampleTable * SOAP_FMAC2 soap_instantiate__ns1__ChangeMoldsInSampleTable(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:1350 */
#ifndef SOAP_TYPE__ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult
#define SOAP_TYPE__ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult (88)
/* complex XSD type 'ns1:ChangeMoldsInSampleTableResponse-ChangeMoldsInSampleTableResult': */
class SOAP_CMAC _ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult {
      public:
        char *__any;
        char *__mixed;
      public:
        /// Return unique type id SOAP_TYPE__ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult, default initialized and not managed by a soap context
        virtual _ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult *soap_alloc(void) const { return SOAP_NEW(_ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult); }
      public:
        /// Constructor with initializations
        _ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult()
        {
          __any = (char *)0;
          __mixed = (char *)0;
        }
        virtual ~_ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult() { }
        /// Friend allocator used by soap_new__ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult(struct soap*, int)
        friend SOAP_FMAC1 _ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult * SOAP_FMAC2 soap_instantiate__ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:249 */
#ifndef SOAP_TYPE__ns1__ChangeMoldsInSampleTableResponse
#define SOAP_TYPE__ns1__ChangeMoldsInSampleTableResponse (44)
/* complex XSD type 'ns1:ChangeMoldsInSampleTableResponse': */
class SOAP_CMAC _ns1__ChangeMoldsInSampleTableResponse {
      public:
        /// Optional element 'ns1:ChangeMoldsInSampleTableResult' of XSD type 'ns1:ChangeMoldsInSampleTableResponse-ChangeMoldsInSampleTableResult'
        _ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult *ChangeMoldsInSampleTableResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__ChangeMoldsInSampleTableResponse
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__ChangeMoldsInSampleTableResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__ChangeMoldsInSampleTableResponse, default initialized and not managed by a soap context
        virtual _ns1__ChangeMoldsInSampleTableResponse *soap_alloc(void) const { return SOAP_NEW(_ns1__ChangeMoldsInSampleTableResponse); }
      public:
        /// Constructor with initializations
        _ns1__ChangeMoldsInSampleTableResponse()
        {
          ChangeMoldsInSampleTableResult = (_ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult *)0;
          soap = (struct soap *)0;
        }
        virtual ~_ns1__ChangeMoldsInSampleTableResponse() { }
        /// Friend allocator used by soap_new__ns1__ChangeMoldsInSampleTableResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__ChangeMoldsInSampleTableResponse * SOAP_FMAC2 soap_instantiate__ns1__ChangeMoldsInSampleTableResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:252 */
#ifndef SOAP_TYPE__ns1__GetVersions
#define SOAP_TYPE__ns1__GetVersions (45)
/* complex XSD type 'ns1:GetVersions': */
class SOAP_CMAC _ns1__GetVersions {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetVersions
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__GetVersions; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetVersions, default initialized and not managed by a soap context
        virtual _ns1__GetVersions *soap_alloc(void) const { return SOAP_NEW(_ns1__GetVersions); }
      public:
        /// Constructor with initializations
        _ns1__GetVersions()
        {
          soap = (struct soap *)0;
        }
        virtual ~_ns1__GetVersions() { }
        /// Friend allocator used by soap_new__ns1__GetVersions(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetVersions * SOAP_FMAC2 soap_instantiate__ns1__GetVersions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:1412 */
#ifndef SOAP_TYPE__ns1__GetVersionsResponse_GetVersionsResult
#define SOAP_TYPE__ns1__GetVersionsResponse_GetVersionsResult (90)
/* complex XSD type 'ns1:GetVersionsResponse-GetVersionsResult': */
class SOAP_CMAC _ns1__GetVersionsResponse_GetVersionsResult {
      public:
        char *__any;
        char *__mixed;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetVersionsResponse_GetVersionsResult
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__GetVersionsResponse_GetVersionsResult; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetVersionsResponse_GetVersionsResult, default initialized and not managed by a soap context
        virtual _ns1__GetVersionsResponse_GetVersionsResult *soap_alloc(void) const { return SOAP_NEW(_ns1__GetVersionsResponse_GetVersionsResult); }
      public:
        /// Constructor with initializations
        _ns1__GetVersionsResponse_GetVersionsResult()
        {
          __any = (char *)0;
          __mixed = (char *)0;
        }
        virtual ~_ns1__GetVersionsResponse_GetVersionsResult() { }
        /// Friend allocator used by soap_new__ns1__GetVersionsResponse_GetVersionsResult(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetVersionsResponse_GetVersionsResult * SOAP_FMAC2 soap_instantiate__ns1__GetVersionsResponse_GetVersionsResult(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:255 */
#ifndef SOAP_TYPE__ns1__GetVersionsResponse
#define SOAP_TYPE__ns1__GetVersionsResponse (46)
/* complex XSD type 'ns1:GetVersionsResponse': */
class SOAP_CMAC _ns1__GetVersionsResponse {
      public:
        /// Optional element 'ns1:GetVersionsResult' of XSD type 'ns1:GetVersionsResponse-GetVersionsResult'
        _ns1__GetVersionsResponse_GetVersionsResult *GetVersionsResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__GetVersionsResponse
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__GetVersionsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetVersionsResponse, default initialized and not managed by a soap context
        virtual _ns1__GetVersionsResponse *soap_alloc(void) const { return SOAP_NEW(_ns1__GetVersionsResponse); }
      public:
        /// Constructor with initializations
        _ns1__GetVersionsResponse()
        {
          GetVersionsResult = (_ns1__GetVersionsResponse_GetVersionsResult *)0;
          soap = (struct soap *)0;
        }
        virtual ~_ns1__GetVersionsResponse() { }
        /// Friend allocator used by soap_new__ns1__GetVersionsResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetVersionsResponse * SOAP_FMAC2 soap_instantiate__ns1__GetVersionsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:258 */
#ifndef SOAP_TYPE__ns1__ChangeSamples
#define SOAP_TYPE__ns1__ChangeSamples (47)
/* complex XSD type 'ns1:ChangeSamples': */
class SOAP_CMAC _ns1__ChangeSamples {
      public:
        /// Required element 'ns1:ChangeMoldsInSampleTable' of XSD type 'ns1:MoulesPrelevesXml'
        ns1__MoulesPrelevesXml *ChangeMoldsInSampleTable;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__ChangeSamples
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__ChangeSamples; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__ChangeSamples, default initialized and not managed by a soap context
        virtual _ns1__ChangeSamples *soap_alloc(void) const { return SOAP_NEW(_ns1__ChangeSamples); }
      public:
        /// Constructor with initializations
        _ns1__ChangeSamples()
        {
          ChangeMoldsInSampleTable = (ns1__MoulesPrelevesXml *)0;
          soap = (struct soap *)0;
        }
        virtual ~_ns1__ChangeSamples() { }
        /// Friend allocator used by soap_new__ns1__ChangeSamples(struct soap*, int)
        friend SOAP_FMAC1 _ns1__ChangeSamples * SOAP_FMAC2 soap_instantiate__ns1__ChangeSamples(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:1476 */
#ifndef SOAP_TYPE__ns1__ChangeSamplesResponse_ChangeSamplesResult
#define SOAP_TYPE__ns1__ChangeSamplesResponse_ChangeSamplesResult (93)
/* complex XSD type 'ns1:ChangeSamplesResponse-ChangeSamplesResult': */
class SOAP_CMAC _ns1__ChangeSamplesResponse_ChangeSamplesResult {
      public:
        char *__any;
        char *__mixed;
      public:
        /// Return unique type id SOAP_TYPE__ns1__ChangeSamplesResponse_ChangeSamplesResult
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__ChangeSamplesResponse_ChangeSamplesResult; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__ChangeSamplesResponse_ChangeSamplesResult, default initialized and not managed by a soap context
        virtual _ns1__ChangeSamplesResponse_ChangeSamplesResult *soap_alloc(void) const { return SOAP_NEW(_ns1__ChangeSamplesResponse_ChangeSamplesResult); }
      public:
        /// Constructor with initializations
        _ns1__ChangeSamplesResponse_ChangeSamplesResult()
        {
          __any = (char *)0;
          __mixed = (char *)0;
        }
        virtual ~_ns1__ChangeSamplesResponse_ChangeSamplesResult() { }
        /// Friend allocator used by soap_new__ns1__ChangeSamplesResponse_ChangeSamplesResult(struct soap*, int)
        friend SOAP_FMAC1 _ns1__ChangeSamplesResponse_ChangeSamplesResult * SOAP_FMAC2 soap_instantiate__ns1__ChangeSamplesResponse_ChangeSamplesResult(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:261 */
#ifndef SOAP_TYPE__ns1__ChangeSamplesResponse
#define SOAP_TYPE__ns1__ChangeSamplesResponse (48)
/* complex XSD type 'ns1:ChangeSamplesResponse': */
class SOAP_CMAC _ns1__ChangeSamplesResponse {
      public:
        /// Optional element 'ns1:ChangeSamplesResult' of XSD type 'ns1:ChangeSamplesResponse-ChangeSamplesResult'
        _ns1__ChangeSamplesResponse_ChangeSamplesResult *ChangeSamplesResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__ChangeSamplesResponse
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__ChangeSamplesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__ChangeSamplesResponse, default initialized and not managed by a soap context
        virtual _ns1__ChangeSamplesResponse *soap_alloc(void) const { return SOAP_NEW(_ns1__ChangeSamplesResponse); }
      public:
        /// Constructor with initializations
        _ns1__ChangeSamplesResponse()
        {
          ChangeSamplesResult = (_ns1__ChangeSamplesResponse_ChangeSamplesResult *)0;
          soap = (struct soap *)0;
        }
        virtual ~_ns1__ChangeSamplesResponse() { }
        /// Friend allocator used by soap_new__ns1__ChangeSamplesResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__ChangeSamplesResponse * SOAP_FMAC2 soap_instantiate__ns1__ChangeSamplesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:153 */
#ifndef SOAP_TYPE_ns1__RejetMouleVue
#define SOAP_TYPE_ns1__RejetMouleVue (12)
/* Type ns1__RejetMouleVue is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'ns1:RejetMouleVue': */
class SOAP_CMAC ns1__RejetMouleVue : public ns1__RejetMoule {
      public:
        /// required attribute 'reason' of XSD type 'xsd:int'
        int reason;
      public:
        /// Return unique type id SOAP_TYPE_ns1__RejetMouleVue
        virtual int soap_type(void) const { return SOAP_TYPE_ns1__RejetMouleVue; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__RejetMouleVue, default initialized and not managed by a soap context
        virtual ns1__RejetMouleVue *soap_alloc(void) const { return SOAP_NEW(ns1__RejetMouleVue); }
      public:
        /// Constructor with initializations
        ns1__RejetMouleVue()
        {
          reason = (int)0;
        }
        virtual ~ns1__RejetMouleVue() { }
        /// Friend allocator used by soap_new_ns1__RejetMouleVue(struct soap*, int)
        friend SOAP_FMAC1 ns1__RejetMouleVue * SOAP_FMAC2 soap_instantiate_ns1__RejetMouleVue(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:1714 */
#ifndef SOAP_TYPE___ns1__Counts
#define SOAP_TYPE___ns1__Counts (98)
/* Wrapper: */
struct __ns1__Counts {
      public:
        /** Optional element 'ns1:Counts' of XSD type 'ns1:Counts' */
        _ns1__Counts *ns1__Counts;
      public:
        /** Return unique type id SOAP_TYPE___ns1__Counts */
        int soap_type() const { return SOAP_TYPE___ns1__Counts; }
        /** Constructor with member initializations */
        __ns1__Counts()
        {
          ns1__Counts = (_ns1__Counts *)0;
        }
        /** Friend allocator used by soap_new___ns1__Counts(struct soap*, int) */
        friend SOAP_FMAC1 __ns1__Counts * SOAP_FMAC2 soap_instantiate___ns1__Counts(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:1780 */
#ifndef SOAP_TYPE___ns1__GetAlarmsSinceLastQuery
#define SOAP_TYPE___ns1__GetAlarmsSinceLastQuery (102)
/* Wrapper: */
struct __ns1__GetAlarmsSinceLastQuery {
      public:
        /** Optional element 'ns1:GetAlarmsSinceLastQuery' of XSD type 'ns1:GetAlarmsSinceLastQuery' */
        _ns1__GetAlarmsSinceLastQuery *ns1__GetAlarmsSinceLastQuery;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetAlarmsSinceLastQuery */
        int soap_type() const { return SOAP_TYPE___ns1__GetAlarmsSinceLastQuery; }
        /** Constructor with member initializations */
        __ns1__GetAlarmsSinceLastQuery()
        {
          ns1__GetAlarmsSinceLastQuery = (_ns1__GetAlarmsSinceLastQuery *)0;
        }
        /** Friend allocator used by soap_new___ns1__GetAlarmsSinceLastQuery(struct soap*, int) */
        friend SOAP_FMAC1 __ns1__GetAlarmsSinceLastQuery * SOAP_FMAC2 soap_instantiate___ns1__GetAlarmsSinceLastQuery(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:1846 */
#ifndef SOAP_TYPE___ns1__GetAlarms
#define SOAP_TYPE___ns1__GetAlarms (106)
/* Wrapper: */
struct __ns1__GetAlarms {
      public:
        /** Optional element 'ns1:GetAlarms' of XSD type 'ns1:GetAlarms' */
        _ns1__GetAlarms *ns1__GetAlarms;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetAlarms */
        int soap_type() const { return SOAP_TYPE___ns1__GetAlarms; }
        /** Constructor with member initializations */
        __ns1__GetAlarms()
        {
          ns1__GetAlarms = (_ns1__GetAlarms *)0;
        }
        /** Friend allocator used by soap_new___ns1__GetAlarms(struct soap*, int) */
        friend SOAP_FMAC1 __ns1__GetAlarms * SOAP_FMAC2 soap_instantiate___ns1__GetAlarms(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:1912 */
#ifndef SOAP_TYPE___ns1__MountedMolds
#define SOAP_TYPE___ns1__MountedMolds (110)
/* Wrapper: */
struct __ns1__MountedMolds {
      public:
        /** Optional element 'ns1:MountedMolds' of XSD type 'ns1:MountedMolds' */
        _ns1__MountedMolds *ns1__MountedMolds;
      public:
        /** Return unique type id SOAP_TYPE___ns1__MountedMolds */
        int soap_type() const { return SOAP_TYPE___ns1__MountedMolds; }
        /** Constructor with member initializations */
        __ns1__MountedMolds()
        {
          ns1__MountedMolds = (_ns1__MountedMolds *)0;
        }
        /** Friend allocator used by soap_new___ns1__MountedMolds(struct soap*, int) */
        friend SOAP_FMAC1 __ns1__MountedMolds * SOAP_FMAC2 soap_instantiate___ns1__MountedMolds(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:1978 */
#ifndef SOAP_TYPE___ns1__Measures
#define SOAP_TYPE___ns1__Measures (114)
/* Wrapper: */
struct __ns1__Measures {
      public:
        /** Optional element 'ns1:Measures' of XSD type 'ns1:Measures' */
        _ns1__Measures *ns1__Measures;
      public:
        /** Return unique type id SOAP_TYPE___ns1__Measures */
        int soap_type() const { return SOAP_TYPE___ns1__Measures; }
        /** Constructor with member initializations */
        __ns1__Measures()
        {
          ns1__Measures = (_ns1__Measures *)0;
        }
        /** Friend allocator used by soap_new___ns1__Measures(struct soap*, int) */
        friend SOAP_FMAC1 __ns1__Measures * SOAP_FMAC2 soap_instantiate___ns1__Measures(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:2044 */
#ifndef SOAP_TYPE___ns1__CumulCounts
#define SOAP_TYPE___ns1__CumulCounts (118)
/* Wrapper: */
struct __ns1__CumulCounts {
      public:
        /** Optional element 'ns1:CumulCounts' of XSD type 'ns1:CumulCounts' */
        _ns1__CumulCounts *ns1__CumulCounts;
      public:
        /** Return unique type id SOAP_TYPE___ns1__CumulCounts */
        int soap_type() const { return SOAP_TYPE___ns1__CumulCounts; }
        /** Constructor with member initializations */
        __ns1__CumulCounts()
        {
          ns1__CumulCounts = (_ns1__CumulCounts *)0;
        }
        /** Friend allocator used by soap_new___ns1__CumulCounts(struct soap*, int) */
        friend SOAP_FMAC1 __ns1__CumulCounts * SOAP_FMAC2 soap_instantiate___ns1__CumulCounts(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:2110 */
#ifndef SOAP_TYPE___ns1__ReadenMolds
#define SOAP_TYPE___ns1__ReadenMolds (122)
/* Wrapper: */
struct __ns1__ReadenMolds {
      public:
        /** Optional element 'ns1:ReadenMolds' of XSD type 'ns1:ReadenMolds' */
        _ns1__ReadenMolds *ns1__ReadenMolds;
      public:
        /** Return unique type id SOAP_TYPE___ns1__ReadenMolds */
        int soap_type() const { return SOAP_TYPE___ns1__ReadenMolds; }
        /** Constructor with member initializations */
        __ns1__ReadenMolds()
        {
          ns1__ReadenMolds = (_ns1__ReadenMolds *)0;
        }
        /** Friend allocator used by soap_new___ns1__ReadenMolds(struct soap*, int) */
        friend SOAP_FMAC1 __ns1__ReadenMolds * SOAP_FMAC2 soap_instantiate___ns1__ReadenMolds(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:2176 */
#ifndef SOAP_TYPE___ns1__EjectedMolds
#define SOAP_TYPE___ns1__EjectedMolds (126)
/* Wrapper: */
struct __ns1__EjectedMolds {
      public:
        /** Optional element 'ns1:EjectedMolds' of XSD type 'ns1:EjectedMolds' */
        _ns1__EjectedMolds *ns1__EjectedMolds;
      public:
        /** Return unique type id SOAP_TYPE___ns1__EjectedMolds */
        int soap_type() const { return SOAP_TYPE___ns1__EjectedMolds; }
        /** Constructor with member initializations */
        __ns1__EjectedMolds()
        {
          ns1__EjectedMolds = (_ns1__EjectedMolds *)0;
        }
        /** Friend allocator used by soap_new___ns1__EjectedMolds(struct soap*, int) */
        friend SOAP_FMAC1 __ns1__EjectedMolds * SOAP_FMAC2 soap_instantiate___ns1__EjectedMolds(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:2242 */
#ifndef SOAP_TYPE___ns1__GetMoldsInSampleTable
#define SOAP_TYPE___ns1__GetMoldsInSampleTable (130)
/* Wrapper: */
struct __ns1__GetMoldsInSampleTable {
      public:
        /** Optional element 'ns1:GetMoldsInSampleTable' of XSD type 'ns1:GetMoldsInSampleTable' */
        _ns1__GetMoldsInSampleTable *ns1__GetMoldsInSampleTable;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetMoldsInSampleTable */
        int soap_type() const { return SOAP_TYPE___ns1__GetMoldsInSampleTable; }
        /** Constructor with member initializations */
        __ns1__GetMoldsInSampleTable()
        {
          ns1__GetMoldsInSampleTable = (_ns1__GetMoldsInSampleTable *)0;
        }
        /** Friend allocator used by soap_new___ns1__GetMoldsInSampleTable(struct soap*, int) */
        friend SOAP_FMAC1 __ns1__GetMoldsInSampleTable * SOAP_FMAC2 soap_instantiate___ns1__GetMoldsInSampleTable(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:2308 */
#ifndef SOAP_TYPE___ns1__ChangeMountedMolds
#define SOAP_TYPE___ns1__ChangeMountedMolds (134)
/* Wrapper: */
struct __ns1__ChangeMountedMolds {
      public:
        /** Optional element 'ns1:ChangeMountedMolds' of XSD type 'ns1:ChangeMountedMolds' */
        _ns1__ChangeMountedMolds *ns1__ChangeMountedMolds;
      public:
        /** Return unique type id SOAP_TYPE___ns1__ChangeMountedMolds */
        int soap_type() const { return SOAP_TYPE___ns1__ChangeMountedMolds; }
        /** Constructor with member initializations */
        __ns1__ChangeMountedMolds()
        {
          ns1__ChangeMountedMolds = (_ns1__ChangeMountedMolds *)0;
        }
        /** Friend allocator used by soap_new___ns1__ChangeMountedMolds(struct soap*, int) */
        friend SOAP_FMAC1 __ns1__ChangeMountedMolds * SOAP_FMAC2 soap_instantiate___ns1__ChangeMountedMolds(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:2374 */
#ifndef SOAP_TYPE___ns1__AddEjectedMolds
#define SOAP_TYPE___ns1__AddEjectedMolds (138)
/* Wrapper: */
struct __ns1__AddEjectedMolds {
      public:
        /** Optional element 'ns1:AddEjectedMolds' of XSD type 'ns1:AddEjectedMolds' */
        _ns1__AddEjectedMolds *ns1__AddEjectedMolds;
      public:
        /** Return unique type id SOAP_TYPE___ns1__AddEjectedMolds */
        int soap_type() const { return SOAP_TYPE___ns1__AddEjectedMolds; }
        /** Constructor with member initializations */
        __ns1__AddEjectedMolds()
        {
          ns1__AddEjectedMolds = (_ns1__AddEjectedMolds *)0;
        }
        /** Friend allocator used by soap_new___ns1__AddEjectedMolds(struct soap*, int) */
        friend SOAP_FMAC1 __ns1__AddEjectedMolds * SOAP_FMAC2 soap_instantiate___ns1__AddEjectedMolds(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:2440 */
#ifndef SOAP_TYPE___ns1__EraseMoldsInSampleTable
#define SOAP_TYPE___ns1__EraseMoldsInSampleTable (142)
/* Wrapper: */
struct __ns1__EraseMoldsInSampleTable {
      public:
        /** Optional element 'ns1:EraseMoldsInSampleTable' of XSD type 'ns1:EraseMoldsInSampleTable' */
        _ns1__EraseMoldsInSampleTable *ns1__EraseMoldsInSampleTable;
      public:
        /** Return unique type id SOAP_TYPE___ns1__EraseMoldsInSampleTable */
        int soap_type() const { return SOAP_TYPE___ns1__EraseMoldsInSampleTable; }
        /** Constructor with member initializations */
        __ns1__EraseMoldsInSampleTable()
        {
          ns1__EraseMoldsInSampleTable = (_ns1__EraseMoldsInSampleTable *)0;
        }
        /** Friend allocator used by soap_new___ns1__EraseMoldsInSampleTable(struct soap*, int) */
        friend SOAP_FMAC1 __ns1__EraseMoldsInSampleTable * SOAP_FMAC2 soap_instantiate___ns1__EraseMoldsInSampleTable(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:2506 */
#ifndef SOAP_TYPE___ns1__ChangeMoldsInSampleTable
#define SOAP_TYPE___ns1__ChangeMoldsInSampleTable (146)
/* Wrapper: */
struct __ns1__ChangeMoldsInSampleTable {
      public:
        /** Optional element 'ns1:ChangeMoldsInSampleTable' of XSD type 'ns1:ChangeMoldsInSampleTable' */
        _ns1__ChangeMoldsInSampleTable *ns1__ChangeMoldsInSampleTable;
      public:
        /** Return unique type id SOAP_TYPE___ns1__ChangeMoldsInSampleTable */
        int soap_type() const { return SOAP_TYPE___ns1__ChangeMoldsInSampleTable; }
        /** Constructor with member initializations */
        __ns1__ChangeMoldsInSampleTable()
        {
          ns1__ChangeMoldsInSampleTable = (_ns1__ChangeMoldsInSampleTable *)0;
        }
        /** Friend allocator used by soap_new___ns1__ChangeMoldsInSampleTable(struct soap*, int) */
        friend SOAP_FMAC1 __ns1__ChangeMoldsInSampleTable * SOAP_FMAC2 soap_instantiate___ns1__ChangeMoldsInSampleTable(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:2572 */
#ifndef SOAP_TYPE___ns1__GetVersions
#define SOAP_TYPE___ns1__GetVersions (150)
/* Wrapper: */
struct __ns1__GetVersions {
      public:
        /** Optional element 'ns1:GetVersions' of XSD type 'ns1:GetVersions' */
        _ns1__GetVersions *ns1__GetVersions;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetVersions */
        int soap_type() const { return SOAP_TYPE___ns1__GetVersions; }
        /** Constructor with member initializations */
        __ns1__GetVersions()
        {
          ns1__GetVersions = (_ns1__GetVersions *)0;
        }
        /** Friend allocator used by soap_new___ns1__GetVersions(struct soap*, int) */
        friend SOAP_FMAC1 __ns1__GetVersions * SOAP_FMAC2 soap_instantiate___ns1__GetVersions(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:2638 */
#ifndef SOAP_TYPE___ns1__ChangeSamples
#define SOAP_TYPE___ns1__ChangeSamples (154)
/* Wrapper: */
struct __ns1__ChangeSamples {
      public:
        /** Optional element 'ns1:ChangeSamples' of XSD type 'ns1:ChangeSamples' */
        _ns1__ChangeSamples *ns1__ChangeSamples;
      public:
        /** Return unique type id SOAP_TYPE___ns1__ChangeSamples */
        int soap_type() const { return SOAP_TYPE___ns1__ChangeSamples; }
        /** Constructor with member initializations */
        __ns1__ChangeSamples()
        {
          ns1__ChangeSamples = (_ns1__ChangeSamples *)0;
        }
        /** Friend allocator used by soap_new___ns1__ChangeSamples(struct soap*, int) */
        friend SOAP_FMAC1 __ns1__ChangeSamples * SOAP_FMAC2 soap_instantiate___ns1__ChangeSamples(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:2704 */
#ifndef SOAP_TYPE___ns1__Counts_
#define SOAP_TYPE___ns1__Counts_ (156)
/* Wrapper: */
struct __ns1__Counts_ {
      public:
        /** Optional element 'ns1:Counts' of XSD type 'ns1:Counts' */
        _ns1__Counts *ns1__Counts;
      public:
        /** Return unique type id SOAP_TYPE___ns1__Counts_ */
        int soap_type() const { return SOAP_TYPE___ns1__Counts_; }
        /** Constructor with member initializations */
        __ns1__Counts_()
        {
          ns1__Counts = (_ns1__Counts *)0;
        }
        /** Friend allocator used by soap_new___ns1__Counts_(struct soap*, int) */
        friend SOAP_FMAC1 __ns1__Counts_ * SOAP_FMAC2 soap_instantiate___ns1__Counts_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:2770 */
#ifndef SOAP_TYPE___ns1__GetAlarmsSinceLastQuery_
#define SOAP_TYPE___ns1__GetAlarmsSinceLastQuery_ (158)
/* Wrapper: */
struct __ns1__GetAlarmsSinceLastQuery_ {
      public:
        /** Optional element 'ns1:GetAlarmsSinceLastQuery' of XSD type 'ns1:GetAlarmsSinceLastQuery' */
        _ns1__GetAlarmsSinceLastQuery *ns1__GetAlarmsSinceLastQuery;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetAlarmsSinceLastQuery_ */
        int soap_type() const { return SOAP_TYPE___ns1__GetAlarmsSinceLastQuery_; }
        /** Constructor with member initializations */
        __ns1__GetAlarmsSinceLastQuery_()
        {
          ns1__GetAlarmsSinceLastQuery = (_ns1__GetAlarmsSinceLastQuery *)0;
        }
        /** Friend allocator used by soap_new___ns1__GetAlarmsSinceLastQuery_(struct soap*, int) */
        friend SOAP_FMAC1 __ns1__GetAlarmsSinceLastQuery_ * SOAP_FMAC2 soap_instantiate___ns1__GetAlarmsSinceLastQuery_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:2836 */
#ifndef SOAP_TYPE___ns1__GetAlarms_
#define SOAP_TYPE___ns1__GetAlarms_ (160)
/* Wrapper: */
struct __ns1__GetAlarms_ {
      public:
        /** Optional element 'ns1:GetAlarms' of XSD type 'ns1:GetAlarms' */
        _ns1__GetAlarms *ns1__GetAlarms;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetAlarms_ */
        int soap_type() const { return SOAP_TYPE___ns1__GetAlarms_; }
        /** Constructor with member initializations */
        __ns1__GetAlarms_()
        {
          ns1__GetAlarms = (_ns1__GetAlarms *)0;
        }
        /** Friend allocator used by soap_new___ns1__GetAlarms_(struct soap*, int) */
        friend SOAP_FMAC1 __ns1__GetAlarms_ * SOAP_FMAC2 soap_instantiate___ns1__GetAlarms_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:2902 */
#ifndef SOAP_TYPE___ns1__MountedMolds_
#define SOAP_TYPE___ns1__MountedMolds_ (162)
/* Wrapper: */
struct __ns1__MountedMolds_ {
      public:
        /** Optional element 'ns1:MountedMolds' of XSD type 'ns1:MountedMolds' */
        _ns1__MountedMolds *ns1__MountedMolds;
      public:
        /** Return unique type id SOAP_TYPE___ns1__MountedMolds_ */
        int soap_type() const { return SOAP_TYPE___ns1__MountedMolds_; }
        /** Constructor with member initializations */
        __ns1__MountedMolds_()
        {
          ns1__MountedMolds = (_ns1__MountedMolds *)0;
        }
        /** Friend allocator used by soap_new___ns1__MountedMolds_(struct soap*, int) */
        friend SOAP_FMAC1 __ns1__MountedMolds_ * SOAP_FMAC2 soap_instantiate___ns1__MountedMolds_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:2968 */
#ifndef SOAP_TYPE___ns1__Measures_
#define SOAP_TYPE___ns1__Measures_ (164)
/* Wrapper: */
struct __ns1__Measures_ {
      public:
        /** Optional element 'ns1:Measures' of XSD type 'ns1:Measures' */
        _ns1__Measures *ns1__Measures;
      public:
        /** Return unique type id SOAP_TYPE___ns1__Measures_ */
        int soap_type() const { return SOAP_TYPE___ns1__Measures_; }
        /** Constructor with member initializations */
        __ns1__Measures_()
        {
          ns1__Measures = (_ns1__Measures *)0;
        }
        /** Friend allocator used by soap_new___ns1__Measures_(struct soap*, int) */
        friend SOAP_FMAC1 __ns1__Measures_ * SOAP_FMAC2 soap_instantiate___ns1__Measures_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:3034 */
#ifndef SOAP_TYPE___ns1__CumulCounts_
#define SOAP_TYPE___ns1__CumulCounts_ (166)
/* Wrapper: */
struct __ns1__CumulCounts_ {
      public:
        /** Optional element 'ns1:CumulCounts' of XSD type 'ns1:CumulCounts' */
        _ns1__CumulCounts *ns1__CumulCounts;
      public:
        /** Return unique type id SOAP_TYPE___ns1__CumulCounts_ */
        int soap_type() const { return SOAP_TYPE___ns1__CumulCounts_; }
        /** Constructor with member initializations */
        __ns1__CumulCounts_()
        {
          ns1__CumulCounts = (_ns1__CumulCounts *)0;
        }
        /** Friend allocator used by soap_new___ns1__CumulCounts_(struct soap*, int) */
        friend SOAP_FMAC1 __ns1__CumulCounts_ * SOAP_FMAC2 soap_instantiate___ns1__CumulCounts_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:3100 */
#ifndef SOAP_TYPE___ns1__ReadenMolds_
#define SOAP_TYPE___ns1__ReadenMolds_ (168)
/* Wrapper: */
struct __ns1__ReadenMolds_ {
      public:
        /** Optional element 'ns1:ReadenMolds' of XSD type 'ns1:ReadenMolds' */
        _ns1__ReadenMolds *ns1__ReadenMolds;
      public:
        /** Return unique type id SOAP_TYPE___ns1__ReadenMolds_ */
        int soap_type() const { return SOAP_TYPE___ns1__ReadenMolds_; }
        /** Constructor with member initializations */
        __ns1__ReadenMolds_()
        {
          ns1__ReadenMolds = (_ns1__ReadenMolds *)0;
        }
        /** Friend allocator used by soap_new___ns1__ReadenMolds_(struct soap*, int) */
        friend SOAP_FMAC1 __ns1__ReadenMolds_ * SOAP_FMAC2 soap_instantiate___ns1__ReadenMolds_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:3166 */
#ifndef SOAP_TYPE___ns1__EjectedMolds_
#define SOAP_TYPE___ns1__EjectedMolds_ (170)
/* Wrapper: */
struct __ns1__EjectedMolds_ {
      public:
        /** Optional element 'ns1:EjectedMolds' of XSD type 'ns1:EjectedMolds' */
        _ns1__EjectedMolds *ns1__EjectedMolds;
      public:
        /** Return unique type id SOAP_TYPE___ns1__EjectedMolds_ */
        int soap_type() const { return SOAP_TYPE___ns1__EjectedMolds_; }
        /** Constructor with member initializations */
        __ns1__EjectedMolds_()
        {
          ns1__EjectedMolds = (_ns1__EjectedMolds *)0;
        }
        /** Friend allocator used by soap_new___ns1__EjectedMolds_(struct soap*, int) */
        friend SOAP_FMAC1 __ns1__EjectedMolds_ * SOAP_FMAC2 soap_instantiate___ns1__EjectedMolds_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:3232 */
#ifndef SOAP_TYPE___ns1__GetMoldsInSampleTable_
#define SOAP_TYPE___ns1__GetMoldsInSampleTable_ (172)
/* Wrapper: */
struct __ns1__GetMoldsInSampleTable_ {
      public:
        /** Optional element 'ns1:GetMoldsInSampleTable' of XSD type 'ns1:GetMoldsInSampleTable' */
        _ns1__GetMoldsInSampleTable *ns1__GetMoldsInSampleTable;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetMoldsInSampleTable_ */
        int soap_type() const { return SOAP_TYPE___ns1__GetMoldsInSampleTable_; }
        /** Constructor with member initializations */
        __ns1__GetMoldsInSampleTable_()
        {
          ns1__GetMoldsInSampleTable = (_ns1__GetMoldsInSampleTable *)0;
        }
        /** Friend allocator used by soap_new___ns1__GetMoldsInSampleTable_(struct soap*, int) */
        friend SOAP_FMAC1 __ns1__GetMoldsInSampleTable_ * SOAP_FMAC2 soap_instantiate___ns1__GetMoldsInSampleTable_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:3298 */
#ifndef SOAP_TYPE___ns1__ChangeMountedMolds_
#define SOAP_TYPE___ns1__ChangeMountedMolds_ (174)
/* Wrapper: */
struct __ns1__ChangeMountedMolds_ {
      public:
        /** Optional element 'ns1:ChangeMountedMolds' of XSD type 'ns1:ChangeMountedMolds' */
        _ns1__ChangeMountedMolds *ns1__ChangeMountedMolds;
      public:
        /** Return unique type id SOAP_TYPE___ns1__ChangeMountedMolds_ */
        int soap_type() const { return SOAP_TYPE___ns1__ChangeMountedMolds_; }
        /** Constructor with member initializations */
        __ns1__ChangeMountedMolds_()
        {
          ns1__ChangeMountedMolds = (_ns1__ChangeMountedMolds *)0;
        }
        /** Friend allocator used by soap_new___ns1__ChangeMountedMolds_(struct soap*, int) */
        friend SOAP_FMAC1 __ns1__ChangeMountedMolds_ * SOAP_FMAC2 soap_instantiate___ns1__ChangeMountedMolds_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:3364 */
#ifndef SOAP_TYPE___ns1__AddEjectedMolds_
#define SOAP_TYPE___ns1__AddEjectedMolds_ (176)
/* Wrapper: */
struct __ns1__AddEjectedMolds_ {
      public:
        /** Optional element 'ns1:AddEjectedMolds' of XSD type 'ns1:AddEjectedMolds' */
        _ns1__AddEjectedMolds *ns1__AddEjectedMolds;
      public:
        /** Return unique type id SOAP_TYPE___ns1__AddEjectedMolds_ */
        int soap_type() const { return SOAP_TYPE___ns1__AddEjectedMolds_; }
        /** Constructor with member initializations */
        __ns1__AddEjectedMolds_()
        {
          ns1__AddEjectedMolds = (_ns1__AddEjectedMolds *)0;
        }
        /** Friend allocator used by soap_new___ns1__AddEjectedMolds_(struct soap*, int) */
        friend SOAP_FMAC1 __ns1__AddEjectedMolds_ * SOAP_FMAC2 soap_instantiate___ns1__AddEjectedMolds_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:3430 */
#ifndef SOAP_TYPE___ns1__EraseMoldsInSampleTable_
#define SOAP_TYPE___ns1__EraseMoldsInSampleTable_ (178)
/* Wrapper: */
struct __ns1__EraseMoldsInSampleTable_ {
      public:
        /** Optional element 'ns1:EraseMoldsInSampleTable' of XSD type 'ns1:EraseMoldsInSampleTable' */
        _ns1__EraseMoldsInSampleTable *ns1__EraseMoldsInSampleTable;
      public:
        /** Return unique type id SOAP_TYPE___ns1__EraseMoldsInSampleTable_ */
        int soap_type() const { return SOAP_TYPE___ns1__EraseMoldsInSampleTable_; }
        /** Constructor with member initializations */
        __ns1__EraseMoldsInSampleTable_()
        {
          ns1__EraseMoldsInSampleTable = (_ns1__EraseMoldsInSampleTable *)0;
        }
        /** Friend allocator used by soap_new___ns1__EraseMoldsInSampleTable_(struct soap*, int) */
        friend SOAP_FMAC1 __ns1__EraseMoldsInSampleTable_ * SOAP_FMAC2 soap_instantiate___ns1__EraseMoldsInSampleTable_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:3496 */
#ifndef SOAP_TYPE___ns1__ChangeMoldsInSampleTable_
#define SOAP_TYPE___ns1__ChangeMoldsInSampleTable_ (180)
/* Wrapper: */
struct __ns1__ChangeMoldsInSampleTable_ {
      public:
        /** Optional element 'ns1:ChangeMoldsInSampleTable' of XSD type 'ns1:ChangeMoldsInSampleTable' */
        _ns1__ChangeMoldsInSampleTable *ns1__ChangeMoldsInSampleTable;
      public:
        /** Return unique type id SOAP_TYPE___ns1__ChangeMoldsInSampleTable_ */
        int soap_type() const { return SOAP_TYPE___ns1__ChangeMoldsInSampleTable_; }
        /** Constructor with member initializations */
        __ns1__ChangeMoldsInSampleTable_()
        {
          ns1__ChangeMoldsInSampleTable = (_ns1__ChangeMoldsInSampleTable *)0;
        }
        /** Friend allocator used by soap_new___ns1__ChangeMoldsInSampleTable_(struct soap*, int) */
        friend SOAP_FMAC1 __ns1__ChangeMoldsInSampleTable_ * SOAP_FMAC2 soap_instantiate___ns1__ChangeMoldsInSampleTable_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:3562 */
#ifndef SOAP_TYPE___ns1__GetVersions_
#define SOAP_TYPE___ns1__GetVersions_ (182)
/* Wrapper: */
struct __ns1__GetVersions_ {
      public:
        /** Optional element 'ns1:GetVersions' of XSD type 'ns1:GetVersions' */
        _ns1__GetVersions *ns1__GetVersions;
      public:
        /** Return unique type id SOAP_TYPE___ns1__GetVersions_ */
        int soap_type() const { return SOAP_TYPE___ns1__GetVersions_; }
        /** Constructor with member initializations */
        __ns1__GetVersions_()
        {
          ns1__GetVersions = (_ns1__GetVersions *)0;
        }
        /** Friend allocator used by soap_new___ns1__GetVersions_(struct soap*, int) */
        friend SOAP_FMAC1 __ns1__GetVersions_ * SOAP_FMAC2 soap_instantiate___ns1__GetVersions_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:3628 */
#ifndef SOAP_TYPE___ns1__ChangeSamples_
#define SOAP_TYPE___ns1__ChangeSamples_ (184)
/* Wrapper: */
struct __ns1__ChangeSamples_ {
      public:
        /** Optional element 'ns1:ChangeSamples' of XSD type 'ns1:ChangeSamples' */
        _ns1__ChangeSamples *ns1__ChangeSamples;
      public:
        /** Return unique type id SOAP_TYPE___ns1__ChangeSamples_ */
        int soap_type() const { return SOAP_TYPE___ns1__ChangeSamples_; }
        /** Constructor with member initializations */
        __ns1__ChangeSamples_()
        {
          ns1__ChangeSamples = (_ns1__ChangeSamples *)0;
        }
        /** Friend allocator used by soap_new___ns1__ChangeSamples_(struct soap*, int) */
        friend SOAP_FMAC1 __ns1__ChangeSamples_ * SOAP_FMAC2 soap_instantiate___ns1__ChangeSamples_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* service.h:3929 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (185)
/* SOAP_ENV__Header: */
struct SOAP_ENV__Header {
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Header */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Header; }
        /** Constructor with member initializations */
        SOAP_ENV__Header()
        {
        }
        /** Friend allocator used by soap_new_SOAP_ENV__Header(struct soap*, int) */
        friend SOAP_FMAC1 SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* service.h:3929 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (186)
/* Type SOAP_ENV__Code is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* SOAP_ENV__Code: */
struct SOAP_ENV__Code {
      public:
        /** Optional element 'SOAP-ENV:Value' of XSD type 'xsd:QName' */
        char *SOAP_ENV__Value;
        /** Optional element 'SOAP-ENV:Subcode' of XSD type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Subcode;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Code */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Code; }
        /** Constructor with member initializations */
        SOAP_ENV__Code()
        {
          SOAP_ENV__Value = (char *)0;
          SOAP_ENV__Subcode = (struct SOAP_ENV__Code *)0;
        }
        /** Friend allocator used by soap_new_SOAP_ENV__Code(struct soap*, int) */
        friend SOAP_FMAC1 SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* service.h:3929 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (188)
/* SOAP_ENV__Detail: */
struct SOAP_ENV__Detail {
      public:
        char *__any;
        /** Any type of element 'fault' assigned to fault with its SOAP_TYPE_T assigned to __type */
        /** Do not create a cyclic data structure throught this member unless SOAP encoding or SOAP_XML_GRAPH are used for id-ref serialization */
        int __type;
        void *fault;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Detail */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Detail; }
        /** Constructor with member initializations */
        SOAP_ENV__Detail()
        {
          __any = (char *)0;
          __type = 0;
          fault = NULL;
        }
        /** Friend allocator used by soap_new_SOAP_ENV__Detail(struct soap*, int) */
        friend SOAP_FMAC1 SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* service.h:3929 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (191)
/* SOAP_ENV__Reason: */
struct SOAP_ENV__Reason {
      public:
        /** Optional element 'SOAP-ENV:Text' of XSD type 'xsd:string' */
        char *SOAP_ENV__Text;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Reason */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Reason; }
        /** Constructor with member initializations */
        SOAP_ENV__Reason()
        {
          SOAP_ENV__Text = (char *)0;
        }
        /** Friend allocator used by soap_new_SOAP_ENV__Reason(struct soap*, int) */
        friend SOAP_FMAC1 SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* service.h:3929 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (192)
/* SOAP_ENV__Fault: */
struct SOAP_ENV__Fault {
      public:
        /** Optional element 'faultcode' of XSD type 'xsd:QName' */
        char *faultcode;
        /** Optional element 'faultstring' of XSD type 'xsd:string' */
        char *faultstring;
        /** Optional element 'faultactor' of XSD type 'xsd:string' */
        char *faultactor;
        /** Optional element 'detail' of XSD type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *detail;
        /** Optional element 'SOAP-ENV:Code' of XSD type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Code;
        /** Optional element 'SOAP-ENV:Reason' of XSD type 'SOAP-ENV:Reason' */
        struct SOAP_ENV__Reason *SOAP_ENV__Reason;
        /** Optional element 'SOAP-ENV:Node' of XSD type 'xsd:string' */
        char *SOAP_ENV__Node;
        /** Optional element 'SOAP-ENV:Role' of XSD type 'xsd:string' */
        char *SOAP_ENV__Role;
        /** Optional element 'SOAP-ENV:Detail' of XSD type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *SOAP_ENV__Detail;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Fault */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Fault; }
        /** Constructor with member initializations */
        SOAP_ENV__Fault()
        {
          faultcode = (char *)0;
          faultstring = (char *)0;
          faultactor = (char *)0;
          detail = (struct SOAP_ENV__Detail *)0;
          SOAP_ENV__Code = (struct SOAP_ENV__Code *)0;
          SOAP_ENV__Reason = (struct SOAP_ENV__Reason *)0;
          SOAP_ENV__Node = (char *)0;
          SOAP_ENV__Role = (char *)0;
          SOAP_ENV__Detail = (struct SOAP_ENV__Detail *)0;
        }
        /** Friend allocator used by soap_new_SOAP_ENV__Fault(struct soap*, int) */
        friend SOAP_FMAC1 SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/


/* service.h:119 */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

/* service.h:119 */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif

/******************************************************************************\
 *                                                                            *
 * Serializable Types                                                         *
 *                                                                            *
\******************************************************************************/


/* char has binding name 'byte' for type 'xsd:byte' */
#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif

/* int has binding name 'int' for type 'xsd:int' */
#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif

/* enum ns1__EResetMode has binding name 'ns1__EResetMode' for type 'ns1:EResetMode' */
#ifndef SOAP_TYPE_ns1__EResetMode
#define SOAP_TYPE_ns1__EResetMode (50)
#endif

/* enum ns1__CodeDetection has binding name 'ns1__CodeDetection' for type 'ns1:CodeDetection' */
#ifndef SOAP_TYPE_ns1__CodeDetection
#define SOAP_TYPE_ns1__CodeDetection (49)
#endif

/* _ns1__ChangeSamplesResponse_ChangeSamplesResult has binding name '_ns1__ChangeSamplesResponse_ChangeSamplesResult' for type '' */
#ifndef SOAP_TYPE__ns1__ChangeSamplesResponse_ChangeSamplesResult
#define SOAP_TYPE__ns1__ChangeSamplesResponse_ChangeSamplesResult (93)
#endif

/* _ns1__GetVersionsResponse_GetVersionsResult has binding name '_ns1__GetVersionsResponse_GetVersionsResult' for type '' */
#ifndef SOAP_TYPE__ns1__GetVersionsResponse_GetVersionsResult
#define SOAP_TYPE__ns1__GetVersionsResponse_GetVersionsResult (90)
#endif

/* _ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult has binding name '_ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult' for type '' */
#ifndef SOAP_TYPE__ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult
#define SOAP_TYPE__ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult (88)
#endif

/* _ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult has binding name '_ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult' for type '' */
#ifndef SOAP_TYPE__ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult
#define SOAP_TYPE__ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult (85)
#endif

/* _ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult has binding name '_ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult' for type '' */
#ifndef SOAP_TYPE__ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult
#define SOAP_TYPE__ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult (82)
#endif

/* _ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult has binding name '_ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult' for type '' */
#ifndef SOAP_TYPE__ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult
#define SOAP_TYPE__ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult (79)
#endif

/* _ns1__EjectedMoldsResponse_EjectedMoldsResult has binding name '_ns1__EjectedMoldsResponse_EjectedMoldsResult' for type '' */
#ifndef SOAP_TYPE__ns1__EjectedMoldsResponse_EjectedMoldsResult
#define SOAP_TYPE__ns1__EjectedMoldsResponse_EjectedMoldsResult (77)
#endif

/* _ns1__ReadenMoldsResponse_ReadenMoldsResult has binding name '_ns1__ReadenMoldsResponse_ReadenMoldsResult' for type '' */
#ifndef SOAP_TYPE__ns1__ReadenMoldsResponse_ReadenMoldsResult
#define SOAP_TYPE__ns1__ReadenMoldsResponse_ReadenMoldsResult (75)
#endif

/* _ns1__CumulCountsResponse_CumulCountsResult has binding name '_ns1__CumulCountsResponse_CumulCountsResult' for type '' */
#ifndef SOAP_TYPE__ns1__CumulCountsResponse_CumulCountsResult
#define SOAP_TYPE__ns1__CumulCountsResponse_CumulCountsResult (73)
#endif

/* _ns1__MeasuresResponse_MeasuresResult has binding name '_ns1__MeasuresResponse_MeasuresResult' for type '' */
#ifndef SOAP_TYPE__ns1__MeasuresResponse_MeasuresResult
#define SOAP_TYPE__ns1__MeasuresResponse_MeasuresResult (71)
#endif

/* _ns1__MountedMoldsResponse_MountedMoldsResult has binding name '_ns1__MountedMoldsResponse_MountedMoldsResult' for type '' */
#ifndef SOAP_TYPE__ns1__MountedMoldsResponse_MountedMoldsResult
#define SOAP_TYPE__ns1__MountedMoldsResponse_MountedMoldsResult (69)
#endif

/* _ns1__GetAlarmsResponse_GetAlarmsResult has binding name '_ns1__GetAlarmsResponse_GetAlarmsResult' for type '' */
#ifndef SOAP_TYPE__ns1__GetAlarmsResponse_GetAlarmsResult
#define SOAP_TYPE__ns1__GetAlarmsResponse_GetAlarmsResult (67)
#endif

/* _ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult has binding name '_ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult' for type '' */
#ifndef SOAP_TYPE__ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult
#define SOAP_TYPE__ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult (65)
#endif

/* _ns1__CountsResponse_CountsResult has binding name '_ns1__CountsResponse_CountsResult' for type '' */
#ifndef SOAP_TYPE__ns1__CountsResponse_CountsResult
#define SOAP_TYPE__ns1__CountsResponse_CountsResult (63)
#endif

/* _ns1__ChangeSamplesResponse has binding name '_ns1__ChangeSamplesResponse' for type '' */
#ifndef SOAP_TYPE__ns1__ChangeSamplesResponse
#define SOAP_TYPE__ns1__ChangeSamplesResponse (48)
#endif

/* _ns1__ChangeSamples has binding name '_ns1__ChangeSamples' for type '' */
#ifndef SOAP_TYPE__ns1__ChangeSamples
#define SOAP_TYPE__ns1__ChangeSamples (47)
#endif

/* _ns1__GetVersionsResponse has binding name '_ns1__GetVersionsResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetVersionsResponse
#define SOAP_TYPE__ns1__GetVersionsResponse (46)
#endif

/* _ns1__GetVersions has binding name '_ns1__GetVersions' for type '' */
#ifndef SOAP_TYPE__ns1__GetVersions
#define SOAP_TYPE__ns1__GetVersions (45)
#endif

/* _ns1__ChangeMoldsInSampleTableResponse has binding name '_ns1__ChangeMoldsInSampleTableResponse' for type '' */
#ifndef SOAP_TYPE__ns1__ChangeMoldsInSampleTableResponse
#define SOAP_TYPE__ns1__ChangeMoldsInSampleTableResponse (44)
#endif

/* _ns1__ChangeMoldsInSampleTable has binding name '_ns1__ChangeMoldsInSampleTable' for type '' */
#ifndef SOAP_TYPE__ns1__ChangeMoldsInSampleTable
#define SOAP_TYPE__ns1__ChangeMoldsInSampleTable (43)
#endif

/* _ns1__EraseMoldsInSampleTableResponse has binding name '_ns1__EraseMoldsInSampleTableResponse' for type '' */
#ifndef SOAP_TYPE__ns1__EraseMoldsInSampleTableResponse
#define SOAP_TYPE__ns1__EraseMoldsInSampleTableResponse (42)
#endif

/* _ns1__EraseMoldsInSampleTable has binding name '_ns1__EraseMoldsInSampleTable' for type '' */
#ifndef SOAP_TYPE__ns1__EraseMoldsInSampleTable
#define SOAP_TYPE__ns1__EraseMoldsInSampleTable (41)
#endif

/* _ns1__AddEjectedMoldsResponse has binding name '_ns1__AddEjectedMoldsResponse' for type '' */
#ifndef SOAP_TYPE__ns1__AddEjectedMoldsResponse
#define SOAP_TYPE__ns1__AddEjectedMoldsResponse (40)
#endif

/* _ns1__AddEjectedMolds has binding name '_ns1__AddEjectedMolds' for type '' */
#ifndef SOAP_TYPE__ns1__AddEjectedMolds
#define SOAP_TYPE__ns1__AddEjectedMolds (39)
#endif

/* _ns1__ChangeMountedMoldsResponse has binding name '_ns1__ChangeMountedMoldsResponse' for type '' */
#ifndef SOAP_TYPE__ns1__ChangeMountedMoldsResponse
#define SOAP_TYPE__ns1__ChangeMountedMoldsResponse (38)
#endif

/* _ns1__ChangeMountedMolds has binding name '_ns1__ChangeMountedMolds' for type '' */
#ifndef SOAP_TYPE__ns1__ChangeMountedMolds
#define SOAP_TYPE__ns1__ChangeMountedMolds (37)
#endif

/* _ns1__GetMoldsInSampleTableResponse has binding name '_ns1__GetMoldsInSampleTableResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetMoldsInSampleTableResponse
#define SOAP_TYPE__ns1__GetMoldsInSampleTableResponse (36)
#endif

/* _ns1__GetMoldsInSampleTable has binding name '_ns1__GetMoldsInSampleTable' for type '' */
#ifndef SOAP_TYPE__ns1__GetMoldsInSampleTable
#define SOAP_TYPE__ns1__GetMoldsInSampleTable (35)
#endif

/* _ns1__EjectedMoldsResponse has binding name '_ns1__EjectedMoldsResponse' for type '' */
#ifndef SOAP_TYPE__ns1__EjectedMoldsResponse
#define SOAP_TYPE__ns1__EjectedMoldsResponse (34)
#endif

/* _ns1__EjectedMolds has binding name '_ns1__EjectedMolds' for type '' */
#ifndef SOAP_TYPE__ns1__EjectedMolds
#define SOAP_TYPE__ns1__EjectedMolds (33)
#endif

/* _ns1__ReadenMoldsResponse has binding name '_ns1__ReadenMoldsResponse' for type '' */
#ifndef SOAP_TYPE__ns1__ReadenMoldsResponse
#define SOAP_TYPE__ns1__ReadenMoldsResponse (32)
#endif

/* _ns1__ReadenMolds has binding name '_ns1__ReadenMolds' for type '' */
#ifndef SOAP_TYPE__ns1__ReadenMolds
#define SOAP_TYPE__ns1__ReadenMolds (31)
#endif

/* _ns1__CumulCountsResponse has binding name '_ns1__CumulCountsResponse' for type '' */
#ifndef SOAP_TYPE__ns1__CumulCountsResponse
#define SOAP_TYPE__ns1__CumulCountsResponse (30)
#endif

/* _ns1__CumulCounts has binding name '_ns1__CumulCounts' for type '' */
#ifndef SOAP_TYPE__ns1__CumulCounts
#define SOAP_TYPE__ns1__CumulCounts (29)
#endif

/* _ns1__MeasuresResponse has binding name '_ns1__MeasuresResponse' for type '' */
#ifndef SOAP_TYPE__ns1__MeasuresResponse
#define SOAP_TYPE__ns1__MeasuresResponse (28)
#endif

/* _ns1__Measures has binding name '_ns1__Measures' for type '' */
#ifndef SOAP_TYPE__ns1__Measures
#define SOAP_TYPE__ns1__Measures (27)
#endif

/* _ns1__MountedMoldsResponse has binding name '_ns1__MountedMoldsResponse' for type '' */
#ifndef SOAP_TYPE__ns1__MountedMoldsResponse
#define SOAP_TYPE__ns1__MountedMoldsResponse (26)
#endif

/* _ns1__MountedMolds has binding name '_ns1__MountedMolds' for type '' */
#ifndef SOAP_TYPE__ns1__MountedMolds
#define SOAP_TYPE__ns1__MountedMolds (25)
#endif

/* _ns1__GetAlarmsResponse has binding name '_ns1__GetAlarmsResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetAlarmsResponse
#define SOAP_TYPE__ns1__GetAlarmsResponse (24)
#endif

/* _ns1__GetAlarms has binding name '_ns1__GetAlarms' for type '' */
#ifndef SOAP_TYPE__ns1__GetAlarms
#define SOAP_TYPE__ns1__GetAlarms (23)
#endif

/* _ns1__GetAlarmsSinceLastQueryResponse has binding name '_ns1__GetAlarmsSinceLastQueryResponse' for type '' */
#ifndef SOAP_TYPE__ns1__GetAlarmsSinceLastQueryResponse
#define SOAP_TYPE__ns1__GetAlarmsSinceLastQueryResponse (22)
#endif

/* _ns1__GetAlarmsSinceLastQuery has binding name '_ns1__GetAlarmsSinceLastQuery' for type '' */
#ifndef SOAP_TYPE__ns1__GetAlarmsSinceLastQuery
#define SOAP_TYPE__ns1__GetAlarmsSinceLastQuery (21)
#endif

/* _ns1__CountsResponse has binding name '_ns1__CountsResponse' for type '' */
#ifndef SOAP_TYPE__ns1__CountsResponse
#define SOAP_TYPE__ns1__CountsResponse (20)
#endif

/* _ns1__Counts has binding name '_ns1__Counts' for type '' */
#ifndef SOAP_TYPE__ns1__Counts
#define SOAP_TYPE__ns1__Counts (19)
#endif

/* ns1__PrelevementUnitaire has binding name 'ns1__PrelevementUnitaire' for type 'ns1:PrelevementUnitaire' */
#ifndef SOAP_TYPE_ns1__PrelevementUnitaire
#define SOAP_TYPE_ns1__PrelevementUnitaire (18)
#endif

/* ns1__ArrayOfPrelevementUnitaire has binding name 'ns1__ArrayOfPrelevementUnitaire' for type 'ns1:ArrayOfPrelevementUnitaire' */
#ifndef SOAP_TYPE_ns1__ArrayOfPrelevementUnitaire
#define SOAP_TYPE_ns1__ArrayOfPrelevementUnitaire (17)
#endif

/* ns1__MoulesPrelevesXml has binding name 'ns1__MoulesPrelevesXml' for type 'ns1:MoulesPrelevesXml' */
#ifndef SOAP_TYPE_ns1__MoulesPrelevesXml
#define SOAP_TYPE_ns1__MoulesPrelevesXml (16)
#endif

/* ns1__PrelevementWS_USCORE1_USCORE0_USCORE9 has binding name 'ns1__PrelevementWS_USCORE1_USCORE0_USCORE9' for type 'ns1:PrelevementWS_1_0_9' */
#ifndef SOAP_TYPE_ns1__PrelevementWS_USCORE1_USCORE0_USCORE9
#define SOAP_TYPE_ns1__PrelevementWS_USCORE1_USCORE0_USCORE9 (15)
#endif

/* ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9 has binding name 'ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9' for type 'ns1:MoulesPrelevesXmlPourWS1_0_9' */
#ifndef SOAP_TYPE_ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9
#define SOAP_TYPE_ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9 (14)
#endif

/* ns1__RejetMoule has binding name 'ns1__RejetMoule' for type 'ns1:RejetMoule' */
#ifndef SOAP_TYPE_ns1__RejetMoule
#define SOAP_TYPE_ns1__RejetMoule (13)
#endif

/* ns1__RejetMouleVue has binding name 'ns1__RejetMouleVue' for type 'ns1:RejetMouleVue' */
#ifndef SOAP_TYPE_ns1__RejetMouleVue
#define SOAP_TYPE_ns1__RejetMouleVue (12)
#endif

/* ns1__ArrayOfRejetMouleVue has binding name 'ns1__ArrayOfRejetMouleVue' for type 'ns1:ArrayOfRejetMouleVue' */
#ifndef SOAP_TYPE_ns1__ArrayOfRejetMouleVue
#define SOAP_TYPE_ns1__ArrayOfRejetMouleVue (11)
#endif

/* ns1__MoulesEjectesXml has binding name 'ns1__MoulesEjectesXml' for type 'ns1:MoulesEjectesXml' */
#ifndef SOAP_TYPE_ns1__MoulesEjectesXml
#define SOAP_TYPE_ns1__MoulesEjectesXml (10)
#endif

/* ns1__Moule has binding name 'ns1__Moule' for type 'ns1:Moule' */
#ifndef SOAP_TYPE_ns1__Moule
#define SOAP_TYPE_ns1__Moule (9)
#endif

/* ns1__ArrayOfMoule has binding name 'ns1__ArrayOfMoule' for type 'ns1:ArrayOfMoule' */
#ifndef SOAP_TYPE_ns1__ArrayOfMoule
#define SOAP_TYPE_ns1__ArrayOfMoule (8)
#endif

/* ns1__MountedMoldsXml has binding name 'ns1__MountedMoldsXml' for type 'ns1:MountedMoldsXml' */
#ifndef SOAP_TYPE_ns1__MountedMoldsXml
#define SOAP_TYPE_ns1__MountedMoldsXml (7)
#endif

/* struct SOAP_ENV__Fault has binding name 'SOAP_ENV__Fault' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (192)
#endif

/* struct SOAP_ENV__Reason has binding name 'SOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (191)
#endif

/* struct SOAP_ENV__Detail has binding name 'SOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (188)
#endif

/* struct SOAP_ENV__Code has binding name 'SOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (186)
#endif

/* struct SOAP_ENV__Header has binding name 'SOAP_ENV__Header' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (185)
#endif

/* struct SOAP_ENV__Reason * has binding name 'PointerToSOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (194)
#endif

/* struct SOAP_ENV__Detail * has binding name 'PointerToSOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (193)
#endif

/* struct SOAP_ENV__Code * has binding name 'PointerToSOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (187)
#endif

/* _ns1__ChangeSamples * has binding name 'PointerTo_ns1__ChangeSamples' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__ChangeSamples
#define SOAP_TYPE_PointerTo_ns1__ChangeSamples (151)
#endif

/* _ns1__GetVersions * has binding name 'PointerTo_ns1__GetVersions' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetVersions
#define SOAP_TYPE_PointerTo_ns1__GetVersions (147)
#endif

/* _ns1__ChangeMoldsInSampleTable * has binding name 'PointerTo_ns1__ChangeMoldsInSampleTable' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__ChangeMoldsInSampleTable
#define SOAP_TYPE_PointerTo_ns1__ChangeMoldsInSampleTable (143)
#endif

/* _ns1__EraseMoldsInSampleTable * has binding name 'PointerTo_ns1__EraseMoldsInSampleTable' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__EraseMoldsInSampleTable
#define SOAP_TYPE_PointerTo_ns1__EraseMoldsInSampleTable (139)
#endif

/* _ns1__AddEjectedMolds * has binding name 'PointerTo_ns1__AddEjectedMolds' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__AddEjectedMolds
#define SOAP_TYPE_PointerTo_ns1__AddEjectedMolds (135)
#endif

/* _ns1__ChangeMountedMolds * has binding name 'PointerTo_ns1__ChangeMountedMolds' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__ChangeMountedMolds
#define SOAP_TYPE_PointerTo_ns1__ChangeMountedMolds (131)
#endif

/* _ns1__GetMoldsInSampleTable * has binding name 'PointerTo_ns1__GetMoldsInSampleTable' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetMoldsInSampleTable
#define SOAP_TYPE_PointerTo_ns1__GetMoldsInSampleTable (127)
#endif

/* _ns1__EjectedMolds * has binding name 'PointerTo_ns1__EjectedMolds' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__EjectedMolds
#define SOAP_TYPE_PointerTo_ns1__EjectedMolds (123)
#endif

/* _ns1__ReadenMolds * has binding name 'PointerTo_ns1__ReadenMolds' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__ReadenMolds
#define SOAP_TYPE_PointerTo_ns1__ReadenMolds (119)
#endif

/* _ns1__CumulCounts * has binding name 'PointerTo_ns1__CumulCounts' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__CumulCounts
#define SOAP_TYPE_PointerTo_ns1__CumulCounts (115)
#endif

/* _ns1__Measures * has binding name 'PointerTo_ns1__Measures' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__Measures
#define SOAP_TYPE_PointerTo_ns1__Measures (111)
#endif

/* _ns1__MountedMolds * has binding name 'PointerTo_ns1__MountedMolds' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__MountedMolds
#define SOAP_TYPE_PointerTo_ns1__MountedMolds (107)
#endif

/* _ns1__GetAlarms * has binding name 'PointerTo_ns1__GetAlarms' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetAlarms
#define SOAP_TYPE_PointerTo_ns1__GetAlarms (103)
#endif

/* _ns1__GetAlarmsSinceLastQuery * has binding name 'PointerTo_ns1__GetAlarmsSinceLastQuery' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetAlarmsSinceLastQuery
#define SOAP_TYPE_PointerTo_ns1__GetAlarmsSinceLastQuery (99)
#endif

/* _ns1__Counts * has binding name 'PointerTo_ns1__Counts' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__Counts
#define SOAP_TYPE_PointerTo_ns1__Counts (95)
#endif

/* _ns1__ChangeSamplesResponse_ChangeSamplesResult * has binding name 'PointerTo_ns1__ChangeSamplesResponse_ChangeSamplesResult' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__ChangeSamplesResponse_ChangeSamplesResult
#define SOAP_TYPE_PointerTo_ns1__ChangeSamplesResponse_ChangeSamplesResult (94)
#endif

/* ns1__MoulesPrelevesXml * has binding name 'PointerTons1__MoulesPrelevesXml' for type 'ns1:MoulesPrelevesXml' */
#ifndef SOAP_TYPE_PointerTons1__MoulesPrelevesXml
#define SOAP_TYPE_PointerTons1__MoulesPrelevesXml (92)
#endif

/* _ns1__GetVersionsResponse_GetVersionsResult * has binding name 'PointerTo_ns1__GetVersionsResponse_GetVersionsResult' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetVersionsResponse_GetVersionsResult
#define SOAP_TYPE_PointerTo_ns1__GetVersionsResponse_GetVersionsResult (91)
#endif

/* _ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult * has binding name 'PointerTo_ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult
#define SOAP_TYPE_PointerTo_ns1__ChangeMoldsInSampleTableResponse_ChangeMoldsInSampleTableResult (89)
#endif

/* ns1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9 * has binding name 'PointerTons1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9' for type 'ns1:MoulesPrelevesXmlPourWS1_0_9' */
#ifndef SOAP_TYPE_PointerTons1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9
#define SOAP_TYPE_PointerTons1__MoulesPrelevesXmlPourWS1_USCORE0_USCORE9 (87)
#endif

/* _ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult * has binding name 'PointerTo_ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult
#define SOAP_TYPE_PointerTo_ns1__EraseMoldsInSampleTableResponse_EraseMoldsInSampleTableResult (86)
#endif

/* ns1__MoulesEjectesXml * has binding name 'PointerTons1__MoulesEjectesXml' for type 'ns1:MoulesEjectesXml' */
#ifndef SOAP_TYPE_PointerTons1__MoulesEjectesXml
#define SOAP_TYPE_PointerTons1__MoulesEjectesXml (84)
#endif

/* _ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult * has binding name 'PointerTo_ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult
#define SOAP_TYPE_PointerTo_ns1__ChangeMountedMoldsResponse_ChangeMountedMoldsResult (83)
#endif

/* ns1__MountedMoldsXml * has binding name 'PointerTons1__MountedMoldsXml' for type 'ns1:MountedMoldsXml' */
#ifndef SOAP_TYPE_PointerTons1__MountedMoldsXml
#define SOAP_TYPE_PointerTons1__MountedMoldsXml (81)
#endif

/* _ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult * has binding name 'PointerTo_ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult
#define SOAP_TYPE_PointerTo_ns1__GetMoldsInSampleTableResponse_GetMoldsInSampleTableResult (80)
#endif

/* _ns1__EjectedMoldsResponse_EjectedMoldsResult * has binding name 'PointerTo_ns1__EjectedMoldsResponse_EjectedMoldsResult' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__EjectedMoldsResponse_EjectedMoldsResult
#define SOAP_TYPE_PointerTo_ns1__EjectedMoldsResponse_EjectedMoldsResult (78)
#endif

/* _ns1__ReadenMoldsResponse_ReadenMoldsResult * has binding name 'PointerTo_ns1__ReadenMoldsResponse_ReadenMoldsResult' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__ReadenMoldsResponse_ReadenMoldsResult
#define SOAP_TYPE_PointerTo_ns1__ReadenMoldsResponse_ReadenMoldsResult (76)
#endif

/* _ns1__CumulCountsResponse_CumulCountsResult * has binding name 'PointerTo_ns1__CumulCountsResponse_CumulCountsResult' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__CumulCountsResponse_CumulCountsResult
#define SOAP_TYPE_PointerTo_ns1__CumulCountsResponse_CumulCountsResult (74)
#endif

/* _ns1__MeasuresResponse_MeasuresResult * has binding name 'PointerTo_ns1__MeasuresResponse_MeasuresResult' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__MeasuresResponse_MeasuresResult
#define SOAP_TYPE_PointerTo_ns1__MeasuresResponse_MeasuresResult (72)
#endif

/* _ns1__MountedMoldsResponse_MountedMoldsResult * has binding name 'PointerTo_ns1__MountedMoldsResponse_MountedMoldsResult' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__MountedMoldsResponse_MountedMoldsResult
#define SOAP_TYPE_PointerTo_ns1__MountedMoldsResponse_MountedMoldsResult (70)
#endif

/* _ns1__GetAlarmsResponse_GetAlarmsResult * has binding name 'PointerTo_ns1__GetAlarmsResponse_GetAlarmsResult' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetAlarmsResponse_GetAlarmsResult
#define SOAP_TYPE_PointerTo_ns1__GetAlarmsResponse_GetAlarmsResult (68)
#endif

/* _ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult * has binding name 'PointerTo_ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult
#define SOAP_TYPE_PointerTo_ns1__GetAlarmsSinceLastQueryResponse_GetAlarmsSinceLastQueryResult (66)
#endif

/* _ns1__CountsResponse_CountsResult * has binding name 'PointerTo_ns1__CountsResponse_CountsResult' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__CountsResponse_CountsResult
#define SOAP_TYPE_PointerTo_ns1__CountsResponse_CountsResult (64)
#endif

/* ns1__PrelevementUnitaire ** has binding name 'PointerToPointerTons1__PrelevementUnitaire' for type 'ns1:PrelevementUnitaire' */
#ifndef SOAP_TYPE_PointerToPointerTons1__PrelevementUnitaire
#define SOAP_TYPE_PointerToPointerTons1__PrelevementUnitaire (62)
#endif

/* ns1__PrelevementUnitaire * has binding name 'PointerTons1__PrelevementUnitaire' for type 'ns1:PrelevementUnitaire' */
#ifndef SOAP_TYPE_PointerTons1__PrelevementUnitaire
#define SOAP_TYPE_PointerTons1__PrelevementUnitaire (61)
#endif

/* ns1__ArrayOfPrelevementUnitaire * has binding name 'PointerTons1__ArrayOfPrelevementUnitaire' for type 'ns1:ArrayOfPrelevementUnitaire' */
#ifndef SOAP_TYPE_PointerTons1__ArrayOfPrelevementUnitaire
#define SOAP_TYPE_PointerTons1__ArrayOfPrelevementUnitaire (60)
#endif

/* ns1__PrelevementWS_USCORE1_USCORE0_USCORE9 ** has binding name 'PointerToPointerTons1__PrelevementWS_USCORE1_USCORE0_USCORE9' for type 'ns1:PrelevementWS_1_0_9' */
#ifndef SOAP_TYPE_PointerToPointerTons1__PrelevementWS_USCORE1_USCORE0_USCORE9
#define SOAP_TYPE_PointerToPointerTons1__PrelevementWS_USCORE1_USCORE0_USCORE9 (59)
#endif

/* ns1__PrelevementWS_USCORE1_USCORE0_USCORE9 * has binding name 'PointerTons1__PrelevementWS_USCORE1_USCORE0_USCORE9' for type 'ns1:PrelevementWS_1_0_9' */
#ifndef SOAP_TYPE_PointerTons1__PrelevementWS_USCORE1_USCORE0_USCORE9
#define SOAP_TYPE_PointerTons1__PrelevementWS_USCORE1_USCORE0_USCORE9 (58)
#endif

/* ns1__RejetMouleVue ** has binding name 'PointerToPointerTons1__RejetMouleVue' for type 'ns1:RejetMouleVue' */
#ifndef SOAP_TYPE_PointerToPointerTons1__RejetMouleVue
#define SOAP_TYPE_PointerToPointerTons1__RejetMouleVue (57)
#endif

/* ns1__RejetMouleVue * has binding name 'PointerTons1__RejetMouleVue' for type 'ns1:RejetMouleVue' */
#ifndef SOAP_TYPE_PointerTons1__RejetMouleVue
#define SOAP_TYPE_PointerTons1__RejetMouleVue (56)
#endif

/* ns1__ArrayOfRejetMouleVue * has binding name 'PointerTons1__ArrayOfRejetMouleVue' for type 'ns1:ArrayOfRejetMouleVue' */
#ifndef SOAP_TYPE_PointerTons1__ArrayOfRejetMouleVue
#define SOAP_TYPE_PointerTons1__ArrayOfRejetMouleVue (55)
#endif

/* ns1__Moule ** has binding name 'PointerToPointerTons1__Moule' for type 'ns1:Moule' */
#ifndef SOAP_TYPE_PointerToPointerTons1__Moule
#define SOAP_TYPE_PointerToPointerTons1__Moule (54)
#endif

/* ns1__Moule * has binding name 'PointerTons1__Moule' for type 'ns1:Moule' */
#ifndef SOAP_TYPE_PointerTons1__Moule
#define SOAP_TYPE_PointerTons1__Moule (53)
#endif

/* ns1__ArrayOfMoule * has binding name 'PointerTons1__ArrayOfMoule' for type 'ns1:ArrayOfMoule' */
#ifndef SOAP_TYPE_PointerTons1__ArrayOfMoule
#define SOAP_TYPE_PointerTons1__ArrayOfMoule (51)
#endif

/* _XML has binding name '_XML' for type '' */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
#endif

/* _QName has binding name '_QName' for type 'xsd:QName' */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

/* char * has binding name 'string' for type 'xsd:string' */
#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif

/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Client-Side Call Stub Functions                                            *
 *                                                                            *
\******************************************************************************/

    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__Counts(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__Counts *ns1__Counts, _ns1__CountsResponse &ns1__CountsResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetAlarmsSinceLastQuery(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetAlarmsSinceLastQuery *ns1__GetAlarmsSinceLastQuery, _ns1__GetAlarmsSinceLastQueryResponse &ns1__GetAlarmsSinceLastQueryResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetAlarms(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetAlarms *ns1__GetAlarms, _ns1__GetAlarmsResponse &ns1__GetAlarmsResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__MountedMolds(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__MountedMolds *ns1__MountedMolds, _ns1__MountedMoldsResponse &ns1__MountedMoldsResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__Measures(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__Measures *ns1__Measures, _ns1__MeasuresResponse &ns1__MeasuresResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CumulCounts(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__CumulCounts *ns1__CumulCounts, _ns1__CumulCountsResponse &ns1__CumulCountsResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ReadenMolds(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__ReadenMolds *ns1__ReadenMolds, _ns1__ReadenMoldsResponse &ns1__ReadenMoldsResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__EjectedMolds(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__EjectedMolds *ns1__EjectedMolds, _ns1__EjectedMoldsResponse &ns1__EjectedMoldsResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetMoldsInSampleTable(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetMoldsInSampleTable *ns1__GetMoldsInSampleTable, _ns1__GetMoldsInSampleTableResponse &ns1__GetMoldsInSampleTableResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ChangeMountedMolds(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__ChangeMountedMolds *ns1__ChangeMountedMolds, _ns1__ChangeMountedMoldsResponse &ns1__ChangeMountedMoldsResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AddEjectedMolds(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__AddEjectedMolds *ns1__AddEjectedMolds, _ns1__AddEjectedMoldsResponse &ns1__AddEjectedMoldsResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__EraseMoldsInSampleTable(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__EraseMoldsInSampleTable *ns1__EraseMoldsInSampleTable, _ns1__EraseMoldsInSampleTableResponse &ns1__EraseMoldsInSampleTableResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ChangeMoldsInSampleTable(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__ChangeMoldsInSampleTable *ns1__ChangeMoldsInSampleTable, _ns1__ChangeMoldsInSampleTableResponse &ns1__ChangeMoldsInSampleTableResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetVersions(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetVersions *ns1__GetVersions, _ns1__GetVersionsResponse &ns1__GetVersionsResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ChangeSamples(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__ChangeSamples *ns1__ChangeSamples, _ns1__ChangeSamplesResponse &ns1__ChangeSamplesResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__Counts_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__Counts *ns1__Counts, _ns1__CountsResponse &ns1__CountsResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetAlarmsSinceLastQuery_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetAlarmsSinceLastQuery *ns1__GetAlarmsSinceLastQuery, _ns1__GetAlarmsSinceLastQueryResponse &ns1__GetAlarmsSinceLastQueryResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetAlarms_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetAlarms *ns1__GetAlarms, _ns1__GetAlarmsResponse &ns1__GetAlarmsResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__MountedMolds_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__MountedMolds *ns1__MountedMolds, _ns1__MountedMoldsResponse &ns1__MountedMoldsResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__Measures_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__Measures *ns1__Measures, _ns1__MeasuresResponse &ns1__MeasuresResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CumulCounts_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__CumulCounts *ns1__CumulCounts, _ns1__CumulCountsResponse &ns1__CumulCountsResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ReadenMolds_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__ReadenMolds *ns1__ReadenMolds, _ns1__ReadenMoldsResponse &ns1__ReadenMoldsResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__EjectedMolds_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__EjectedMolds *ns1__EjectedMolds, _ns1__EjectedMoldsResponse &ns1__EjectedMoldsResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetMoldsInSampleTable_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetMoldsInSampleTable *ns1__GetMoldsInSampleTable, _ns1__GetMoldsInSampleTableResponse &ns1__GetMoldsInSampleTableResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ChangeMountedMolds_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__ChangeMountedMolds *ns1__ChangeMountedMolds, _ns1__ChangeMountedMoldsResponse &ns1__ChangeMountedMoldsResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AddEjectedMolds_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__AddEjectedMolds *ns1__AddEjectedMolds, _ns1__AddEjectedMoldsResponse &ns1__AddEjectedMoldsResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__EraseMoldsInSampleTable_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__EraseMoldsInSampleTable *ns1__EraseMoldsInSampleTable, _ns1__EraseMoldsInSampleTableResponse &ns1__EraseMoldsInSampleTableResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ChangeMoldsInSampleTable_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__ChangeMoldsInSampleTable *ns1__ChangeMoldsInSampleTable, _ns1__ChangeMoldsInSampleTableResponse &ns1__ChangeMoldsInSampleTableResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetVersions_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetVersions *ns1__GetVersions, _ns1__GetVersionsResponse &ns1__GetVersionsResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ChangeSamples_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__ChangeSamples *ns1__ChangeSamples, _ns1__ChangeSamplesResponse &ns1__ChangeSamplesResponse);

#endif

/* End of soapStub.h */
