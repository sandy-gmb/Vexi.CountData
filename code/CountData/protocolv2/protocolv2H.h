/* protocolv2H.h
   Generated by gSOAP 2.8.111 for cwebservice.h

gSOAP XML Web services tools
Copyright (C) 2000-2021, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef protocolv2H_H
#define protocolv2H_H
#include "protocolv2Stub.h"

namespace protocolv2 {
#ifndef WITH_NOIDREF
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, const char*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);
SOAP_FMAC3 void * SOAP_FMAC4 protocolv2_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 protocolv2_fdelete(struct soap *soap, struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 protocolv2_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 protocolv2_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_protocolv2_byte_DEFINED
#define SOAP_TYPE_protocolv2_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || protocolv2::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || protocolv2::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || protocolv2::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || protocolv2::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || protocolv2::soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (protocolv2::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2_int_DEFINED
#define SOAP_TYPE_protocolv2_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || protocolv2::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || protocolv2::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || protocolv2::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || protocolv2::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || protocolv2::soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (protocolv2::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2_dateTime_DEFINED
#define SOAP_TYPE_protocolv2_dateTime_DEFINED

inline void soap_default_dateTime(struct soap *soap, time_t *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_dateTime
	*a = SOAP_DEFAULT_dateTime;
#else
	*a = (time_t)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_dateTime(struct soap*, const char*, int, const time_t *, const char*);
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_dateTime(struct soap*, const char*, time_t *, const char*);

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_new_dateTime(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_dateTime(struct soap*, const time_t *, const char*, const char*);

inline int soap_write_dateTime(struct soap *soap, time_t const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || protocolv2::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || protocolv2::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || protocolv2::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || protocolv2::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_dateTime(struct soap*, time_t *, const char*, const char*);

inline int soap_read_dateTime(struct soap *soap, time_t *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || protocolv2::soap_get_dateTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_dateTime(struct soap *soap, const char *URL, time_t *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read_dateTime(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_dateTime(struct soap *soap, time_t *p)
{
	if (protocolv2::soap_read_dateTime(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2__ns1__GetLastRequestDateResponse_DEFINED
#define SOAP_TYPE_protocolv2__ns1__GetLastRequestDateResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetLastRequestDateResponse(struct soap*, const char*, int, const _ns1__GetLastRequestDateResponse *, const char*);
SOAP_FMAC3 _ns1__GetLastRequestDateResponse * SOAP_FMAC4 soap_in__ns1__GetLastRequestDateResponse(struct soap*, const char*, _ns1__GetLastRequestDateResponse *, const char*);
SOAP_FMAC1 _ns1__GetLastRequestDateResponse * SOAP_FMAC2 soap_instantiate__ns1__GetLastRequestDateResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetLastRequestDateResponse * soap_new__ns1__GetLastRequestDateResponse(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate__ns1__GetLastRequestDateResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetLastRequestDateResponse * soap_new_req__ns1__GetLastRequestDateResponse(
	struct soap *soap,
	time_t GetLastRequestDateResult)
{
	_ns1__GetLastRequestDateResponse *_p = protocolv2::soap_new__ns1__GetLastRequestDateResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetLastRequestDateResponse::GetLastRequestDateResult = GetLastRequestDateResult;
	}
	return _p;
}

inline _ns1__GetLastRequestDateResponse * soap_new_set__ns1__GetLastRequestDateResponse(
	struct soap *soap,
	time_t GetLastRequestDateResult)
{
	_ns1__GetLastRequestDateResponse *_p = protocolv2::soap_new__ns1__GetLastRequestDateResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetLastRequestDateResponse::GetLastRequestDateResult = GetLastRequestDateResult;
	}
	return _p;
}

inline int soap_write__ns1__GetLastRequestDateResponse(struct soap *soap, _ns1__GetLastRequestDateResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetLastRequestDateResponse", p->soap_type() == SOAP_TYPE_protocolv2__ns1__GetLastRequestDateResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetLastRequestDateResponse(struct soap *soap, const char *URL, _ns1__GetLastRequestDateResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetLastRequestDateResponse", p->soap_type() == SOAP_TYPE_protocolv2__ns1__GetLastRequestDateResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__GetLastRequestDateResponse(struct soap *soap, const char *URL, _ns1__GetLastRequestDateResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetLastRequestDateResponse", p->soap_type() == SOAP_TYPE_protocolv2__ns1__GetLastRequestDateResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetLastRequestDateResponse(struct soap *soap, const char *URL, _ns1__GetLastRequestDateResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetLastRequestDateResponse", p->soap_type() == SOAP_TYPE_protocolv2__ns1__GetLastRequestDateResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetLastRequestDateResponse * SOAP_FMAC4 soap_get__ns1__GetLastRequestDateResponse(struct soap*, _ns1__GetLastRequestDateResponse *, const char*, const char*);

inline int soap_read__ns1__GetLastRequestDateResponse(struct soap *soap, _ns1__GetLastRequestDateResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || protocolv2::soap_get__ns1__GetLastRequestDateResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetLastRequestDateResponse(struct soap *soap, const char *URL, _ns1__GetLastRequestDateResponse *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read__ns1__GetLastRequestDateResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__GetLastRequestDateResponse(struct soap *soap, _ns1__GetLastRequestDateResponse *p)
{
	if (protocolv2::soap_read__ns1__GetLastRequestDateResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2__ns1__GetLastRequestDate_DEFINED
#define SOAP_TYPE_protocolv2__ns1__GetLastRequestDate_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetLastRequestDate(struct soap*, const char*, int, const _ns1__GetLastRequestDate *, const char*);
SOAP_FMAC3 _ns1__GetLastRequestDate * SOAP_FMAC4 soap_in__ns1__GetLastRequestDate(struct soap*, const char*, _ns1__GetLastRequestDate *, const char*);
SOAP_FMAC1 _ns1__GetLastRequestDate * SOAP_FMAC2 soap_instantiate__ns1__GetLastRequestDate(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetLastRequestDate * soap_new__ns1__GetLastRequestDate(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate__ns1__GetLastRequestDate(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetLastRequestDate * soap_new_req__ns1__GetLastRequestDate(
	struct soap *soap,
	int functionNumber)
{
	_ns1__GetLastRequestDate *_p = protocolv2::soap_new__ns1__GetLastRequestDate(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetLastRequestDate::functionNumber = functionNumber;
	}
	return _p;
}

inline _ns1__GetLastRequestDate * soap_new_set__ns1__GetLastRequestDate(
	struct soap *soap,
	int functionNumber)
{
	_ns1__GetLastRequestDate *_p = protocolv2::soap_new__ns1__GetLastRequestDate(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetLastRequestDate::functionNumber = functionNumber;
	}
	return _p;
}

inline int soap_write__ns1__GetLastRequestDate(struct soap *soap, _ns1__GetLastRequestDate const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetLastRequestDate", p->soap_type() == SOAP_TYPE_protocolv2__ns1__GetLastRequestDate ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetLastRequestDate(struct soap *soap, const char *URL, _ns1__GetLastRequestDate const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetLastRequestDate", p->soap_type() == SOAP_TYPE_protocolv2__ns1__GetLastRequestDate ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__GetLastRequestDate(struct soap *soap, const char *URL, _ns1__GetLastRequestDate const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetLastRequestDate", p->soap_type() == SOAP_TYPE_protocolv2__ns1__GetLastRequestDate ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetLastRequestDate(struct soap *soap, const char *URL, _ns1__GetLastRequestDate const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetLastRequestDate", p->soap_type() == SOAP_TYPE_protocolv2__ns1__GetLastRequestDate ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetLastRequestDate * SOAP_FMAC4 soap_get__ns1__GetLastRequestDate(struct soap*, _ns1__GetLastRequestDate *, const char*, const char*);

inline int soap_read__ns1__GetLastRequestDate(struct soap *soap, _ns1__GetLastRequestDate *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || protocolv2::soap_get__ns1__GetLastRequestDate(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetLastRequestDate(struct soap *soap, const char *URL, _ns1__GetLastRequestDate *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read__ns1__GetLastRequestDate(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__GetLastRequestDate(struct soap *soap, _ns1__GetLastRequestDate *p)
{
	if (protocolv2::soap_read__ns1__GetLastRequestDate(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2__ns1__AddSamplesResponse_DEFINED
#define SOAP_TYPE_protocolv2__ns1__AddSamplesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AddSamplesResponse(struct soap*, const char*, int, const _ns1__AddSamplesResponse *, const char*);
SOAP_FMAC3 _ns1__AddSamplesResponse * SOAP_FMAC4 soap_in__ns1__AddSamplesResponse(struct soap*, const char*, _ns1__AddSamplesResponse *, const char*);
SOAP_FMAC1 _ns1__AddSamplesResponse * SOAP_FMAC2 soap_instantiate__ns1__AddSamplesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__AddSamplesResponse * soap_new__ns1__AddSamplesResponse(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate__ns1__AddSamplesResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__AddSamplesResponse * soap_new_req__ns1__AddSamplesResponse(
	struct soap *soap)
{
	_ns1__AddSamplesResponse *_p = protocolv2::soap_new__ns1__AddSamplesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__AddSamplesResponse * soap_new_set__ns1__AddSamplesResponse(
	struct soap *soap,
	char *AddSamplesResult)
{
	_ns1__AddSamplesResponse *_p = protocolv2::soap_new__ns1__AddSamplesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__AddSamplesResponse::AddSamplesResult = AddSamplesResult;
	}
	return _p;
}

inline int soap_write__ns1__AddSamplesResponse(struct soap *soap, _ns1__AddSamplesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AddSamplesResponse", p->soap_type() == SOAP_TYPE_protocolv2__ns1__AddSamplesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__AddSamplesResponse(struct soap *soap, const char *URL, _ns1__AddSamplesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AddSamplesResponse", p->soap_type() == SOAP_TYPE_protocolv2__ns1__AddSamplesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__AddSamplesResponse(struct soap *soap, const char *URL, _ns1__AddSamplesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AddSamplesResponse", p->soap_type() == SOAP_TYPE_protocolv2__ns1__AddSamplesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__AddSamplesResponse(struct soap *soap, const char *URL, _ns1__AddSamplesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AddSamplesResponse", p->soap_type() == SOAP_TYPE_protocolv2__ns1__AddSamplesResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__AddSamplesResponse * SOAP_FMAC4 soap_get__ns1__AddSamplesResponse(struct soap*, _ns1__AddSamplesResponse *, const char*, const char*);

inline int soap_read__ns1__AddSamplesResponse(struct soap *soap, _ns1__AddSamplesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || protocolv2::soap_get__ns1__AddSamplesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__AddSamplesResponse(struct soap *soap, const char *URL, _ns1__AddSamplesResponse *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read__ns1__AddSamplesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__AddSamplesResponse(struct soap *soap, _ns1__AddSamplesResponse *p)
{
	if (protocolv2::soap_read__ns1__AddSamplesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2__ns1__AddSamples_DEFINED
#define SOAP_TYPE_protocolv2__ns1__AddSamples_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AddSamples(struct soap*, const char*, int, const _ns1__AddSamples *, const char*);
SOAP_FMAC3 _ns1__AddSamples * SOAP_FMAC4 soap_in__ns1__AddSamples(struct soap*, const char*, _ns1__AddSamples *, const char*);
SOAP_FMAC1 _ns1__AddSamples * SOAP_FMAC2 soap_instantiate__ns1__AddSamples(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__AddSamples * soap_new__ns1__AddSamples(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate__ns1__AddSamples(soap, n, NULL, NULL, NULL);
}

inline _ns1__AddSamples * soap_new_req__ns1__AddSamples(
	struct soap *soap)
{
	_ns1__AddSamples *_p = protocolv2::soap_new__ns1__AddSamples(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__AddSamples * soap_new_set__ns1__AddSamples(
	struct soap *soap,
	char *samples)
{
	_ns1__AddSamples *_p = protocolv2::soap_new__ns1__AddSamples(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__AddSamples::samples = samples;
	}
	return _p;
}

inline int soap_write__ns1__AddSamples(struct soap *soap, _ns1__AddSamples const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AddSamples", p->soap_type() == SOAP_TYPE_protocolv2__ns1__AddSamples ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__AddSamples(struct soap *soap, const char *URL, _ns1__AddSamples const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AddSamples", p->soap_type() == SOAP_TYPE_protocolv2__ns1__AddSamples ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__AddSamples(struct soap *soap, const char *URL, _ns1__AddSamples const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AddSamples", p->soap_type() == SOAP_TYPE_protocolv2__ns1__AddSamples ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__AddSamples(struct soap *soap, const char *URL, _ns1__AddSamples const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AddSamples", p->soap_type() == SOAP_TYPE_protocolv2__ns1__AddSamples ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__AddSamples * SOAP_FMAC4 soap_get__ns1__AddSamples(struct soap*, _ns1__AddSamples *, const char*, const char*);

inline int soap_read__ns1__AddSamples(struct soap *soap, _ns1__AddSamples *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || protocolv2::soap_get__ns1__AddSamples(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__AddSamples(struct soap *soap, const char *URL, _ns1__AddSamples *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read__ns1__AddSamples(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__AddSamples(struct soap *soap, _ns1__AddSamples *p)
{
	if (protocolv2::soap_read__ns1__AddSamples(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2__ns1__AddEjectedMoldsResponse_DEFINED
#define SOAP_TYPE_protocolv2__ns1__AddEjectedMoldsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AddEjectedMoldsResponse(struct soap*, const char*, int, const _ns1__AddEjectedMoldsResponse *, const char*);
SOAP_FMAC3 _ns1__AddEjectedMoldsResponse * SOAP_FMAC4 soap_in__ns1__AddEjectedMoldsResponse(struct soap*, const char*, _ns1__AddEjectedMoldsResponse *, const char*);
SOAP_FMAC1 _ns1__AddEjectedMoldsResponse * SOAP_FMAC2 soap_instantiate__ns1__AddEjectedMoldsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__AddEjectedMoldsResponse * soap_new__ns1__AddEjectedMoldsResponse(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate__ns1__AddEjectedMoldsResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__AddEjectedMoldsResponse * soap_new_req__ns1__AddEjectedMoldsResponse(
	struct soap *soap)
{
	_ns1__AddEjectedMoldsResponse *_p = protocolv2::soap_new__ns1__AddEjectedMoldsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__AddEjectedMoldsResponse * soap_new_set__ns1__AddEjectedMoldsResponse(
	struct soap *soap,
	char *AddEjectedMoldsResult)
{
	_ns1__AddEjectedMoldsResponse *_p = protocolv2::soap_new__ns1__AddEjectedMoldsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__AddEjectedMoldsResponse::AddEjectedMoldsResult = AddEjectedMoldsResult;
	}
	return _p;
}

inline int soap_write__ns1__AddEjectedMoldsResponse(struct soap *soap, _ns1__AddEjectedMoldsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AddEjectedMoldsResponse", p->soap_type() == SOAP_TYPE_protocolv2__ns1__AddEjectedMoldsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__AddEjectedMoldsResponse(struct soap *soap, const char *URL, _ns1__AddEjectedMoldsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AddEjectedMoldsResponse", p->soap_type() == SOAP_TYPE_protocolv2__ns1__AddEjectedMoldsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__AddEjectedMoldsResponse(struct soap *soap, const char *URL, _ns1__AddEjectedMoldsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AddEjectedMoldsResponse", p->soap_type() == SOAP_TYPE_protocolv2__ns1__AddEjectedMoldsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__AddEjectedMoldsResponse(struct soap *soap, const char *URL, _ns1__AddEjectedMoldsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AddEjectedMoldsResponse", p->soap_type() == SOAP_TYPE_protocolv2__ns1__AddEjectedMoldsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__AddEjectedMoldsResponse * SOAP_FMAC4 soap_get__ns1__AddEjectedMoldsResponse(struct soap*, _ns1__AddEjectedMoldsResponse *, const char*, const char*);

inline int soap_read__ns1__AddEjectedMoldsResponse(struct soap *soap, _ns1__AddEjectedMoldsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || protocolv2::soap_get__ns1__AddEjectedMoldsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__AddEjectedMoldsResponse(struct soap *soap, const char *URL, _ns1__AddEjectedMoldsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read__ns1__AddEjectedMoldsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__AddEjectedMoldsResponse(struct soap *soap, _ns1__AddEjectedMoldsResponse *p)
{
	if (protocolv2::soap_read__ns1__AddEjectedMoldsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2__ns1__AddEjectedMolds_DEFINED
#define SOAP_TYPE_protocolv2__ns1__AddEjectedMolds_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AddEjectedMolds(struct soap*, const char*, int, const _ns1__AddEjectedMolds *, const char*);
SOAP_FMAC3 _ns1__AddEjectedMolds * SOAP_FMAC4 soap_in__ns1__AddEjectedMolds(struct soap*, const char*, _ns1__AddEjectedMolds *, const char*);
SOAP_FMAC1 _ns1__AddEjectedMolds * SOAP_FMAC2 soap_instantiate__ns1__AddEjectedMolds(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__AddEjectedMolds * soap_new__ns1__AddEjectedMolds(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate__ns1__AddEjectedMolds(soap, n, NULL, NULL, NULL);
}

inline _ns1__AddEjectedMolds * soap_new_req__ns1__AddEjectedMolds(
	struct soap *soap)
{
	_ns1__AddEjectedMolds *_p = protocolv2::soap_new__ns1__AddEjectedMolds(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__AddEjectedMolds * soap_new_set__ns1__AddEjectedMolds(
	struct soap *soap,
	char *ejectedMolds)
{
	_ns1__AddEjectedMolds *_p = protocolv2::soap_new__ns1__AddEjectedMolds(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__AddEjectedMolds::ejectedMolds = ejectedMolds;
	}
	return _p;
}

inline int soap_write__ns1__AddEjectedMolds(struct soap *soap, _ns1__AddEjectedMolds const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AddEjectedMolds", p->soap_type() == SOAP_TYPE_protocolv2__ns1__AddEjectedMolds ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__AddEjectedMolds(struct soap *soap, const char *URL, _ns1__AddEjectedMolds const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AddEjectedMolds", p->soap_type() == SOAP_TYPE_protocolv2__ns1__AddEjectedMolds ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__AddEjectedMolds(struct soap *soap, const char *URL, _ns1__AddEjectedMolds const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AddEjectedMolds", p->soap_type() == SOAP_TYPE_protocolv2__ns1__AddEjectedMolds ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__AddEjectedMolds(struct soap *soap, const char *URL, _ns1__AddEjectedMolds const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AddEjectedMolds", p->soap_type() == SOAP_TYPE_protocolv2__ns1__AddEjectedMolds ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__AddEjectedMolds * SOAP_FMAC4 soap_get__ns1__AddEjectedMolds(struct soap*, _ns1__AddEjectedMolds *, const char*, const char*);

inline int soap_read__ns1__AddEjectedMolds(struct soap *soap, _ns1__AddEjectedMolds *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || protocolv2::soap_get__ns1__AddEjectedMolds(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__AddEjectedMolds(struct soap *soap, const char *URL, _ns1__AddEjectedMolds *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read__ns1__AddEjectedMolds(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__AddEjectedMolds(struct soap *soap, _ns1__AddEjectedMolds *p)
{
	if (protocolv2::soap_read__ns1__AddEjectedMolds(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2__ns1__AddMountedMoldsResponse_DEFINED
#define SOAP_TYPE_protocolv2__ns1__AddMountedMoldsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AddMountedMoldsResponse(struct soap*, const char*, int, const _ns1__AddMountedMoldsResponse *, const char*);
SOAP_FMAC3 _ns1__AddMountedMoldsResponse * SOAP_FMAC4 soap_in__ns1__AddMountedMoldsResponse(struct soap*, const char*, _ns1__AddMountedMoldsResponse *, const char*);
SOAP_FMAC1 _ns1__AddMountedMoldsResponse * SOAP_FMAC2 soap_instantiate__ns1__AddMountedMoldsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__AddMountedMoldsResponse * soap_new__ns1__AddMountedMoldsResponse(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate__ns1__AddMountedMoldsResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__AddMountedMoldsResponse * soap_new_req__ns1__AddMountedMoldsResponse(
	struct soap *soap)
{
	_ns1__AddMountedMoldsResponse *_p = protocolv2::soap_new__ns1__AddMountedMoldsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__AddMountedMoldsResponse * soap_new_set__ns1__AddMountedMoldsResponse(
	struct soap *soap,
	char *AddMountedMoldsResult)
{
	_ns1__AddMountedMoldsResponse *_p = protocolv2::soap_new__ns1__AddMountedMoldsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__AddMountedMoldsResponse::AddMountedMoldsResult = AddMountedMoldsResult;
	}
	return _p;
}

inline int soap_write__ns1__AddMountedMoldsResponse(struct soap *soap, _ns1__AddMountedMoldsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AddMountedMoldsResponse", p->soap_type() == SOAP_TYPE_protocolv2__ns1__AddMountedMoldsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__AddMountedMoldsResponse(struct soap *soap, const char *URL, _ns1__AddMountedMoldsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AddMountedMoldsResponse", p->soap_type() == SOAP_TYPE_protocolv2__ns1__AddMountedMoldsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__AddMountedMoldsResponse(struct soap *soap, const char *URL, _ns1__AddMountedMoldsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AddMountedMoldsResponse", p->soap_type() == SOAP_TYPE_protocolv2__ns1__AddMountedMoldsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__AddMountedMoldsResponse(struct soap *soap, const char *URL, _ns1__AddMountedMoldsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AddMountedMoldsResponse", p->soap_type() == SOAP_TYPE_protocolv2__ns1__AddMountedMoldsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__AddMountedMoldsResponse * SOAP_FMAC4 soap_get__ns1__AddMountedMoldsResponse(struct soap*, _ns1__AddMountedMoldsResponse *, const char*, const char*);

inline int soap_read__ns1__AddMountedMoldsResponse(struct soap *soap, _ns1__AddMountedMoldsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || protocolv2::soap_get__ns1__AddMountedMoldsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__AddMountedMoldsResponse(struct soap *soap, const char *URL, _ns1__AddMountedMoldsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read__ns1__AddMountedMoldsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__AddMountedMoldsResponse(struct soap *soap, _ns1__AddMountedMoldsResponse *p)
{
	if (protocolv2::soap_read__ns1__AddMountedMoldsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2__ns1__AddMountedMolds_DEFINED
#define SOAP_TYPE_protocolv2__ns1__AddMountedMolds_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AddMountedMolds(struct soap*, const char*, int, const _ns1__AddMountedMolds *, const char*);
SOAP_FMAC3 _ns1__AddMountedMolds * SOAP_FMAC4 soap_in__ns1__AddMountedMolds(struct soap*, const char*, _ns1__AddMountedMolds *, const char*);
SOAP_FMAC1 _ns1__AddMountedMolds * SOAP_FMAC2 soap_instantiate__ns1__AddMountedMolds(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__AddMountedMolds * soap_new__ns1__AddMountedMolds(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate__ns1__AddMountedMolds(soap, n, NULL, NULL, NULL);
}

inline _ns1__AddMountedMolds * soap_new_req__ns1__AddMountedMolds(
	struct soap *soap)
{
	_ns1__AddMountedMolds *_p = protocolv2::soap_new__ns1__AddMountedMolds(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__AddMountedMolds * soap_new_set__ns1__AddMountedMolds(
	struct soap *soap,
	char *mountedMolds)
{
	_ns1__AddMountedMolds *_p = protocolv2::soap_new__ns1__AddMountedMolds(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__AddMountedMolds::mountedMolds = mountedMolds;
	}
	return _p;
}

inline int soap_write__ns1__AddMountedMolds(struct soap *soap, _ns1__AddMountedMolds const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AddMountedMolds", p->soap_type() == SOAP_TYPE_protocolv2__ns1__AddMountedMolds ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__AddMountedMolds(struct soap *soap, const char *URL, _ns1__AddMountedMolds const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AddMountedMolds", p->soap_type() == SOAP_TYPE_protocolv2__ns1__AddMountedMolds ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__AddMountedMolds(struct soap *soap, const char *URL, _ns1__AddMountedMolds const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AddMountedMolds", p->soap_type() == SOAP_TYPE_protocolv2__ns1__AddMountedMolds ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__AddMountedMolds(struct soap *soap, const char *URL, _ns1__AddMountedMolds const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AddMountedMolds", p->soap_type() == SOAP_TYPE_protocolv2__ns1__AddMountedMolds ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__AddMountedMolds * SOAP_FMAC4 soap_get__ns1__AddMountedMolds(struct soap*, _ns1__AddMountedMolds *, const char*, const char*);

inline int soap_read__ns1__AddMountedMolds(struct soap *soap, _ns1__AddMountedMolds *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || protocolv2::soap_get__ns1__AddMountedMolds(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__AddMountedMolds(struct soap *soap, const char *URL, _ns1__AddMountedMolds *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read__ns1__AddMountedMolds(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__AddMountedMolds(struct soap *soap, _ns1__AddMountedMolds *p)
{
	if (protocolv2::soap_read__ns1__AddMountedMolds(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2__ns1__SamplesResponse_DEFINED
#define SOAP_TYPE_protocolv2__ns1__SamplesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SamplesResponse(struct soap*, const char*, int, const _ns1__SamplesResponse *, const char*);
SOAP_FMAC3 _ns1__SamplesResponse * SOAP_FMAC4 soap_in__ns1__SamplesResponse(struct soap*, const char*, _ns1__SamplesResponse *, const char*);
SOAP_FMAC1 _ns1__SamplesResponse * SOAP_FMAC2 soap_instantiate__ns1__SamplesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SamplesResponse * soap_new__ns1__SamplesResponse(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate__ns1__SamplesResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__SamplesResponse * soap_new_req__ns1__SamplesResponse(
	struct soap *soap)
{
	_ns1__SamplesResponse *_p = protocolv2::soap_new__ns1__SamplesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SamplesResponse * soap_new_set__ns1__SamplesResponse(
	struct soap *soap,
	char *SamplesResult)
{
	_ns1__SamplesResponse *_p = protocolv2::soap_new__ns1__SamplesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SamplesResponse::SamplesResult = SamplesResult;
	}
	return _p;
}

inline int soap_write__ns1__SamplesResponse(struct soap *soap, _ns1__SamplesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SamplesResponse", p->soap_type() == SOAP_TYPE_protocolv2__ns1__SamplesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__SamplesResponse(struct soap *soap, const char *URL, _ns1__SamplesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SamplesResponse", p->soap_type() == SOAP_TYPE_protocolv2__ns1__SamplesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__SamplesResponse(struct soap *soap, const char *URL, _ns1__SamplesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SamplesResponse", p->soap_type() == SOAP_TYPE_protocolv2__ns1__SamplesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__SamplesResponse(struct soap *soap, const char *URL, _ns1__SamplesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SamplesResponse", p->soap_type() == SOAP_TYPE_protocolv2__ns1__SamplesResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SamplesResponse * SOAP_FMAC4 soap_get__ns1__SamplesResponse(struct soap*, _ns1__SamplesResponse *, const char*, const char*);

inline int soap_read__ns1__SamplesResponse(struct soap *soap, _ns1__SamplesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || protocolv2::soap_get__ns1__SamplesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__SamplesResponse(struct soap *soap, const char *URL, _ns1__SamplesResponse *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read__ns1__SamplesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__SamplesResponse(struct soap *soap, _ns1__SamplesResponse *p)
{
	if (protocolv2::soap_read__ns1__SamplesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2__ns1__Samples_DEFINED
#define SOAP_TYPE_protocolv2__ns1__Samples_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Samples(struct soap*, const char*, int, const _ns1__Samples *, const char*);
SOAP_FMAC3 _ns1__Samples * SOAP_FMAC4 soap_in__ns1__Samples(struct soap*, const char*, _ns1__Samples *, const char*);
SOAP_FMAC1 _ns1__Samples * SOAP_FMAC2 soap_instantiate__ns1__Samples(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__Samples * soap_new__ns1__Samples(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate__ns1__Samples(soap, n, NULL, NULL, NULL);
}

inline _ns1__Samples * soap_new_req__ns1__Samples(
	struct soap *soap)
{
	_ns1__Samples *_p = protocolv2::soap_new__ns1__Samples(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__Samples * soap_new_set__ns1__Samples(
	struct soap *soap)
{
	_ns1__Samples *_p = protocolv2::soap_new__ns1__Samples(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__Samples(struct soap *soap, _ns1__Samples const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Samples", p->soap_type() == SOAP_TYPE_protocolv2__ns1__Samples ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__Samples(struct soap *soap, const char *URL, _ns1__Samples const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Samples", p->soap_type() == SOAP_TYPE_protocolv2__ns1__Samples ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__Samples(struct soap *soap, const char *URL, _ns1__Samples const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Samples", p->soap_type() == SOAP_TYPE_protocolv2__ns1__Samples ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__Samples(struct soap *soap, const char *URL, _ns1__Samples const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Samples", p->soap_type() == SOAP_TYPE_protocolv2__ns1__Samples ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__Samples * SOAP_FMAC4 soap_get__ns1__Samples(struct soap*, _ns1__Samples *, const char*, const char*);

inline int soap_read__ns1__Samples(struct soap *soap, _ns1__Samples *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || protocolv2::soap_get__ns1__Samples(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__Samples(struct soap *soap, const char *URL, _ns1__Samples *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read__ns1__Samples(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__Samples(struct soap *soap, _ns1__Samples *p)
{
	if (protocolv2::soap_read__ns1__Samples(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2__ns1__AlarmsResponse_DEFINED
#define SOAP_TYPE_protocolv2__ns1__AlarmsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AlarmsResponse(struct soap*, const char*, int, const _ns1__AlarmsResponse *, const char*);
SOAP_FMAC3 _ns1__AlarmsResponse * SOAP_FMAC4 soap_in__ns1__AlarmsResponse(struct soap*, const char*, _ns1__AlarmsResponse *, const char*);
SOAP_FMAC1 _ns1__AlarmsResponse * SOAP_FMAC2 soap_instantiate__ns1__AlarmsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__AlarmsResponse * soap_new__ns1__AlarmsResponse(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate__ns1__AlarmsResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__AlarmsResponse * soap_new_req__ns1__AlarmsResponse(
	struct soap *soap)
{
	_ns1__AlarmsResponse *_p = protocolv2::soap_new__ns1__AlarmsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__AlarmsResponse * soap_new_set__ns1__AlarmsResponse(
	struct soap *soap,
	char *AlarmsResult)
{
	_ns1__AlarmsResponse *_p = protocolv2::soap_new__ns1__AlarmsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__AlarmsResponse::AlarmsResult = AlarmsResult;
	}
	return _p;
}

inline int soap_write__ns1__AlarmsResponse(struct soap *soap, _ns1__AlarmsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AlarmsResponse", p->soap_type() == SOAP_TYPE_protocolv2__ns1__AlarmsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__AlarmsResponse(struct soap *soap, const char *URL, _ns1__AlarmsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AlarmsResponse", p->soap_type() == SOAP_TYPE_protocolv2__ns1__AlarmsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__AlarmsResponse(struct soap *soap, const char *URL, _ns1__AlarmsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AlarmsResponse", p->soap_type() == SOAP_TYPE_protocolv2__ns1__AlarmsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__AlarmsResponse(struct soap *soap, const char *URL, _ns1__AlarmsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AlarmsResponse", p->soap_type() == SOAP_TYPE_protocolv2__ns1__AlarmsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__AlarmsResponse * SOAP_FMAC4 soap_get__ns1__AlarmsResponse(struct soap*, _ns1__AlarmsResponse *, const char*, const char*);

inline int soap_read__ns1__AlarmsResponse(struct soap *soap, _ns1__AlarmsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || protocolv2::soap_get__ns1__AlarmsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__AlarmsResponse(struct soap *soap, const char *URL, _ns1__AlarmsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read__ns1__AlarmsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__AlarmsResponse(struct soap *soap, _ns1__AlarmsResponse *p)
{
	if (protocolv2::soap_read__ns1__AlarmsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2__ns1__Alarms_DEFINED
#define SOAP_TYPE_protocolv2__ns1__Alarms_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Alarms(struct soap*, const char*, int, const _ns1__Alarms *, const char*);
SOAP_FMAC3 _ns1__Alarms * SOAP_FMAC4 soap_in__ns1__Alarms(struct soap*, const char*, _ns1__Alarms *, const char*);
SOAP_FMAC1 _ns1__Alarms * SOAP_FMAC2 soap_instantiate__ns1__Alarms(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__Alarms * soap_new__ns1__Alarms(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate__ns1__Alarms(soap, n, NULL, NULL, NULL);
}

inline _ns1__Alarms * soap_new_req__ns1__Alarms(
	struct soap *soap)
{
	_ns1__Alarms *_p = protocolv2::soap_new__ns1__Alarms(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__Alarms * soap_new_set__ns1__Alarms(
	struct soap *soap)
{
	_ns1__Alarms *_p = protocolv2::soap_new__ns1__Alarms(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__Alarms(struct soap *soap, _ns1__Alarms const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Alarms", p->soap_type() == SOAP_TYPE_protocolv2__ns1__Alarms ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__Alarms(struct soap *soap, const char *URL, _ns1__Alarms const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Alarms", p->soap_type() == SOAP_TYPE_protocolv2__ns1__Alarms ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__Alarms(struct soap *soap, const char *URL, _ns1__Alarms const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Alarms", p->soap_type() == SOAP_TYPE_protocolv2__ns1__Alarms ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__Alarms(struct soap *soap, const char *URL, _ns1__Alarms const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Alarms", p->soap_type() == SOAP_TYPE_protocolv2__ns1__Alarms ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__Alarms * SOAP_FMAC4 soap_get__ns1__Alarms(struct soap*, _ns1__Alarms *, const char*, const char*);

inline int soap_read__ns1__Alarms(struct soap *soap, _ns1__Alarms *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || protocolv2::soap_get__ns1__Alarms(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__Alarms(struct soap *soap, const char *URL, _ns1__Alarms *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read__ns1__Alarms(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__Alarms(struct soap *soap, _ns1__Alarms *p)
{
	if (protocolv2::soap_read__ns1__Alarms(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2__ns1__MeasuresResponse_DEFINED
#define SOAP_TYPE_protocolv2__ns1__MeasuresResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__MeasuresResponse(struct soap*, const char*, int, const _ns1__MeasuresResponse *, const char*);
SOAP_FMAC3 _ns1__MeasuresResponse * SOAP_FMAC4 soap_in__ns1__MeasuresResponse(struct soap*, const char*, _ns1__MeasuresResponse *, const char*);
SOAP_FMAC1 _ns1__MeasuresResponse * SOAP_FMAC2 soap_instantiate__ns1__MeasuresResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__MeasuresResponse * soap_new__ns1__MeasuresResponse(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate__ns1__MeasuresResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__MeasuresResponse * soap_new_req__ns1__MeasuresResponse(
	struct soap *soap)
{
	_ns1__MeasuresResponse *_p = protocolv2::soap_new__ns1__MeasuresResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__MeasuresResponse * soap_new_set__ns1__MeasuresResponse(
	struct soap *soap,
	char *MeasuresResult)
{
	_ns1__MeasuresResponse *_p = protocolv2::soap_new__ns1__MeasuresResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__MeasuresResponse::MeasuresResult = MeasuresResult;
	}
	return _p;
}

inline int soap_write__ns1__MeasuresResponse(struct soap *soap, _ns1__MeasuresResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MeasuresResponse", p->soap_type() == SOAP_TYPE_protocolv2__ns1__MeasuresResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__MeasuresResponse(struct soap *soap, const char *URL, _ns1__MeasuresResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MeasuresResponse", p->soap_type() == SOAP_TYPE_protocolv2__ns1__MeasuresResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__MeasuresResponse(struct soap *soap, const char *URL, _ns1__MeasuresResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MeasuresResponse", p->soap_type() == SOAP_TYPE_protocolv2__ns1__MeasuresResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__MeasuresResponse(struct soap *soap, const char *URL, _ns1__MeasuresResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MeasuresResponse", p->soap_type() == SOAP_TYPE_protocolv2__ns1__MeasuresResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__MeasuresResponse * SOAP_FMAC4 soap_get__ns1__MeasuresResponse(struct soap*, _ns1__MeasuresResponse *, const char*, const char*);

inline int soap_read__ns1__MeasuresResponse(struct soap *soap, _ns1__MeasuresResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || protocolv2::soap_get__ns1__MeasuresResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__MeasuresResponse(struct soap *soap, const char *URL, _ns1__MeasuresResponse *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read__ns1__MeasuresResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__MeasuresResponse(struct soap *soap, _ns1__MeasuresResponse *p)
{
	if (protocolv2::soap_read__ns1__MeasuresResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2__ns1__Measures_DEFINED
#define SOAP_TYPE_protocolv2__ns1__Measures_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Measures(struct soap*, const char*, int, const _ns1__Measures *, const char*);
SOAP_FMAC3 _ns1__Measures * SOAP_FMAC4 soap_in__ns1__Measures(struct soap*, const char*, _ns1__Measures *, const char*);
SOAP_FMAC1 _ns1__Measures * SOAP_FMAC2 soap_instantiate__ns1__Measures(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__Measures * soap_new__ns1__Measures(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate__ns1__Measures(soap, n, NULL, NULL, NULL);
}

inline _ns1__Measures * soap_new_req__ns1__Measures(
	struct soap *soap)
{
	_ns1__Measures *_p = protocolv2::soap_new__ns1__Measures(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__Measures * soap_new_set__ns1__Measures(
	struct soap *soap)
{
	_ns1__Measures *_p = protocolv2::soap_new__ns1__Measures(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__Measures(struct soap *soap, _ns1__Measures const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Measures", p->soap_type() == SOAP_TYPE_protocolv2__ns1__Measures ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__Measures(struct soap *soap, const char *URL, _ns1__Measures const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Measures", p->soap_type() == SOAP_TYPE_protocolv2__ns1__Measures ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__Measures(struct soap *soap, const char *URL, _ns1__Measures const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Measures", p->soap_type() == SOAP_TYPE_protocolv2__ns1__Measures ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__Measures(struct soap *soap, const char *URL, _ns1__Measures const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Measures", p->soap_type() == SOAP_TYPE_protocolv2__ns1__Measures ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__Measures * SOAP_FMAC4 soap_get__ns1__Measures(struct soap*, _ns1__Measures *, const char*, const char*);

inline int soap_read__ns1__Measures(struct soap *soap, _ns1__Measures *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || protocolv2::soap_get__ns1__Measures(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__Measures(struct soap *soap, const char *URL, _ns1__Measures *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read__ns1__Measures(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__Measures(struct soap *soap, _ns1__Measures *p)
{
	if (protocolv2::soap_read__ns1__Measures(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2__ns1__ReadenMoldsResponse_DEFINED
#define SOAP_TYPE_protocolv2__ns1__ReadenMoldsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ReadenMoldsResponse(struct soap*, const char*, int, const _ns1__ReadenMoldsResponse *, const char*);
SOAP_FMAC3 _ns1__ReadenMoldsResponse * SOAP_FMAC4 soap_in__ns1__ReadenMoldsResponse(struct soap*, const char*, _ns1__ReadenMoldsResponse *, const char*);
SOAP_FMAC1 _ns1__ReadenMoldsResponse * SOAP_FMAC2 soap_instantiate__ns1__ReadenMoldsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ReadenMoldsResponse * soap_new__ns1__ReadenMoldsResponse(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate__ns1__ReadenMoldsResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__ReadenMoldsResponse * soap_new_req__ns1__ReadenMoldsResponse(
	struct soap *soap)
{
	_ns1__ReadenMoldsResponse *_p = protocolv2::soap_new__ns1__ReadenMoldsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__ReadenMoldsResponse * soap_new_set__ns1__ReadenMoldsResponse(
	struct soap *soap,
	char *ReadenMoldsResult)
{
	_ns1__ReadenMoldsResponse *_p = protocolv2::soap_new__ns1__ReadenMoldsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ReadenMoldsResponse::ReadenMoldsResult = ReadenMoldsResult;
	}
	return _p;
}

inline int soap_write__ns1__ReadenMoldsResponse(struct soap *soap, _ns1__ReadenMoldsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReadenMoldsResponse", p->soap_type() == SOAP_TYPE_protocolv2__ns1__ReadenMoldsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__ReadenMoldsResponse(struct soap *soap, const char *URL, _ns1__ReadenMoldsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReadenMoldsResponse", p->soap_type() == SOAP_TYPE_protocolv2__ns1__ReadenMoldsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__ReadenMoldsResponse(struct soap *soap, const char *URL, _ns1__ReadenMoldsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReadenMoldsResponse", p->soap_type() == SOAP_TYPE_protocolv2__ns1__ReadenMoldsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__ReadenMoldsResponse(struct soap *soap, const char *URL, _ns1__ReadenMoldsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReadenMoldsResponse", p->soap_type() == SOAP_TYPE_protocolv2__ns1__ReadenMoldsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ReadenMoldsResponse * SOAP_FMAC4 soap_get__ns1__ReadenMoldsResponse(struct soap*, _ns1__ReadenMoldsResponse *, const char*, const char*);

inline int soap_read__ns1__ReadenMoldsResponse(struct soap *soap, _ns1__ReadenMoldsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || protocolv2::soap_get__ns1__ReadenMoldsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__ReadenMoldsResponse(struct soap *soap, const char *URL, _ns1__ReadenMoldsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read__ns1__ReadenMoldsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__ReadenMoldsResponse(struct soap *soap, _ns1__ReadenMoldsResponse *p)
{
	if (protocolv2::soap_read__ns1__ReadenMoldsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2__ns1__ReadenMolds_DEFINED
#define SOAP_TYPE_protocolv2__ns1__ReadenMolds_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ReadenMolds(struct soap*, const char*, int, const _ns1__ReadenMolds *, const char*);
SOAP_FMAC3 _ns1__ReadenMolds * SOAP_FMAC4 soap_in__ns1__ReadenMolds(struct soap*, const char*, _ns1__ReadenMolds *, const char*);
SOAP_FMAC1 _ns1__ReadenMolds * SOAP_FMAC2 soap_instantiate__ns1__ReadenMolds(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ReadenMolds * soap_new__ns1__ReadenMolds(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate__ns1__ReadenMolds(soap, n, NULL, NULL, NULL);
}

inline _ns1__ReadenMolds * soap_new_req__ns1__ReadenMolds(
	struct soap *soap)
{
	_ns1__ReadenMolds *_p = protocolv2::soap_new__ns1__ReadenMolds(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__ReadenMolds * soap_new_set__ns1__ReadenMolds(
	struct soap *soap)
{
	_ns1__ReadenMolds *_p = protocolv2::soap_new__ns1__ReadenMolds(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__ReadenMolds(struct soap *soap, _ns1__ReadenMolds const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReadenMolds", p->soap_type() == SOAP_TYPE_protocolv2__ns1__ReadenMolds ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__ReadenMolds(struct soap *soap, const char *URL, _ns1__ReadenMolds const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReadenMolds", p->soap_type() == SOAP_TYPE_protocolv2__ns1__ReadenMolds ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__ReadenMolds(struct soap *soap, const char *URL, _ns1__ReadenMolds const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReadenMolds", p->soap_type() == SOAP_TYPE_protocolv2__ns1__ReadenMolds ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__ReadenMolds(struct soap *soap, const char *URL, _ns1__ReadenMolds const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReadenMolds", p->soap_type() == SOAP_TYPE_protocolv2__ns1__ReadenMolds ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ReadenMolds * SOAP_FMAC4 soap_get__ns1__ReadenMolds(struct soap*, _ns1__ReadenMolds *, const char*, const char*);

inline int soap_read__ns1__ReadenMolds(struct soap *soap, _ns1__ReadenMolds *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || protocolv2::soap_get__ns1__ReadenMolds(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__ReadenMolds(struct soap *soap, const char *URL, _ns1__ReadenMolds *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read__ns1__ReadenMolds(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__ReadenMolds(struct soap *soap, _ns1__ReadenMolds *p)
{
	if (protocolv2::soap_read__ns1__ReadenMolds(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2__ns1__EjectedMoldsResponse_DEFINED
#define SOAP_TYPE_protocolv2__ns1__EjectedMoldsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__EjectedMoldsResponse(struct soap*, const char*, int, const _ns1__EjectedMoldsResponse *, const char*);
SOAP_FMAC3 _ns1__EjectedMoldsResponse * SOAP_FMAC4 soap_in__ns1__EjectedMoldsResponse(struct soap*, const char*, _ns1__EjectedMoldsResponse *, const char*);
SOAP_FMAC1 _ns1__EjectedMoldsResponse * SOAP_FMAC2 soap_instantiate__ns1__EjectedMoldsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__EjectedMoldsResponse * soap_new__ns1__EjectedMoldsResponse(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate__ns1__EjectedMoldsResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__EjectedMoldsResponse * soap_new_req__ns1__EjectedMoldsResponse(
	struct soap *soap)
{
	_ns1__EjectedMoldsResponse *_p = protocolv2::soap_new__ns1__EjectedMoldsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__EjectedMoldsResponse * soap_new_set__ns1__EjectedMoldsResponse(
	struct soap *soap,
	char *EjectedMoldsResult)
{
	_ns1__EjectedMoldsResponse *_p = protocolv2::soap_new__ns1__EjectedMoldsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__EjectedMoldsResponse::EjectedMoldsResult = EjectedMoldsResult;
	}
	return _p;
}

inline int soap_write__ns1__EjectedMoldsResponse(struct soap *soap, _ns1__EjectedMoldsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EjectedMoldsResponse", p->soap_type() == SOAP_TYPE_protocolv2__ns1__EjectedMoldsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__EjectedMoldsResponse(struct soap *soap, const char *URL, _ns1__EjectedMoldsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EjectedMoldsResponse", p->soap_type() == SOAP_TYPE_protocolv2__ns1__EjectedMoldsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__EjectedMoldsResponse(struct soap *soap, const char *URL, _ns1__EjectedMoldsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EjectedMoldsResponse", p->soap_type() == SOAP_TYPE_protocolv2__ns1__EjectedMoldsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__EjectedMoldsResponse(struct soap *soap, const char *URL, _ns1__EjectedMoldsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EjectedMoldsResponse", p->soap_type() == SOAP_TYPE_protocolv2__ns1__EjectedMoldsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__EjectedMoldsResponse * SOAP_FMAC4 soap_get__ns1__EjectedMoldsResponse(struct soap*, _ns1__EjectedMoldsResponse *, const char*, const char*);

inline int soap_read__ns1__EjectedMoldsResponse(struct soap *soap, _ns1__EjectedMoldsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || protocolv2::soap_get__ns1__EjectedMoldsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__EjectedMoldsResponse(struct soap *soap, const char *URL, _ns1__EjectedMoldsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read__ns1__EjectedMoldsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__EjectedMoldsResponse(struct soap *soap, _ns1__EjectedMoldsResponse *p)
{
	if (protocolv2::soap_read__ns1__EjectedMoldsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2__ns1__EjectedMolds_DEFINED
#define SOAP_TYPE_protocolv2__ns1__EjectedMolds_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__EjectedMolds(struct soap*, const char*, int, const _ns1__EjectedMolds *, const char*);
SOAP_FMAC3 _ns1__EjectedMolds * SOAP_FMAC4 soap_in__ns1__EjectedMolds(struct soap*, const char*, _ns1__EjectedMolds *, const char*);
SOAP_FMAC1 _ns1__EjectedMolds * SOAP_FMAC2 soap_instantiate__ns1__EjectedMolds(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__EjectedMolds * soap_new__ns1__EjectedMolds(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate__ns1__EjectedMolds(soap, n, NULL, NULL, NULL);
}

inline _ns1__EjectedMolds * soap_new_req__ns1__EjectedMolds(
	struct soap *soap)
{
	_ns1__EjectedMolds *_p = protocolv2::soap_new__ns1__EjectedMolds(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__EjectedMolds * soap_new_set__ns1__EjectedMolds(
	struct soap *soap)
{
	_ns1__EjectedMolds *_p = protocolv2::soap_new__ns1__EjectedMolds(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__EjectedMolds(struct soap *soap, _ns1__EjectedMolds const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EjectedMolds", p->soap_type() == SOAP_TYPE_protocolv2__ns1__EjectedMolds ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__EjectedMolds(struct soap *soap, const char *URL, _ns1__EjectedMolds const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EjectedMolds", p->soap_type() == SOAP_TYPE_protocolv2__ns1__EjectedMolds ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__EjectedMolds(struct soap *soap, const char *URL, _ns1__EjectedMolds const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EjectedMolds", p->soap_type() == SOAP_TYPE_protocolv2__ns1__EjectedMolds ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__EjectedMolds(struct soap *soap, const char *URL, _ns1__EjectedMolds const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EjectedMolds", p->soap_type() == SOAP_TYPE_protocolv2__ns1__EjectedMolds ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__EjectedMolds * SOAP_FMAC4 soap_get__ns1__EjectedMolds(struct soap*, _ns1__EjectedMolds *, const char*, const char*);

inline int soap_read__ns1__EjectedMolds(struct soap *soap, _ns1__EjectedMolds *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || protocolv2::soap_get__ns1__EjectedMolds(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__EjectedMolds(struct soap *soap, const char *URL, _ns1__EjectedMolds *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read__ns1__EjectedMolds(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__EjectedMolds(struct soap *soap, _ns1__EjectedMolds *p)
{
	if (protocolv2::soap_read__ns1__EjectedMolds(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2__ns1__MountedMoldsResponse_DEFINED
#define SOAP_TYPE_protocolv2__ns1__MountedMoldsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__MountedMoldsResponse(struct soap*, const char*, int, const _ns1__MountedMoldsResponse *, const char*);
SOAP_FMAC3 _ns1__MountedMoldsResponse * SOAP_FMAC4 soap_in__ns1__MountedMoldsResponse(struct soap*, const char*, _ns1__MountedMoldsResponse *, const char*);
SOAP_FMAC1 _ns1__MountedMoldsResponse * SOAP_FMAC2 soap_instantiate__ns1__MountedMoldsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__MountedMoldsResponse * soap_new__ns1__MountedMoldsResponse(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate__ns1__MountedMoldsResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__MountedMoldsResponse * soap_new_req__ns1__MountedMoldsResponse(
	struct soap *soap)
{
	_ns1__MountedMoldsResponse *_p = protocolv2::soap_new__ns1__MountedMoldsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__MountedMoldsResponse * soap_new_set__ns1__MountedMoldsResponse(
	struct soap *soap,
	char *MountedMoldsResult)
{
	_ns1__MountedMoldsResponse *_p = protocolv2::soap_new__ns1__MountedMoldsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__MountedMoldsResponse::MountedMoldsResult = MountedMoldsResult;
	}
	return _p;
}

inline int soap_write__ns1__MountedMoldsResponse(struct soap *soap, _ns1__MountedMoldsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MountedMoldsResponse", p->soap_type() == SOAP_TYPE_protocolv2__ns1__MountedMoldsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__MountedMoldsResponse(struct soap *soap, const char *URL, _ns1__MountedMoldsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MountedMoldsResponse", p->soap_type() == SOAP_TYPE_protocolv2__ns1__MountedMoldsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__MountedMoldsResponse(struct soap *soap, const char *URL, _ns1__MountedMoldsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MountedMoldsResponse", p->soap_type() == SOAP_TYPE_protocolv2__ns1__MountedMoldsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__MountedMoldsResponse(struct soap *soap, const char *URL, _ns1__MountedMoldsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MountedMoldsResponse", p->soap_type() == SOAP_TYPE_protocolv2__ns1__MountedMoldsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__MountedMoldsResponse * SOAP_FMAC4 soap_get__ns1__MountedMoldsResponse(struct soap*, _ns1__MountedMoldsResponse *, const char*, const char*);

inline int soap_read__ns1__MountedMoldsResponse(struct soap *soap, _ns1__MountedMoldsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || protocolv2::soap_get__ns1__MountedMoldsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__MountedMoldsResponse(struct soap *soap, const char *URL, _ns1__MountedMoldsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read__ns1__MountedMoldsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__MountedMoldsResponse(struct soap *soap, _ns1__MountedMoldsResponse *p)
{
	if (protocolv2::soap_read__ns1__MountedMoldsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2__ns1__MountedMolds_DEFINED
#define SOAP_TYPE_protocolv2__ns1__MountedMolds_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__MountedMolds(struct soap*, const char*, int, const _ns1__MountedMolds *, const char*);
SOAP_FMAC3 _ns1__MountedMolds * SOAP_FMAC4 soap_in__ns1__MountedMolds(struct soap*, const char*, _ns1__MountedMolds *, const char*);
SOAP_FMAC1 _ns1__MountedMolds * SOAP_FMAC2 soap_instantiate__ns1__MountedMolds(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__MountedMolds * soap_new__ns1__MountedMolds(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate__ns1__MountedMolds(soap, n, NULL, NULL, NULL);
}

inline _ns1__MountedMolds * soap_new_req__ns1__MountedMolds(
	struct soap *soap)
{
	_ns1__MountedMolds *_p = protocolv2::soap_new__ns1__MountedMolds(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__MountedMolds * soap_new_set__ns1__MountedMolds(
	struct soap *soap)
{
	_ns1__MountedMolds *_p = protocolv2::soap_new__ns1__MountedMolds(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__MountedMolds(struct soap *soap, _ns1__MountedMolds const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MountedMolds", p->soap_type() == SOAP_TYPE_protocolv2__ns1__MountedMolds ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__MountedMolds(struct soap *soap, const char *URL, _ns1__MountedMolds const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MountedMolds", p->soap_type() == SOAP_TYPE_protocolv2__ns1__MountedMolds ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__MountedMolds(struct soap *soap, const char *URL, _ns1__MountedMolds const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MountedMolds", p->soap_type() == SOAP_TYPE_protocolv2__ns1__MountedMolds ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__MountedMolds(struct soap *soap, const char *URL, _ns1__MountedMolds const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MountedMolds", p->soap_type() == SOAP_TYPE_protocolv2__ns1__MountedMolds ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__MountedMolds * SOAP_FMAC4 soap_get__ns1__MountedMolds(struct soap*, _ns1__MountedMolds *, const char*, const char*);

inline int soap_read__ns1__MountedMolds(struct soap *soap, _ns1__MountedMolds *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || protocolv2::soap_get__ns1__MountedMolds(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__MountedMolds(struct soap *soap, const char *URL, _ns1__MountedMolds *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read__ns1__MountedMolds(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__MountedMolds(struct soap *soap, _ns1__MountedMolds *p)
{
	if (protocolv2::soap_read__ns1__MountedMolds(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2__ns1__GetUpdatedLastRequestDateResponse_DEFINED
#define SOAP_TYPE_protocolv2__ns1__GetUpdatedLastRequestDateResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetUpdatedLastRequestDateResponse(struct soap*, const char*, int, const _ns1__GetUpdatedLastRequestDateResponse *, const char*);
SOAP_FMAC3 _ns1__GetUpdatedLastRequestDateResponse * SOAP_FMAC4 soap_in__ns1__GetUpdatedLastRequestDateResponse(struct soap*, const char*, _ns1__GetUpdatedLastRequestDateResponse *, const char*);
SOAP_FMAC1 _ns1__GetUpdatedLastRequestDateResponse * SOAP_FMAC2 soap_instantiate__ns1__GetUpdatedLastRequestDateResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetUpdatedLastRequestDateResponse * soap_new__ns1__GetUpdatedLastRequestDateResponse(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate__ns1__GetUpdatedLastRequestDateResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetUpdatedLastRequestDateResponse * soap_new_req__ns1__GetUpdatedLastRequestDateResponse(
	struct soap *soap,
	time_t GetUpdatedLastRequestDateResult)
{
	_ns1__GetUpdatedLastRequestDateResponse *_p = protocolv2::soap_new__ns1__GetUpdatedLastRequestDateResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetUpdatedLastRequestDateResponse::GetUpdatedLastRequestDateResult = GetUpdatedLastRequestDateResult;
	}
	return _p;
}

inline _ns1__GetUpdatedLastRequestDateResponse * soap_new_set__ns1__GetUpdatedLastRequestDateResponse(
	struct soap *soap,
	time_t GetUpdatedLastRequestDateResult)
{
	_ns1__GetUpdatedLastRequestDateResponse *_p = protocolv2::soap_new__ns1__GetUpdatedLastRequestDateResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetUpdatedLastRequestDateResponse::GetUpdatedLastRequestDateResult = GetUpdatedLastRequestDateResult;
	}
	return _p;
}

inline int soap_write__ns1__GetUpdatedLastRequestDateResponse(struct soap *soap, _ns1__GetUpdatedLastRequestDateResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetUpdatedLastRequestDateResponse", p->soap_type() == SOAP_TYPE_protocolv2__ns1__GetUpdatedLastRequestDateResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetUpdatedLastRequestDateResponse(struct soap *soap, const char *URL, _ns1__GetUpdatedLastRequestDateResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetUpdatedLastRequestDateResponse", p->soap_type() == SOAP_TYPE_protocolv2__ns1__GetUpdatedLastRequestDateResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__GetUpdatedLastRequestDateResponse(struct soap *soap, const char *URL, _ns1__GetUpdatedLastRequestDateResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetUpdatedLastRequestDateResponse", p->soap_type() == SOAP_TYPE_protocolv2__ns1__GetUpdatedLastRequestDateResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetUpdatedLastRequestDateResponse(struct soap *soap, const char *URL, _ns1__GetUpdatedLastRequestDateResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetUpdatedLastRequestDateResponse", p->soap_type() == SOAP_TYPE_protocolv2__ns1__GetUpdatedLastRequestDateResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetUpdatedLastRequestDateResponse * SOAP_FMAC4 soap_get__ns1__GetUpdatedLastRequestDateResponse(struct soap*, _ns1__GetUpdatedLastRequestDateResponse *, const char*, const char*);

inline int soap_read__ns1__GetUpdatedLastRequestDateResponse(struct soap *soap, _ns1__GetUpdatedLastRequestDateResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || protocolv2::soap_get__ns1__GetUpdatedLastRequestDateResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetUpdatedLastRequestDateResponse(struct soap *soap, const char *URL, _ns1__GetUpdatedLastRequestDateResponse *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read__ns1__GetUpdatedLastRequestDateResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__GetUpdatedLastRequestDateResponse(struct soap *soap, _ns1__GetUpdatedLastRequestDateResponse *p)
{
	if (protocolv2::soap_read__ns1__GetUpdatedLastRequestDateResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2__ns1__GetUpdatedLastRequestDate_DEFINED
#define SOAP_TYPE_protocolv2__ns1__GetUpdatedLastRequestDate_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetUpdatedLastRequestDate(struct soap*, const char*, int, const _ns1__GetUpdatedLastRequestDate *, const char*);
SOAP_FMAC3 _ns1__GetUpdatedLastRequestDate * SOAP_FMAC4 soap_in__ns1__GetUpdatedLastRequestDate(struct soap*, const char*, _ns1__GetUpdatedLastRequestDate *, const char*);
SOAP_FMAC1 _ns1__GetUpdatedLastRequestDate * SOAP_FMAC2 soap_instantiate__ns1__GetUpdatedLastRequestDate(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetUpdatedLastRequestDate * soap_new__ns1__GetUpdatedLastRequestDate(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate__ns1__GetUpdatedLastRequestDate(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetUpdatedLastRequestDate * soap_new_req__ns1__GetUpdatedLastRequestDate(
	struct soap *soap,
	int functionNumber)
{
	_ns1__GetUpdatedLastRequestDate *_p = protocolv2::soap_new__ns1__GetUpdatedLastRequestDate(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetUpdatedLastRequestDate::functionNumber = functionNumber;
	}
	return _p;
}

inline _ns1__GetUpdatedLastRequestDate * soap_new_set__ns1__GetUpdatedLastRequestDate(
	struct soap *soap,
	int functionNumber)
{
	_ns1__GetUpdatedLastRequestDate *_p = protocolv2::soap_new__ns1__GetUpdatedLastRequestDate(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetUpdatedLastRequestDate::functionNumber = functionNumber;
	}
	return _p;
}

inline int soap_write__ns1__GetUpdatedLastRequestDate(struct soap *soap, _ns1__GetUpdatedLastRequestDate const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetUpdatedLastRequestDate", p->soap_type() == SOAP_TYPE_protocolv2__ns1__GetUpdatedLastRequestDate ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetUpdatedLastRequestDate(struct soap *soap, const char *URL, _ns1__GetUpdatedLastRequestDate const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetUpdatedLastRequestDate", p->soap_type() == SOAP_TYPE_protocolv2__ns1__GetUpdatedLastRequestDate ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__GetUpdatedLastRequestDate(struct soap *soap, const char *URL, _ns1__GetUpdatedLastRequestDate const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetUpdatedLastRequestDate", p->soap_type() == SOAP_TYPE_protocolv2__ns1__GetUpdatedLastRequestDate ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetUpdatedLastRequestDate(struct soap *soap, const char *URL, _ns1__GetUpdatedLastRequestDate const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetUpdatedLastRequestDate", p->soap_type() == SOAP_TYPE_protocolv2__ns1__GetUpdatedLastRequestDate ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetUpdatedLastRequestDate * SOAP_FMAC4 soap_get__ns1__GetUpdatedLastRequestDate(struct soap*, _ns1__GetUpdatedLastRequestDate *, const char*, const char*);

inline int soap_read__ns1__GetUpdatedLastRequestDate(struct soap *soap, _ns1__GetUpdatedLastRequestDate *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || protocolv2::soap_get__ns1__GetUpdatedLastRequestDate(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetUpdatedLastRequestDate(struct soap *soap, const char *URL, _ns1__GetUpdatedLastRequestDate *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read__ns1__GetUpdatedLastRequestDate(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__GetUpdatedLastRequestDate(struct soap *soap, _ns1__GetUpdatedLastRequestDate *p)
{
	if (protocolv2::soap_read__ns1__GetUpdatedLastRequestDate(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2__ns1__PreserveCountsResponse_DEFINED
#define SOAP_TYPE_protocolv2__ns1__PreserveCountsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__PreserveCountsResponse(struct soap*, const char*, int, const _ns1__PreserveCountsResponse *, const char*);
SOAP_FMAC3 _ns1__PreserveCountsResponse * SOAP_FMAC4 soap_in__ns1__PreserveCountsResponse(struct soap*, const char*, _ns1__PreserveCountsResponse *, const char*);
SOAP_FMAC1 _ns1__PreserveCountsResponse * SOAP_FMAC2 soap_instantiate__ns1__PreserveCountsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__PreserveCountsResponse * soap_new__ns1__PreserveCountsResponse(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate__ns1__PreserveCountsResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__PreserveCountsResponse * soap_new_req__ns1__PreserveCountsResponse(
	struct soap *soap)
{
	_ns1__PreserveCountsResponse *_p = protocolv2::soap_new__ns1__PreserveCountsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__PreserveCountsResponse * soap_new_set__ns1__PreserveCountsResponse(
	struct soap *soap,
	char *PreserveCountsResult)
{
	_ns1__PreserveCountsResponse *_p = protocolv2::soap_new__ns1__PreserveCountsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__PreserveCountsResponse::PreserveCountsResult = PreserveCountsResult;
	}
	return _p;
}

inline int soap_write__ns1__PreserveCountsResponse(struct soap *soap, _ns1__PreserveCountsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PreserveCountsResponse", p->soap_type() == SOAP_TYPE_protocolv2__ns1__PreserveCountsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__PreserveCountsResponse(struct soap *soap, const char *URL, _ns1__PreserveCountsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PreserveCountsResponse", p->soap_type() == SOAP_TYPE_protocolv2__ns1__PreserveCountsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__PreserveCountsResponse(struct soap *soap, const char *URL, _ns1__PreserveCountsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PreserveCountsResponse", p->soap_type() == SOAP_TYPE_protocolv2__ns1__PreserveCountsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__PreserveCountsResponse(struct soap *soap, const char *URL, _ns1__PreserveCountsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PreserveCountsResponse", p->soap_type() == SOAP_TYPE_protocolv2__ns1__PreserveCountsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__PreserveCountsResponse * SOAP_FMAC4 soap_get__ns1__PreserveCountsResponse(struct soap*, _ns1__PreserveCountsResponse *, const char*, const char*);

inline int soap_read__ns1__PreserveCountsResponse(struct soap *soap, _ns1__PreserveCountsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || protocolv2::soap_get__ns1__PreserveCountsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__PreserveCountsResponse(struct soap *soap, const char *URL, _ns1__PreserveCountsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read__ns1__PreserveCountsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__PreserveCountsResponse(struct soap *soap, _ns1__PreserveCountsResponse *p)
{
	if (protocolv2::soap_read__ns1__PreserveCountsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2__ns1__PreserveCounts_DEFINED
#define SOAP_TYPE_protocolv2__ns1__PreserveCounts_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__PreserveCounts(struct soap*, const char*, int, const _ns1__PreserveCounts *, const char*);
SOAP_FMAC3 _ns1__PreserveCounts * SOAP_FMAC4 soap_in__ns1__PreserveCounts(struct soap*, const char*, _ns1__PreserveCounts *, const char*);
SOAP_FMAC1 _ns1__PreserveCounts * SOAP_FMAC2 soap_instantiate__ns1__PreserveCounts(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__PreserveCounts * soap_new__ns1__PreserveCounts(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate__ns1__PreserveCounts(soap, n, NULL, NULL, NULL);
}

inline _ns1__PreserveCounts * soap_new_req__ns1__PreserveCounts(
	struct soap *soap)
{
	_ns1__PreserveCounts *_p = protocolv2::soap_new__ns1__PreserveCounts(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__PreserveCounts * soap_new_set__ns1__PreserveCounts(
	struct soap *soap)
{
	_ns1__PreserveCounts *_p = protocolv2::soap_new__ns1__PreserveCounts(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__PreserveCounts(struct soap *soap, _ns1__PreserveCounts const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PreserveCounts", p->soap_type() == SOAP_TYPE_protocolv2__ns1__PreserveCounts ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__PreserveCounts(struct soap *soap, const char *URL, _ns1__PreserveCounts const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PreserveCounts", p->soap_type() == SOAP_TYPE_protocolv2__ns1__PreserveCounts ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__PreserveCounts(struct soap *soap, const char *URL, _ns1__PreserveCounts const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PreserveCounts", p->soap_type() == SOAP_TYPE_protocolv2__ns1__PreserveCounts ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__PreserveCounts(struct soap *soap, const char *URL, _ns1__PreserveCounts const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PreserveCounts", p->soap_type() == SOAP_TYPE_protocolv2__ns1__PreserveCounts ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__PreserveCounts * SOAP_FMAC4 soap_get__ns1__PreserveCounts(struct soap*, _ns1__PreserveCounts *, const char*, const char*);

inline int soap_read__ns1__PreserveCounts(struct soap *soap, _ns1__PreserveCounts *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || protocolv2::soap_get__ns1__PreserveCounts(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__PreserveCounts(struct soap *soap, const char *URL, _ns1__PreserveCounts *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read__ns1__PreserveCounts(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__PreserveCounts(struct soap *soap, _ns1__PreserveCounts *p)
{
	if (protocolv2::soap_read__ns1__PreserveCounts(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2__ns1__CountsByArticleResponse_DEFINED
#define SOAP_TYPE_protocolv2__ns1__CountsByArticleResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CountsByArticleResponse(struct soap*, const char*, int, const _ns1__CountsByArticleResponse *, const char*);
SOAP_FMAC3 _ns1__CountsByArticleResponse * SOAP_FMAC4 soap_in__ns1__CountsByArticleResponse(struct soap*, const char*, _ns1__CountsByArticleResponse *, const char*);
SOAP_FMAC1 _ns1__CountsByArticleResponse * SOAP_FMAC2 soap_instantiate__ns1__CountsByArticleResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CountsByArticleResponse * soap_new__ns1__CountsByArticleResponse(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate__ns1__CountsByArticleResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__CountsByArticleResponse * soap_new_req__ns1__CountsByArticleResponse(
	struct soap *soap)
{
	_ns1__CountsByArticleResponse *_p = protocolv2::soap_new__ns1__CountsByArticleResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__CountsByArticleResponse * soap_new_set__ns1__CountsByArticleResponse(
	struct soap *soap,
	ns1__CountsByArticleResult *CountsByArticleResult)
{
	_ns1__CountsByArticleResponse *_p = protocolv2::soap_new__ns1__CountsByArticleResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CountsByArticleResponse::CountsByArticleResult = CountsByArticleResult;
	}
	return _p;
}

inline int soap_write__ns1__CountsByArticleResponse(struct soap *soap, _ns1__CountsByArticleResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CountsByArticleResponse", p->soap_type() == SOAP_TYPE_protocolv2__ns1__CountsByArticleResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__CountsByArticleResponse(struct soap *soap, const char *URL, _ns1__CountsByArticleResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CountsByArticleResponse", p->soap_type() == SOAP_TYPE_protocolv2__ns1__CountsByArticleResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__CountsByArticleResponse(struct soap *soap, const char *URL, _ns1__CountsByArticleResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CountsByArticleResponse", p->soap_type() == SOAP_TYPE_protocolv2__ns1__CountsByArticleResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__CountsByArticleResponse(struct soap *soap, const char *URL, _ns1__CountsByArticleResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CountsByArticleResponse", p->soap_type() == SOAP_TYPE_protocolv2__ns1__CountsByArticleResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CountsByArticleResponse * SOAP_FMAC4 soap_get__ns1__CountsByArticleResponse(struct soap*, _ns1__CountsByArticleResponse *, const char*, const char*);

inline int soap_read__ns1__CountsByArticleResponse(struct soap *soap, _ns1__CountsByArticleResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || protocolv2::soap_get__ns1__CountsByArticleResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__CountsByArticleResponse(struct soap *soap, const char *URL, _ns1__CountsByArticleResponse *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read__ns1__CountsByArticleResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__CountsByArticleResponse(struct soap *soap, _ns1__CountsByArticleResponse *p)
{
	if (protocolv2::soap_read__ns1__CountsByArticleResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2__ns1__CountsByArticle_DEFINED
#define SOAP_TYPE_protocolv2__ns1__CountsByArticle_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CountsByArticle(struct soap*, const char*, int, const _ns1__CountsByArticle *, const char*);
SOAP_FMAC3 _ns1__CountsByArticle * SOAP_FMAC4 soap_in__ns1__CountsByArticle(struct soap*, const char*, _ns1__CountsByArticle *, const char*);
SOAP_FMAC1 _ns1__CountsByArticle * SOAP_FMAC2 soap_instantiate__ns1__CountsByArticle(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CountsByArticle * soap_new__ns1__CountsByArticle(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate__ns1__CountsByArticle(soap, n, NULL, NULL, NULL);
}

inline _ns1__CountsByArticle * soap_new_req__ns1__CountsByArticle(
	struct soap *soap)
{
	_ns1__CountsByArticle *_p = protocolv2::soap_new__ns1__CountsByArticle(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__CountsByArticle * soap_new_set__ns1__CountsByArticle(
	struct soap *soap)
{
	_ns1__CountsByArticle *_p = protocolv2::soap_new__ns1__CountsByArticle(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__CountsByArticle(struct soap *soap, _ns1__CountsByArticle const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CountsByArticle", p->soap_type() == SOAP_TYPE_protocolv2__ns1__CountsByArticle ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__CountsByArticle(struct soap *soap, const char *URL, _ns1__CountsByArticle const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CountsByArticle", p->soap_type() == SOAP_TYPE_protocolv2__ns1__CountsByArticle ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__CountsByArticle(struct soap *soap, const char *URL, _ns1__CountsByArticle const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CountsByArticle", p->soap_type() == SOAP_TYPE_protocolv2__ns1__CountsByArticle ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__CountsByArticle(struct soap *soap, const char *URL, _ns1__CountsByArticle const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CountsByArticle", p->soap_type() == SOAP_TYPE_protocolv2__ns1__CountsByArticle ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CountsByArticle * SOAP_FMAC4 soap_get__ns1__CountsByArticle(struct soap*, _ns1__CountsByArticle *, const char*, const char*);

inline int soap_read__ns1__CountsByArticle(struct soap *soap, _ns1__CountsByArticle *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || protocolv2::soap_get__ns1__CountsByArticle(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__CountsByArticle(struct soap *soap, const char *URL, _ns1__CountsByArticle *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read__ns1__CountsByArticle(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__CountsByArticle(struct soap *soap, _ns1__CountsByArticle *p)
{
	if (protocolv2::soap_read__ns1__CountsByArticle(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2__ns1__CountsResponse_DEFINED
#define SOAP_TYPE_protocolv2__ns1__CountsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CountsResponse(struct soap*, const char*, int, const _ns1__CountsResponse *, const char*);
SOAP_FMAC3 _ns1__CountsResponse * SOAP_FMAC4 soap_in__ns1__CountsResponse(struct soap*, const char*, _ns1__CountsResponse *, const char*);
SOAP_FMAC1 _ns1__CountsResponse * SOAP_FMAC2 soap_instantiate__ns1__CountsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CountsResponse * soap_new__ns1__CountsResponse(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate__ns1__CountsResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__CountsResponse * soap_new_req__ns1__CountsResponse(
	struct soap *soap)
{
	_ns1__CountsResponse *_p = protocolv2::soap_new__ns1__CountsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__CountsResponse * soap_new_set__ns1__CountsResponse(
	struct soap *soap,
	char *CountsResult)
{
	_ns1__CountsResponse *_p = protocolv2::soap_new__ns1__CountsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CountsResponse::CountsResult = CountsResult;
	}
	return _p;
}

inline int soap_write__ns1__CountsResponse(struct soap *soap, _ns1__CountsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CountsResponse", p->soap_type() == SOAP_TYPE_protocolv2__ns1__CountsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__CountsResponse(struct soap *soap, const char *URL, _ns1__CountsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CountsResponse", p->soap_type() == SOAP_TYPE_protocolv2__ns1__CountsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__CountsResponse(struct soap *soap, const char *URL, _ns1__CountsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CountsResponse", p->soap_type() == SOAP_TYPE_protocolv2__ns1__CountsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__CountsResponse(struct soap *soap, const char *URL, _ns1__CountsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CountsResponse", p->soap_type() == SOAP_TYPE_protocolv2__ns1__CountsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CountsResponse * SOAP_FMAC4 soap_get__ns1__CountsResponse(struct soap*, _ns1__CountsResponse *, const char*, const char*);

inline int soap_read__ns1__CountsResponse(struct soap *soap, _ns1__CountsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || protocolv2::soap_get__ns1__CountsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__CountsResponse(struct soap *soap, const char *URL, _ns1__CountsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read__ns1__CountsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__CountsResponse(struct soap *soap, _ns1__CountsResponse *p)
{
	if (protocolv2::soap_read__ns1__CountsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2__ns1__Counts_DEFINED
#define SOAP_TYPE_protocolv2__ns1__Counts_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Counts(struct soap*, const char*, int, const _ns1__Counts *, const char*);
SOAP_FMAC3 _ns1__Counts * SOAP_FMAC4 soap_in__ns1__Counts(struct soap*, const char*, _ns1__Counts *, const char*);
SOAP_FMAC1 _ns1__Counts * SOAP_FMAC2 soap_instantiate__ns1__Counts(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__Counts * soap_new__ns1__Counts(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate__ns1__Counts(soap, n, NULL, NULL, NULL);
}

inline _ns1__Counts * soap_new_req__ns1__Counts(
	struct soap *soap)
{
	_ns1__Counts *_p = protocolv2::soap_new__ns1__Counts(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__Counts * soap_new_set__ns1__Counts(
	struct soap *soap)
{
	_ns1__Counts *_p = protocolv2::soap_new__ns1__Counts(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__Counts(struct soap *soap, _ns1__Counts const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Counts", p->soap_type() == SOAP_TYPE_protocolv2__ns1__Counts ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__Counts(struct soap *soap, const char *URL, _ns1__Counts const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Counts", p->soap_type() == SOAP_TYPE_protocolv2__ns1__Counts ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__Counts(struct soap *soap, const char *URL, _ns1__Counts const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Counts", p->soap_type() == SOAP_TYPE_protocolv2__ns1__Counts ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__Counts(struct soap *soap, const char *URL, _ns1__Counts const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Counts", p->soap_type() == SOAP_TYPE_protocolv2__ns1__Counts ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__Counts * SOAP_FMAC4 soap_get__ns1__Counts(struct soap*, _ns1__Counts *, const char*, const char*);

inline int soap_read__ns1__Counts(struct soap *soap, _ns1__Counts *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || protocolv2::soap_get__ns1__Counts(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__Counts(struct soap *soap, const char *URL, _ns1__Counts *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read__ns1__Counts(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__Counts(struct soap *soap, _ns1__Counts *p)
{
	if (protocolv2::soap_read__ns1__Counts(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2_ns1__ArrayOfCCompteurArticle_DEFINED
#define SOAP_TYPE_protocolv2_ns1__ArrayOfCCompteurArticle_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfCCompteurArticle(struct soap*, const char*, int, const ns1__ArrayOfCCompteurArticle *, const char*);
SOAP_FMAC3 ns1__ArrayOfCCompteurArticle * SOAP_FMAC4 soap_in_ns1__ArrayOfCCompteurArticle(struct soap*, const char*, ns1__ArrayOfCCompteurArticle *, const char*);
SOAP_FMAC1 ns1__ArrayOfCCompteurArticle * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfCCompteurArticle(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ArrayOfCCompteurArticle * soap_new_ns1__ArrayOfCCompteurArticle(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate_ns1__ArrayOfCCompteurArticle(soap, n, NULL, NULL, NULL);
}

inline ns1__ArrayOfCCompteurArticle * soap_new_req_ns1__ArrayOfCCompteurArticle(
	struct soap *soap,
	int __sizeArticle,
	ns1__CCompteurArticle **Article)
{
	ns1__ArrayOfCCompteurArticle *_p = protocolv2::soap_new_ns1__ArrayOfCCompteurArticle(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ArrayOfCCompteurArticle::__sizeArticle = __sizeArticle;
		_p->ns1__ArrayOfCCompteurArticle::Article = Article;
	}
	return _p;
}

inline ns1__ArrayOfCCompteurArticle * soap_new_set_ns1__ArrayOfCCompteurArticle(
	struct soap *soap,
	int __sizeArticle,
	ns1__CCompteurArticle **Article)
{
	ns1__ArrayOfCCompteurArticle *_p = protocolv2::soap_new_ns1__ArrayOfCCompteurArticle(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ArrayOfCCompteurArticle::__sizeArticle = __sizeArticle;
		_p->ns1__ArrayOfCCompteurArticle::Article = Article;
	}
	return _p;
}

inline int soap_write_ns1__ArrayOfCCompteurArticle(struct soap *soap, ns1__ArrayOfCCompteurArticle const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfCCompteurArticle", p->soap_type() == SOAP_TYPE_protocolv2_ns1__ArrayOfCCompteurArticle ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ArrayOfCCompteurArticle(struct soap *soap, const char *URL, ns1__ArrayOfCCompteurArticle const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfCCompteurArticle", p->soap_type() == SOAP_TYPE_protocolv2_ns1__ArrayOfCCompteurArticle ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ArrayOfCCompteurArticle(struct soap *soap, const char *URL, ns1__ArrayOfCCompteurArticle const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfCCompteurArticle", p->soap_type() == SOAP_TYPE_protocolv2_ns1__ArrayOfCCompteurArticle ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ArrayOfCCompteurArticle(struct soap *soap, const char *URL, ns1__ArrayOfCCompteurArticle const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfCCompteurArticle", p->soap_type() == SOAP_TYPE_protocolv2_ns1__ArrayOfCCompteurArticle ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ArrayOfCCompteurArticle * SOAP_FMAC4 soap_get_ns1__ArrayOfCCompteurArticle(struct soap*, ns1__ArrayOfCCompteurArticle *, const char*, const char*);

inline int soap_read_ns1__ArrayOfCCompteurArticle(struct soap *soap, ns1__ArrayOfCCompteurArticle *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || protocolv2::soap_get_ns1__ArrayOfCCompteurArticle(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ArrayOfCCompteurArticle(struct soap *soap, const char *URL, ns1__ArrayOfCCompteurArticle *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read_ns1__ArrayOfCCompteurArticle(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ArrayOfCCompteurArticle(struct soap *soap, ns1__ArrayOfCCompteurArticle *p)
{
	if (protocolv2::soap_read_ns1__ArrayOfCCompteurArticle(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2_ns1__CCompteurArticle_DEFINED
#define SOAP_TYPE_protocolv2_ns1__CCompteurArticle_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CCompteurArticle(struct soap*, const char*, int, const ns1__CCompteurArticle *, const char*);
SOAP_FMAC3 ns1__CCompteurArticle * SOAP_FMAC4 soap_in_ns1__CCompteurArticle(struct soap*, const char*, ns1__CCompteurArticle *, const char*);
SOAP_FMAC1 ns1__CCompteurArticle * SOAP_FMAC2 soap_instantiate_ns1__CCompteurArticle(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CCompteurArticle * soap_new_ns1__CCompteurArticle(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate_ns1__CCompteurArticle(soap, n, NULL, NULL, NULL);
}

inline ns1__CCompteurArticle * soap_new_req_ns1__CCompteurArticle(
	struct soap *soap,
	int __sizeSensor,
	ns1__CCompteurMouleCapteur **Sensor,
	int id,
	int Rejects__1,
	int Defects__1)
{
	ns1__CCompteurArticle *_p = protocolv2::soap_new_ns1__CCompteurArticle(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CCompteurArticle::__sizeSensor = __sizeSensor;
		_p->ns1__CCompteurArticle::Sensor = Sensor;
		_p->ns1__CCompteurArticle::id = id;
		_p->ns1__CCompteurMoule::Rejects = Rejects__1;
		_p->ns1__CCompteurMoule::Defects = Defects__1;
	}
	return _p;
}

inline ns1__CCompteurArticle * soap_new_set_ns1__CCompteurArticle(
	struct soap *soap,
	int __sizeSensor,
	ns1__CCompteurMouleCapteur **Sensor,
	int id,
	int *Inspected__1,
	int Rejects__1,
	int Defects__1)
{
	ns1__CCompteurArticle *_p = protocolv2::soap_new_ns1__CCompteurArticle(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CCompteurArticle::__sizeSensor = __sizeSensor;
		_p->ns1__CCompteurArticle::Sensor = Sensor;
		_p->ns1__CCompteurArticle::id = id;
		_p->ns1__CCompteurMoule::Inspected = Inspected__1;
		_p->ns1__CCompteurMoule::Rejects = Rejects__1;
		_p->ns1__CCompteurMoule::Defects = Defects__1;
	}
	return _p;
}

inline int soap_write_ns1__CCompteurArticle(struct soap *soap, ns1__CCompteurArticle const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CCompteurArticle", p->soap_type() == SOAP_TYPE_protocolv2_ns1__CCompteurArticle ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__CCompteurArticle(struct soap *soap, const char *URL, ns1__CCompteurArticle const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CCompteurArticle", p->soap_type() == SOAP_TYPE_protocolv2_ns1__CCompteurArticle ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__CCompteurArticle(struct soap *soap, const char *URL, ns1__CCompteurArticle const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CCompteurArticle", p->soap_type() == SOAP_TYPE_protocolv2_ns1__CCompteurArticle ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__CCompteurArticle(struct soap *soap, const char *URL, ns1__CCompteurArticle const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CCompteurArticle", p->soap_type() == SOAP_TYPE_protocolv2_ns1__CCompteurArticle ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__CCompteurArticle * SOAP_FMAC4 soap_get_ns1__CCompteurArticle(struct soap*, ns1__CCompteurArticle *, const char*, const char*);

inline int soap_read_ns1__CCompteurArticle(struct soap *soap, ns1__CCompteurArticle *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || protocolv2::soap_get_ns1__CCompteurArticle(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__CCompteurArticle(struct soap *soap, const char *URL, ns1__CCompteurArticle *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read_ns1__CCompteurArticle(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__CCompteurArticle(struct soap *soap, ns1__CCompteurArticle *p)
{
	if (protocolv2::soap_read_ns1__CCompteurArticle(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2_ns1__CCounter_DEFINED
#define SOAP_TYPE_protocolv2_ns1__CCounter_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CCounter(struct soap*, const char*, int, const ns1__CCounter *, const char*);
SOAP_FMAC3 ns1__CCounter * SOAP_FMAC4 soap_in_ns1__CCounter(struct soap*, const char*, ns1__CCounter *, const char*);
SOAP_FMAC1 ns1__CCounter * SOAP_FMAC2 soap_instantiate_ns1__CCounter(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CCounter * soap_new_ns1__CCounter(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate_ns1__CCounter(soap, n, NULL, NULL, NULL);
}

inline ns1__CCounter * soap_new_req_ns1__CCounter(
	struct soap *soap,
	int id,
	int nb)
{
	ns1__CCounter *_p = protocolv2::soap_new_ns1__CCounter(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CCounter::id = id;
		_p->ns1__CCounter::nb = nb;
	}
	return _p;
}

inline ns1__CCounter * soap_new_set_ns1__CCounter(
	struct soap *soap,
	int id,
	int nb)
{
	ns1__CCounter *_p = protocolv2::soap_new_ns1__CCounter(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CCounter::id = id;
		_p->ns1__CCounter::nb = nb;
	}
	return _p;
}

inline int soap_write_ns1__CCounter(struct soap *soap, ns1__CCounter const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CCounter", p->soap_type() == SOAP_TYPE_protocolv2_ns1__CCounter ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__CCounter(struct soap *soap, const char *URL, ns1__CCounter const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CCounter", p->soap_type() == SOAP_TYPE_protocolv2_ns1__CCounter ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__CCounter(struct soap *soap, const char *URL, ns1__CCounter const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CCounter", p->soap_type() == SOAP_TYPE_protocolv2_ns1__CCounter ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__CCounter(struct soap *soap, const char *URL, ns1__CCounter const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CCounter", p->soap_type() == SOAP_TYPE_protocolv2_ns1__CCounter ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__CCounter * SOAP_FMAC4 soap_get_ns1__CCounter(struct soap*, ns1__CCounter *, const char*, const char*);

inline int soap_read_ns1__CCounter(struct soap *soap, ns1__CCounter *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || protocolv2::soap_get_ns1__CCounter(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__CCounter(struct soap *soap, const char *URL, ns1__CCounter *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read_ns1__CCounter(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__CCounter(struct soap *soap, ns1__CCounter *p)
{
	if (protocolv2::soap_read_ns1__CCounter(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2_ns1__CCompteurMouleCapteur_DEFINED
#define SOAP_TYPE_protocolv2_ns1__CCompteurMouleCapteur_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CCompteurMouleCapteur(struct soap*, const char*, int, const ns1__CCompteurMouleCapteur *, const char*);
SOAP_FMAC3 ns1__CCompteurMouleCapteur * SOAP_FMAC4 soap_in_ns1__CCompteurMouleCapteur(struct soap*, const char*, ns1__CCompteurMouleCapteur *, const char*);
SOAP_FMAC1 ns1__CCompteurMouleCapteur * SOAP_FMAC2 soap_instantiate_ns1__CCompteurMouleCapteur(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CCompteurMouleCapteur * soap_new_ns1__CCompteurMouleCapteur(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate_ns1__CCompteurMouleCapteur(soap, n, NULL, NULL, NULL);
}

inline ns1__CCompteurMouleCapteur * soap_new_req_ns1__CCompteurMouleCapteur(
	struct soap *soap,
	int __sizeCounter,
	ns1__CCounter **Counter,
	int id,
	int Rejects__1,
	int Defects__1)
{
	ns1__CCompteurMouleCapteur *_p = protocolv2::soap_new_ns1__CCompteurMouleCapteur(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CCompteurMouleCapteur::__sizeCounter = __sizeCounter;
		_p->ns1__CCompteurMouleCapteur::Counter = Counter;
		_p->ns1__CCompteurMouleCapteur::id = id;
		_p->ns1__CCompteurMoule::Rejects = Rejects__1;
		_p->ns1__CCompteurMoule::Defects = Defects__1;
	}
	return _p;
}

inline ns1__CCompteurMouleCapteur * soap_new_set_ns1__CCompteurMouleCapteur(
	struct soap *soap,
	int __sizeCounter,
	ns1__CCounter **Counter,
	int id,
	int *Inspected__1,
	int Rejects__1,
	int Defects__1)
{
	ns1__CCompteurMouleCapteur *_p = protocolv2::soap_new_ns1__CCompteurMouleCapteur(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CCompteurMouleCapteur::__sizeCounter = __sizeCounter;
		_p->ns1__CCompteurMouleCapteur::Counter = Counter;
		_p->ns1__CCompteurMouleCapteur::id = id;
		_p->ns1__CCompteurMoule::Inspected = Inspected__1;
		_p->ns1__CCompteurMoule::Rejects = Rejects__1;
		_p->ns1__CCompteurMoule::Defects = Defects__1;
	}
	return _p;
}

inline int soap_write_ns1__CCompteurMouleCapteur(struct soap *soap, ns1__CCompteurMouleCapteur const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CCompteurMouleCapteur", p->soap_type() == SOAP_TYPE_protocolv2_ns1__CCompteurMouleCapteur ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__CCompteurMouleCapteur(struct soap *soap, const char *URL, ns1__CCompteurMouleCapteur const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CCompteurMouleCapteur", p->soap_type() == SOAP_TYPE_protocolv2_ns1__CCompteurMouleCapteur ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__CCompteurMouleCapteur(struct soap *soap, const char *URL, ns1__CCompteurMouleCapteur const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CCompteurMouleCapteur", p->soap_type() == SOAP_TYPE_protocolv2_ns1__CCompteurMouleCapteur ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__CCompteurMouleCapteur(struct soap *soap, const char *URL, ns1__CCompteurMouleCapteur const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CCompteurMouleCapteur", p->soap_type() == SOAP_TYPE_protocolv2_ns1__CCompteurMouleCapteur ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__CCompteurMouleCapteur * SOAP_FMAC4 soap_get_ns1__CCompteurMouleCapteur(struct soap*, ns1__CCompteurMouleCapteur *, const char*, const char*);

inline int soap_read_ns1__CCompteurMouleCapteur(struct soap *soap, ns1__CCompteurMouleCapteur *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || protocolv2::soap_get_ns1__CCompteurMouleCapteur(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__CCompteurMouleCapteur(struct soap *soap, const char *URL, ns1__CCompteurMouleCapteur *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read_ns1__CCompteurMouleCapteur(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__CCompteurMouleCapteur(struct soap *soap, ns1__CCompteurMouleCapteur *p)
{
	if (protocolv2::soap_read_ns1__CCompteurMouleCapteur(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2_ns1__CCompteurMoule_DEFINED
#define SOAP_TYPE_protocolv2_ns1__CCompteurMoule_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CCompteurMoule(struct soap*, const char*, int, const ns1__CCompteurMoule *, const char*);
SOAP_FMAC3 ns1__CCompteurMoule * SOAP_FMAC4 soap_in_ns1__CCompteurMoule(struct soap*, const char*, ns1__CCompteurMoule *, const char*);
SOAP_FMAC1 ns1__CCompteurMoule * SOAP_FMAC2 soap_instantiate_ns1__CCompteurMoule(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CCompteurMoule * soap_new_ns1__CCompteurMoule(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate_ns1__CCompteurMoule(soap, n, NULL, NULL, NULL);
}

inline ns1__CCompteurMoule * soap_new_req_ns1__CCompteurMoule(
	struct soap *soap,
	int Rejects,
	int Defects)
{
	ns1__CCompteurMoule *_p = protocolv2::soap_new_ns1__CCompteurMoule(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CCompteurMoule::Rejects = Rejects;
		_p->ns1__CCompteurMoule::Defects = Defects;
	}
	return _p;
}

inline ns1__CCompteurMoule * soap_new_set_ns1__CCompteurMoule(
	struct soap *soap,
	int *Inspected,
	int Rejects,
	int Defects)
{
	ns1__CCompteurMoule *_p = protocolv2::soap_new_ns1__CCompteurMoule(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CCompteurMoule::Inspected = Inspected;
		_p->ns1__CCompteurMoule::Rejects = Rejects;
		_p->ns1__CCompteurMoule::Defects = Defects;
	}
	return _p;
}

inline int soap_write_ns1__CCompteurMoule(struct soap *soap, ns1__CCompteurMoule const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CCompteurMoule", p->soap_type() == SOAP_TYPE_protocolv2_ns1__CCompteurMoule ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__CCompteurMoule(struct soap *soap, const char *URL, ns1__CCompteurMoule const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CCompteurMoule", p->soap_type() == SOAP_TYPE_protocolv2_ns1__CCompteurMoule ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__CCompteurMoule(struct soap *soap, const char *URL, ns1__CCompteurMoule const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CCompteurMoule", p->soap_type() == SOAP_TYPE_protocolv2_ns1__CCompteurMoule ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__CCompteurMoule(struct soap *soap, const char *URL, ns1__CCompteurMoule const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CCompteurMoule", p->soap_type() == SOAP_TYPE_protocolv2_ns1__CCompteurMoule ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__CCompteurMoule * SOAP_FMAC4 soap_get_ns1__CCompteurMoule(struct soap*, ns1__CCompteurMoule *, const char*, const char*);

inline int soap_read_ns1__CCompteurMoule(struct soap *soap, ns1__CCompteurMoule *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || protocolv2::soap_get_ns1__CCompteurMoule(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__CCompteurMoule(struct soap *soap, const char *URL, ns1__CCompteurMoule *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read_ns1__CCompteurMoule(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__CCompteurMoule(struct soap *soap, ns1__CCompteurMoule *p)
{
	if (protocolv2::soap_read_ns1__CCompteurMoule(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2_ns1__CCompteurMachine_DEFINED
#define SOAP_TYPE_protocolv2_ns1__CCompteurMachine_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CCompteurMachine(struct soap*, const char*, int, const ns1__CCompteurMachine *, const char*);
SOAP_FMAC3 ns1__CCompteurMachine * SOAP_FMAC4 soap_in_ns1__CCompteurMachine(struct soap*, const char*, ns1__CCompteurMachine *, const char*);
SOAP_FMAC1 ns1__CCompteurMachine * SOAP_FMAC2 soap_instantiate_ns1__CCompteurMachine(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CCompteurMachine * soap_new_ns1__CCompteurMachine(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate_ns1__CCompteurMachine(soap, n, NULL, NULL, NULL);
}

inline ns1__CCompteurMachine * soap_new_req_ns1__CCompteurMachine(
	struct soap *soap,
	int Identified,
	int Unidentified,
	int Rejects__1,
	int Defects__1)
{
	ns1__CCompteurMachine *_p = protocolv2::soap_new_ns1__CCompteurMachine(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CCompteurMachine::Identified = Identified;
		_p->ns1__CCompteurMachine::Unidentified = Unidentified;
		_p->ns1__CCompteurMoule::Rejects = Rejects__1;
		_p->ns1__CCompteurMoule::Defects = Defects__1;
	}
	return _p;
}

inline ns1__CCompteurMachine * soap_new_set_ns1__CCompteurMachine(
	struct soap *soap,
	int Identified,
	int Unidentified,
	ns1__ArrayOfCCompteurArticle *Articles,
	char *Id,
	int *Inspected__1,
	int Rejects__1,
	int Defects__1)
{
	ns1__CCompteurMachine *_p = protocolv2::soap_new_ns1__CCompteurMachine(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CCompteurMachine::Identified = Identified;
		_p->ns1__CCompteurMachine::Unidentified = Unidentified;
		_p->ns1__CCompteurMachine::Articles = Articles;
		_p->ns1__CCompteurMachine::Id = Id;
		_p->ns1__CCompteurMoule::Inspected = Inspected__1;
		_p->ns1__CCompteurMoule::Rejects = Rejects__1;
		_p->ns1__CCompteurMoule::Defects = Defects__1;
	}
	return _p;
}

inline int soap_write_ns1__CCompteurMachine(struct soap *soap, ns1__CCompteurMachine const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CCompteurMachine", p->soap_type() == SOAP_TYPE_protocolv2_ns1__CCompteurMachine ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__CCompteurMachine(struct soap *soap, const char *URL, ns1__CCompteurMachine const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CCompteurMachine", p->soap_type() == SOAP_TYPE_protocolv2_ns1__CCompteurMachine ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__CCompteurMachine(struct soap *soap, const char *URL, ns1__CCompteurMachine const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CCompteurMachine", p->soap_type() == SOAP_TYPE_protocolv2_ns1__CCompteurMachine ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__CCompteurMachine(struct soap *soap, const char *URL, ns1__CCompteurMachine const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CCompteurMachine", p->soap_type() == SOAP_TYPE_protocolv2_ns1__CCompteurMachine ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__CCompteurMachine * SOAP_FMAC4 soap_get_ns1__CCompteurMachine(struct soap*, ns1__CCompteurMachine *, const char*, const char*);

inline int soap_read_ns1__CCompteurMachine(struct soap *soap, ns1__CCompteurMachine *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || protocolv2::soap_get_ns1__CCompteurMachine(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__CCompteurMachine(struct soap *soap, const char *URL, ns1__CCompteurMachine *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read_ns1__CCompteurMachine(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__CCompteurMachine(struct soap *soap, ns1__CCompteurMachine *p)
{
	if (protocolv2::soap_read_ns1__CCompteurMachine(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2_ns1__CountsByArticleResult_DEFINED
#define SOAP_TYPE_protocolv2_ns1__CountsByArticleResult_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CountsByArticleResult(struct soap*, const char*, int, const ns1__CountsByArticleResult *, const char*);
SOAP_FMAC3 ns1__CountsByArticleResult * SOAP_FMAC4 soap_in_ns1__CountsByArticleResult(struct soap*, const char*, ns1__CountsByArticleResult *, const char*);
SOAP_FMAC1 ns1__CountsByArticleResult * SOAP_FMAC2 soap_instantiate_ns1__CountsByArticleResult(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CountsByArticleResult * soap_new_ns1__CountsByArticleResult(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate_ns1__CountsByArticleResult(soap, n, NULL, NULL, NULL);
}

inline ns1__CountsByArticleResult * soap_new_req_ns1__CountsByArticleResult(
	struct soap *soap)
{
	ns1__CountsByArticleResult *_p = protocolv2::soap_new_ns1__CountsByArticleResult(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__CountsByArticleResult * soap_new_set_ns1__CountsByArticleResult(
	struct soap *soap,
	ns1__CCompteurMachine *Machine)
{
	ns1__CountsByArticleResult *_p = protocolv2::soap_new_ns1__CountsByArticleResult(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CountsByArticleResult::Machine = Machine;
	}
	return _p;
}

inline int soap_write_ns1__CountsByArticleResult(struct soap *soap, ns1__CountsByArticleResult const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CountsByArticleResult", p->soap_type() == SOAP_TYPE_protocolv2_ns1__CountsByArticleResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__CountsByArticleResult(struct soap *soap, const char *URL, ns1__CountsByArticleResult const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CountsByArticleResult", p->soap_type() == SOAP_TYPE_protocolv2_ns1__CountsByArticleResult ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__CountsByArticleResult(struct soap *soap, const char *URL, ns1__CountsByArticleResult const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CountsByArticleResult", p->soap_type() == SOAP_TYPE_protocolv2_ns1__CountsByArticleResult ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__CountsByArticleResult(struct soap *soap, const char *URL, ns1__CountsByArticleResult const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CountsByArticleResult", p->soap_type() == SOAP_TYPE_protocolv2_ns1__CountsByArticleResult ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__CountsByArticleResult * SOAP_FMAC4 soap_get_ns1__CountsByArticleResult(struct soap*, ns1__CountsByArticleResult *, const char*, const char*);

inline int soap_read_ns1__CountsByArticleResult(struct soap *soap, ns1__CountsByArticleResult *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || protocolv2::soap_get_ns1__CountsByArticleResult(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__CountsByArticleResult(struct soap *soap, const char *URL, ns1__CountsByArticleResult *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read_ns1__CountsByArticleResult(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__CountsByArticleResult(struct soap *soap, ns1__CountsByArticleResult *p)
{
	if (protocolv2::soap_read_ns1__CountsByArticleResult(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_protocolv2_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_protocolv2_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = protocolv2::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	protocolv2::soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = protocolv2::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	protocolv2::soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (protocolv2::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || protocolv2::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || protocolv2::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || protocolv2::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || protocolv2::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	protocolv2::soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || protocolv2::soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (protocolv2::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_protocolv2_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_protocolv2_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = protocolv2::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	protocolv2::soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = protocolv2::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	protocolv2::soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (protocolv2::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || protocolv2::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || protocolv2::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || protocolv2::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || protocolv2::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	protocolv2::soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || protocolv2::soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (protocolv2::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_protocolv2_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_protocolv2_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = protocolv2::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	protocolv2::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = protocolv2::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	protocolv2::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (protocolv2::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || protocolv2::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || protocolv2::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || protocolv2::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || protocolv2::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	protocolv2::soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || protocolv2::soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (protocolv2::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_protocolv2_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_protocolv2_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = protocolv2::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	protocolv2::soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = protocolv2::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	protocolv2::soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (protocolv2::soap_serialize_SOAP_ENV__Code(soap, p), 0) || protocolv2::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize_SOAP_ENV__Code(soap, p), 0) || protocolv2::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize_SOAP_ENV__Code(soap, p), 0) || protocolv2::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize_SOAP_ENV__Code(soap, p), 0) || protocolv2::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	protocolv2::soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || protocolv2::soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (protocolv2::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_protocolv2_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_protocolv2_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = protocolv2::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	protocolv2::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = protocolv2::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	protocolv2::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (protocolv2::soap_serialize_SOAP_ENV__Header(soap, p), 0) || protocolv2::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize_SOAP_ENV__Header(soap, p), 0) || protocolv2::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize_SOAP_ENV__Header(soap, p), 0) || protocolv2::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize_SOAP_ENV__Header(soap, p), 0) || protocolv2::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	protocolv2::soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || protocolv2::soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (protocolv2::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef SOAP_TYPE_protocolv2___ns1__GetLastRequestDate__DEFINED
#define SOAP_TYPE_protocolv2___ns1__GetLastRequestDate__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetLastRequestDate_(struct soap*, struct __ns1__GetLastRequestDate_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetLastRequestDate_(struct soap*, const struct __ns1__GetLastRequestDate_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetLastRequestDate_(struct soap*, const char*, int, const struct __ns1__GetLastRequestDate_ *, const char*);
SOAP_FMAC3 struct __ns1__GetLastRequestDate_ * SOAP_FMAC4 soap_in___ns1__GetLastRequestDate_(struct soap*, const char*, struct __ns1__GetLastRequestDate_ *, const char*);
SOAP_FMAC1 struct __ns1__GetLastRequestDate_ * SOAP_FMAC2 soap_instantiate___ns1__GetLastRequestDate_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetLastRequestDate_ * soap_new___ns1__GetLastRequestDate_(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate___ns1__GetLastRequestDate_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetLastRequestDate_ * soap_new_req___ns1__GetLastRequestDate_(
	struct soap *soap)
{
	struct __ns1__GetLastRequestDate_ *_p = protocolv2::soap_new___ns1__GetLastRequestDate_(soap);
	if (_p)
	{	protocolv2::soap_default___ns1__GetLastRequestDate_(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetLastRequestDate_ * soap_new_set___ns1__GetLastRequestDate_(
	struct soap *soap,
	_ns1__GetLastRequestDate *ns1__GetLastRequestDate)
{
	struct __ns1__GetLastRequestDate_ *_p = protocolv2::soap_new___ns1__GetLastRequestDate_(soap);
	if (_p)
	{	protocolv2::soap_default___ns1__GetLastRequestDate_(soap, _p);
		_p->ns1__GetLastRequestDate = ns1__GetLastRequestDate;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetLastRequestDate_(struct soap*, const struct __ns1__GetLastRequestDate_ *, const char*, const char*);

inline int soap_write___ns1__GetLastRequestDate_(struct soap *soap, struct __ns1__GetLastRequestDate_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (protocolv2::soap_serialize___ns1__GetLastRequestDate_(soap, p), 0) || protocolv2::soap_put___ns1__GetLastRequestDate_(soap, p, "-ns1:GetLastRequestDate", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetLastRequestDate_(struct soap *soap, const char *URL, struct __ns1__GetLastRequestDate_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__GetLastRequestDate_(soap, p), 0) || protocolv2::soap_put___ns1__GetLastRequestDate_(soap, p, "-ns1:GetLastRequestDate", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__GetLastRequestDate_(struct soap *soap, const char *URL, struct __ns1__GetLastRequestDate_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__GetLastRequestDate_(soap, p), 0) || protocolv2::soap_put___ns1__GetLastRequestDate_(soap, p, "-ns1:GetLastRequestDate", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetLastRequestDate_(struct soap *soap, const char *URL, struct __ns1__GetLastRequestDate_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__GetLastRequestDate_(soap, p), 0) || protocolv2::soap_put___ns1__GetLastRequestDate_(soap, p, "-ns1:GetLastRequestDate", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetLastRequestDate_ * SOAP_FMAC4 soap_get___ns1__GetLastRequestDate_(struct soap*, struct __ns1__GetLastRequestDate_ *, const char*, const char*);

inline int soap_read___ns1__GetLastRequestDate_(struct soap *soap, struct __ns1__GetLastRequestDate_ *p)
{
	if (p)
	{	protocolv2::soap_default___ns1__GetLastRequestDate_(soap, p);
		if (soap_begin_recv(soap) || protocolv2::soap_get___ns1__GetLastRequestDate_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetLastRequestDate_(struct soap *soap, const char *URL, struct __ns1__GetLastRequestDate_ *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read___ns1__GetLastRequestDate_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__GetLastRequestDate_(struct soap *soap, struct __ns1__GetLastRequestDate_ *p)
{
	if (protocolv2::soap_read___ns1__GetLastRequestDate_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2___ns1__AddSamples__DEFINED
#define SOAP_TYPE_protocolv2___ns1__AddSamples__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AddSamples_(struct soap*, struct __ns1__AddSamples_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AddSamples_(struct soap*, const struct __ns1__AddSamples_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AddSamples_(struct soap*, const char*, int, const struct __ns1__AddSamples_ *, const char*);
SOAP_FMAC3 struct __ns1__AddSamples_ * SOAP_FMAC4 soap_in___ns1__AddSamples_(struct soap*, const char*, struct __ns1__AddSamples_ *, const char*);
SOAP_FMAC1 struct __ns1__AddSamples_ * SOAP_FMAC2 soap_instantiate___ns1__AddSamples_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__AddSamples_ * soap_new___ns1__AddSamples_(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate___ns1__AddSamples_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__AddSamples_ * soap_new_req___ns1__AddSamples_(
	struct soap *soap)
{
	struct __ns1__AddSamples_ *_p = protocolv2::soap_new___ns1__AddSamples_(soap);
	if (_p)
	{	protocolv2::soap_default___ns1__AddSamples_(soap, _p);
	}
	return _p;
}

inline struct __ns1__AddSamples_ * soap_new_set___ns1__AddSamples_(
	struct soap *soap,
	_ns1__AddSamples *ns1__AddSamples)
{
	struct __ns1__AddSamples_ *_p = protocolv2::soap_new___ns1__AddSamples_(soap);
	if (_p)
	{	protocolv2::soap_default___ns1__AddSamples_(soap, _p);
		_p->ns1__AddSamples = ns1__AddSamples;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AddSamples_(struct soap*, const struct __ns1__AddSamples_ *, const char*, const char*);

inline int soap_write___ns1__AddSamples_(struct soap *soap, struct __ns1__AddSamples_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (protocolv2::soap_serialize___ns1__AddSamples_(soap, p), 0) || protocolv2::soap_put___ns1__AddSamples_(soap, p, "-ns1:AddSamples", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__AddSamples_(struct soap *soap, const char *URL, struct __ns1__AddSamples_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__AddSamples_(soap, p), 0) || protocolv2::soap_put___ns1__AddSamples_(soap, p, "-ns1:AddSamples", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__AddSamples_(struct soap *soap, const char *URL, struct __ns1__AddSamples_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__AddSamples_(soap, p), 0) || protocolv2::soap_put___ns1__AddSamples_(soap, p, "-ns1:AddSamples", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__AddSamples_(struct soap *soap, const char *URL, struct __ns1__AddSamples_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__AddSamples_(soap, p), 0) || protocolv2::soap_put___ns1__AddSamples_(soap, p, "-ns1:AddSamples", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__AddSamples_ * SOAP_FMAC4 soap_get___ns1__AddSamples_(struct soap*, struct __ns1__AddSamples_ *, const char*, const char*);

inline int soap_read___ns1__AddSamples_(struct soap *soap, struct __ns1__AddSamples_ *p)
{
	if (p)
	{	protocolv2::soap_default___ns1__AddSamples_(soap, p);
		if (soap_begin_recv(soap) || protocolv2::soap_get___ns1__AddSamples_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__AddSamples_(struct soap *soap, const char *URL, struct __ns1__AddSamples_ *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read___ns1__AddSamples_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__AddSamples_(struct soap *soap, struct __ns1__AddSamples_ *p)
{
	if (protocolv2::soap_read___ns1__AddSamples_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2___ns1__AddEjectedMolds__DEFINED
#define SOAP_TYPE_protocolv2___ns1__AddEjectedMolds__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AddEjectedMolds_(struct soap*, struct __ns1__AddEjectedMolds_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AddEjectedMolds_(struct soap*, const struct __ns1__AddEjectedMolds_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AddEjectedMolds_(struct soap*, const char*, int, const struct __ns1__AddEjectedMolds_ *, const char*);
SOAP_FMAC3 struct __ns1__AddEjectedMolds_ * SOAP_FMAC4 soap_in___ns1__AddEjectedMolds_(struct soap*, const char*, struct __ns1__AddEjectedMolds_ *, const char*);
SOAP_FMAC1 struct __ns1__AddEjectedMolds_ * SOAP_FMAC2 soap_instantiate___ns1__AddEjectedMolds_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__AddEjectedMolds_ * soap_new___ns1__AddEjectedMolds_(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate___ns1__AddEjectedMolds_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__AddEjectedMolds_ * soap_new_req___ns1__AddEjectedMolds_(
	struct soap *soap)
{
	struct __ns1__AddEjectedMolds_ *_p = protocolv2::soap_new___ns1__AddEjectedMolds_(soap);
	if (_p)
	{	protocolv2::soap_default___ns1__AddEjectedMolds_(soap, _p);
	}
	return _p;
}

inline struct __ns1__AddEjectedMolds_ * soap_new_set___ns1__AddEjectedMolds_(
	struct soap *soap,
	_ns1__AddEjectedMolds *ns1__AddEjectedMolds)
{
	struct __ns1__AddEjectedMolds_ *_p = protocolv2::soap_new___ns1__AddEjectedMolds_(soap);
	if (_p)
	{	protocolv2::soap_default___ns1__AddEjectedMolds_(soap, _p);
		_p->ns1__AddEjectedMolds = ns1__AddEjectedMolds;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AddEjectedMolds_(struct soap*, const struct __ns1__AddEjectedMolds_ *, const char*, const char*);

inline int soap_write___ns1__AddEjectedMolds_(struct soap *soap, struct __ns1__AddEjectedMolds_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (protocolv2::soap_serialize___ns1__AddEjectedMolds_(soap, p), 0) || protocolv2::soap_put___ns1__AddEjectedMolds_(soap, p, "-ns1:AddEjectedMolds", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__AddEjectedMolds_(struct soap *soap, const char *URL, struct __ns1__AddEjectedMolds_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__AddEjectedMolds_(soap, p), 0) || protocolv2::soap_put___ns1__AddEjectedMolds_(soap, p, "-ns1:AddEjectedMolds", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__AddEjectedMolds_(struct soap *soap, const char *URL, struct __ns1__AddEjectedMolds_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__AddEjectedMolds_(soap, p), 0) || protocolv2::soap_put___ns1__AddEjectedMolds_(soap, p, "-ns1:AddEjectedMolds", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__AddEjectedMolds_(struct soap *soap, const char *URL, struct __ns1__AddEjectedMolds_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__AddEjectedMolds_(soap, p), 0) || protocolv2::soap_put___ns1__AddEjectedMolds_(soap, p, "-ns1:AddEjectedMolds", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__AddEjectedMolds_ * SOAP_FMAC4 soap_get___ns1__AddEjectedMolds_(struct soap*, struct __ns1__AddEjectedMolds_ *, const char*, const char*);

inline int soap_read___ns1__AddEjectedMolds_(struct soap *soap, struct __ns1__AddEjectedMolds_ *p)
{
	if (p)
	{	protocolv2::soap_default___ns1__AddEjectedMolds_(soap, p);
		if (soap_begin_recv(soap) || protocolv2::soap_get___ns1__AddEjectedMolds_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__AddEjectedMolds_(struct soap *soap, const char *URL, struct __ns1__AddEjectedMolds_ *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read___ns1__AddEjectedMolds_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__AddEjectedMolds_(struct soap *soap, struct __ns1__AddEjectedMolds_ *p)
{
	if (protocolv2::soap_read___ns1__AddEjectedMolds_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2___ns1__AddMountedMolds__DEFINED
#define SOAP_TYPE_protocolv2___ns1__AddMountedMolds__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AddMountedMolds_(struct soap*, struct __ns1__AddMountedMolds_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AddMountedMolds_(struct soap*, const struct __ns1__AddMountedMolds_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AddMountedMolds_(struct soap*, const char*, int, const struct __ns1__AddMountedMolds_ *, const char*);
SOAP_FMAC3 struct __ns1__AddMountedMolds_ * SOAP_FMAC4 soap_in___ns1__AddMountedMolds_(struct soap*, const char*, struct __ns1__AddMountedMolds_ *, const char*);
SOAP_FMAC1 struct __ns1__AddMountedMolds_ * SOAP_FMAC2 soap_instantiate___ns1__AddMountedMolds_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__AddMountedMolds_ * soap_new___ns1__AddMountedMolds_(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate___ns1__AddMountedMolds_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__AddMountedMolds_ * soap_new_req___ns1__AddMountedMolds_(
	struct soap *soap)
{
	struct __ns1__AddMountedMolds_ *_p = protocolv2::soap_new___ns1__AddMountedMolds_(soap);
	if (_p)
	{	protocolv2::soap_default___ns1__AddMountedMolds_(soap, _p);
	}
	return _p;
}

inline struct __ns1__AddMountedMolds_ * soap_new_set___ns1__AddMountedMolds_(
	struct soap *soap,
	_ns1__AddMountedMolds *ns1__AddMountedMolds)
{
	struct __ns1__AddMountedMolds_ *_p = protocolv2::soap_new___ns1__AddMountedMolds_(soap);
	if (_p)
	{	protocolv2::soap_default___ns1__AddMountedMolds_(soap, _p);
		_p->ns1__AddMountedMolds = ns1__AddMountedMolds;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AddMountedMolds_(struct soap*, const struct __ns1__AddMountedMolds_ *, const char*, const char*);

inline int soap_write___ns1__AddMountedMolds_(struct soap *soap, struct __ns1__AddMountedMolds_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (protocolv2::soap_serialize___ns1__AddMountedMolds_(soap, p), 0) || protocolv2::soap_put___ns1__AddMountedMolds_(soap, p, "-ns1:AddMountedMolds", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__AddMountedMolds_(struct soap *soap, const char *URL, struct __ns1__AddMountedMolds_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__AddMountedMolds_(soap, p), 0) || protocolv2::soap_put___ns1__AddMountedMolds_(soap, p, "-ns1:AddMountedMolds", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__AddMountedMolds_(struct soap *soap, const char *URL, struct __ns1__AddMountedMolds_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__AddMountedMolds_(soap, p), 0) || protocolv2::soap_put___ns1__AddMountedMolds_(soap, p, "-ns1:AddMountedMolds", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__AddMountedMolds_(struct soap *soap, const char *URL, struct __ns1__AddMountedMolds_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__AddMountedMolds_(soap, p), 0) || protocolv2::soap_put___ns1__AddMountedMolds_(soap, p, "-ns1:AddMountedMolds", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__AddMountedMolds_ * SOAP_FMAC4 soap_get___ns1__AddMountedMolds_(struct soap*, struct __ns1__AddMountedMolds_ *, const char*, const char*);

inline int soap_read___ns1__AddMountedMolds_(struct soap *soap, struct __ns1__AddMountedMolds_ *p)
{
	if (p)
	{	protocolv2::soap_default___ns1__AddMountedMolds_(soap, p);
		if (soap_begin_recv(soap) || protocolv2::soap_get___ns1__AddMountedMolds_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__AddMountedMolds_(struct soap *soap, const char *URL, struct __ns1__AddMountedMolds_ *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read___ns1__AddMountedMolds_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__AddMountedMolds_(struct soap *soap, struct __ns1__AddMountedMolds_ *p)
{
	if (protocolv2::soap_read___ns1__AddMountedMolds_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2___ns1__Samples__DEFINED
#define SOAP_TYPE_protocolv2___ns1__Samples__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Samples_(struct soap*, struct __ns1__Samples_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Samples_(struct soap*, const struct __ns1__Samples_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Samples_(struct soap*, const char*, int, const struct __ns1__Samples_ *, const char*);
SOAP_FMAC3 struct __ns1__Samples_ * SOAP_FMAC4 soap_in___ns1__Samples_(struct soap*, const char*, struct __ns1__Samples_ *, const char*);
SOAP_FMAC1 struct __ns1__Samples_ * SOAP_FMAC2 soap_instantiate___ns1__Samples_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Samples_ * soap_new___ns1__Samples_(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate___ns1__Samples_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__Samples_ * soap_new_req___ns1__Samples_(
	struct soap *soap)
{
	struct __ns1__Samples_ *_p = protocolv2::soap_new___ns1__Samples_(soap);
	if (_p)
	{	protocolv2::soap_default___ns1__Samples_(soap, _p);
	}
	return _p;
}

inline struct __ns1__Samples_ * soap_new_set___ns1__Samples_(
	struct soap *soap,
	_ns1__Samples *ns1__Samples)
{
	struct __ns1__Samples_ *_p = protocolv2::soap_new___ns1__Samples_(soap);
	if (_p)
	{	protocolv2::soap_default___ns1__Samples_(soap, _p);
		_p->ns1__Samples = ns1__Samples;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Samples_(struct soap*, const struct __ns1__Samples_ *, const char*, const char*);

inline int soap_write___ns1__Samples_(struct soap *soap, struct __ns1__Samples_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (protocolv2::soap_serialize___ns1__Samples_(soap, p), 0) || protocolv2::soap_put___ns1__Samples_(soap, p, "-ns1:Samples", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__Samples_(struct soap *soap, const char *URL, struct __ns1__Samples_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__Samples_(soap, p), 0) || protocolv2::soap_put___ns1__Samples_(soap, p, "-ns1:Samples", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__Samples_(struct soap *soap, const char *URL, struct __ns1__Samples_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__Samples_(soap, p), 0) || protocolv2::soap_put___ns1__Samples_(soap, p, "-ns1:Samples", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__Samples_(struct soap *soap, const char *URL, struct __ns1__Samples_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__Samples_(soap, p), 0) || protocolv2::soap_put___ns1__Samples_(soap, p, "-ns1:Samples", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__Samples_ * SOAP_FMAC4 soap_get___ns1__Samples_(struct soap*, struct __ns1__Samples_ *, const char*, const char*);

inline int soap_read___ns1__Samples_(struct soap *soap, struct __ns1__Samples_ *p)
{
	if (p)
	{	protocolv2::soap_default___ns1__Samples_(soap, p);
		if (soap_begin_recv(soap) || protocolv2::soap_get___ns1__Samples_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__Samples_(struct soap *soap, const char *URL, struct __ns1__Samples_ *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read___ns1__Samples_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__Samples_(struct soap *soap, struct __ns1__Samples_ *p)
{
	if (protocolv2::soap_read___ns1__Samples_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2___ns1__Alarms__DEFINED
#define SOAP_TYPE_protocolv2___ns1__Alarms__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Alarms_(struct soap*, struct __ns1__Alarms_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Alarms_(struct soap*, const struct __ns1__Alarms_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Alarms_(struct soap*, const char*, int, const struct __ns1__Alarms_ *, const char*);
SOAP_FMAC3 struct __ns1__Alarms_ * SOAP_FMAC4 soap_in___ns1__Alarms_(struct soap*, const char*, struct __ns1__Alarms_ *, const char*);
SOAP_FMAC1 struct __ns1__Alarms_ * SOAP_FMAC2 soap_instantiate___ns1__Alarms_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Alarms_ * soap_new___ns1__Alarms_(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate___ns1__Alarms_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__Alarms_ * soap_new_req___ns1__Alarms_(
	struct soap *soap)
{
	struct __ns1__Alarms_ *_p = protocolv2::soap_new___ns1__Alarms_(soap);
	if (_p)
	{	protocolv2::soap_default___ns1__Alarms_(soap, _p);
	}
	return _p;
}

inline struct __ns1__Alarms_ * soap_new_set___ns1__Alarms_(
	struct soap *soap,
	_ns1__Alarms *ns1__Alarms)
{
	struct __ns1__Alarms_ *_p = protocolv2::soap_new___ns1__Alarms_(soap);
	if (_p)
	{	protocolv2::soap_default___ns1__Alarms_(soap, _p);
		_p->ns1__Alarms = ns1__Alarms;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Alarms_(struct soap*, const struct __ns1__Alarms_ *, const char*, const char*);

inline int soap_write___ns1__Alarms_(struct soap *soap, struct __ns1__Alarms_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (protocolv2::soap_serialize___ns1__Alarms_(soap, p), 0) || protocolv2::soap_put___ns1__Alarms_(soap, p, "-ns1:Alarms", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__Alarms_(struct soap *soap, const char *URL, struct __ns1__Alarms_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__Alarms_(soap, p), 0) || protocolv2::soap_put___ns1__Alarms_(soap, p, "-ns1:Alarms", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__Alarms_(struct soap *soap, const char *URL, struct __ns1__Alarms_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__Alarms_(soap, p), 0) || protocolv2::soap_put___ns1__Alarms_(soap, p, "-ns1:Alarms", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__Alarms_(struct soap *soap, const char *URL, struct __ns1__Alarms_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__Alarms_(soap, p), 0) || protocolv2::soap_put___ns1__Alarms_(soap, p, "-ns1:Alarms", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__Alarms_ * SOAP_FMAC4 soap_get___ns1__Alarms_(struct soap*, struct __ns1__Alarms_ *, const char*, const char*);

inline int soap_read___ns1__Alarms_(struct soap *soap, struct __ns1__Alarms_ *p)
{
	if (p)
	{	protocolv2::soap_default___ns1__Alarms_(soap, p);
		if (soap_begin_recv(soap) || protocolv2::soap_get___ns1__Alarms_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__Alarms_(struct soap *soap, const char *URL, struct __ns1__Alarms_ *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read___ns1__Alarms_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__Alarms_(struct soap *soap, struct __ns1__Alarms_ *p)
{
	if (protocolv2::soap_read___ns1__Alarms_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2___ns1__Measures__DEFINED
#define SOAP_TYPE_protocolv2___ns1__Measures__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Measures_(struct soap*, struct __ns1__Measures_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Measures_(struct soap*, const struct __ns1__Measures_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Measures_(struct soap*, const char*, int, const struct __ns1__Measures_ *, const char*);
SOAP_FMAC3 struct __ns1__Measures_ * SOAP_FMAC4 soap_in___ns1__Measures_(struct soap*, const char*, struct __ns1__Measures_ *, const char*);
SOAP_FMAC1 struct __ns1__Measures_ * SOAP_FMAC2 soap_instantiate___ns1__Measures_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Measures_ * soap_new___ns1__Measures_(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate___ns1__Measures_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__Measures_ * soap_new_req___ns1__Measures_(
	struct soap *soap)
{
	struct __ns1__Measures_ *_p = protocolv2::soap_new___ns1__Measures_(soap);
	if (_p)
	{	protocolv2::soap_default___ns1__Measures_(soap, _p);
	}
	return _p;
}

inline struct __ns1__Measures_ * soap_new_set___ns1__Measures_(
	struct soap *soap,
	_ns1__Measures *ns1__Measures)
{
	struct __ns1__Measures_ *_p = protocolv2::soap_new___ns1__Measures_(soap);
	if (_p)
	{	protocolv2::soap_default___ns1__Measures_(soap, _p);
		_p->ns1__Measures = ns1__Measures;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Measures_(struct soap*, const struct __ns1__Measures_ *, const char*, const char*);

inline int soap_write___ns1__Measures_(struct soap *soap, struct __ns1__Measures_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (protocolv2::soap_serialize___ns1__Measures_(soap, p), 0) || protocolv2::soap_put___ns1__Measures_(soap, p, "-ns1:Measures", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__Measures_(struct soap *soap, const char *URL, struct __ns1__Measures_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__Measures_(soap, p), 0) || protocolv2::soap_put___ns1__Measures_(soap, p, "-ns1:Measures", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__Measures_(struct soap *soap, const char *URL, struct __ns1__Measures_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__Measures_(soap, p), 0) || protocolv2::soap_put___ns1__Measures_(soap, p, "-ns1:Measures", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__Measures_(struct soap *soap, const char *URL, struct __ns1__Measures_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__Measures_(soap, p), 0) || protocolv2::soap_put___ns1__Measures_(soap, p, "-ns1:Measures", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__Measures_ * SOAP_FMAC4 soap_get___ns1__Measures_(struct soap*, struct __ns1__Measures_ *, const char*, const char*);

inline int soap_read___ns1__Measures_(struct soap *soap, struct __ns1__Measures_ *p)
{
	if (p)
	{	protocolv2::soap_default___ns1__Measures_(soap, p);
		if (soap_begin_recv(soap) || protocolv2::soap_get___ns1__Measures_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__Measures_(struct soap *soap, const char *URL, struct __ns1__Measures_ *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read___ns1__Measures_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__Measures_(struct soap *soap, struct __ns1__Measures_ *p)
{
	if (protocolv2::soap_read___ns1__Measures_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2___ns1__ReadenMolds__DEFINED
#define SOAP_TYPE_protocolv2___ns1__ReadenMolds__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ReadenMolds_(struct soap*, struct __ns1__ReadenMolds_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ReadenMolds_(struct soap*, const struct __ns1__ReadenMolds_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ReadenMolds_(struct soap*, const char*, int, const struct __ns1__ReadenMolds_ *, const char*);
SOAP_FMAC3 struct __ns1__ReadenMolds_ * SOAP_FMAC4 soap_in___ns1__ReadenMolds_(struct soap*, const char*, struct __ns1__ReadenMolds_ *, const char*);
SOAP_FMAC1 struct __ns1__ReadenMolds_ * SOAP_FMAC2 soap_instantiate___ns1__ReadenMolds_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ReadenMolds_ * soap_new___ns1__ReadenMolds_(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate___ns1__ReadenMolds_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__ReadenMolds_ * soap_new_req___ns1__ReadenMolds_(
	struct soap *soap)
{
	struct __ns1__ReadenMolds_ *_p = protocolv2::soap_new___ns1__ReadenMolds_(soap);
	if (_p)
	{	protocolv2::soap_default___ns1__ReadenMolds_(soap, _p);
	}
	return _p;
}

inline struct __ns1__ReadenMolds_ * soap_new_set___ns1__ReadenMolds_(
	struct soap *soap,
	_ns1__ReadenMolds *ns1__ReadenMolds)
{
	struct __ns1__ReadenMolds_ *_p = protocolv2::soap_new___ns1__ReadenMolds_(soap);
	if (_p)
	{	protocolv2::soap_default___ns1__ReadenMolds_(soap, _p);
		_p->ns1__ReadenMolds = ns1__ReadenMolds;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ReadenMolds_(struct soap*, const struct __ns1__ReadenMolds_ *, const char*, const char*);

inline int soap_write___ns1__ReadenMolds_(struct soap *soap, struct __ns1__ReadenMolds_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (protocolv2::soap_serialize___ns1__ReadenMolds_(soap, p), 0) || protocolv2::soap_put___ns1__ReadenMolds_(soap, p, "-ns1:ReadenMolds", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__ReadenMolds_(struct soap *soap, const char *URL, struct __ns1__ReadenMolds_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__ReadenMolds_(soap, p), 0) || protocolv2::soap_put___ns1__ReadenMolds_(soap, p, "-ns1:ReadenMolds", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__ReadenMolds_(struct soap *soap, const char *URL, struct __ns1__ReadenMolds_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__ReadenMolds_(soap, p), 0) || protocolv2::soap_put___ns1__ReadenMolds_(soap, p, "-ns1:ReadenMolds", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__ReadenMolds_(struct soap *soap, const char *URL, struct __ns1__ReadenMolds_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__ReadenMolds_(soap, p), 0) || protocolv2::soap_put___ns1__ReadenMolds_(soap, p, "-ns1:ReadenMolds", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__ReadenMolds_ * SOAP_FMAC4 soap_get___ns1__ReadenMolds_(struct soap*, struct __ns1__ReadenMolds_ *, const char*, const char*);

inline int soap_read___ns1__ReadenMolds_(struct soap *soap, struct __ns1__ReadenMolds_ *p)
{
	if (p)
	{	protocolv2::soap_default___ns1__ReadenMolds_(soap, p);
		if (soap_begin_recv(soap) || protocolv2::soap_get___ns1__ReadenMolds_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__ReadenMolds_(struct soap *soap, const char *URL, struct __ns1__ReadenMolds_ *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read___ns1__ReadenMolds_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__ReadenMolds_(struct soap *soap, struct __ns1__ReadenMolds_ *p)
{
	if (protocolv2::soap_read___ns1__ReadenMolds_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2___ns1__EjectedMolds__DEFINED
#define SOAP_TYPE_protocolv2___ns1__EjectedMolds__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__EjectedMolds_(struct soap*, struct __ns1__EjectedMolds_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__EjectedMolds_(struct soap*, const struct __ns1__EjectedMolds_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__EjectedMolds_(struct soap*, const char*, int, const struct __ns1__EjectedMolds_ *, const char*);
SOAP_FMAC3 struct __ns1__EjectedMolds_ * SOAP_FMAC4 soap_in___ns1__EjectedMolds_(struct soap*, const char*, struct __ns1__EjectedMolds_ *, const char*);
SOAP_FMAC1 struct __ns1__EjectedMolds_ * SOAP_FMAC2 soap_instantiate___ns1__EjectedMolds_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__EjectedMolds_ * soap_new___ns1__EjectedMolds_(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate___ns1__EjectedMolds_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__EjectedMolds_ * soap_new_req___ns1__EjectedMolds_(
	struct soap *soap)
{
	struct __ns1__EjectedMolds_ *_p = protocolv2::soap_new___ns1__EjectedMolds_(soap);
	if (_p)
	{	protocolv2::soap_default___ns1__EjectedMolds_(soap, _p);
	}
	return _p;
}

inline struct __ns1__EjectedMolds_ * soap_new_set___ns1__EjectedMolds_(
	struct soap *soap,
	_ns1__EjectedMolds *ns1__EjectedMolds)
{
	struct __ns1__EjectedMolds_ *_p = protocolv2::soap_new___ns1__EjectedMolds_(soap);
	if (_p)
	{	protocolv2::soap_default___ns1__EjectedMolds_(soap, _p);
		_p->ns1__EjectedMolds = ns1__EjectedMolds;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__EjectedMolds_(struct soap*, const struct __ns1__EjectedMolds_ *, const char*, const char*);

inline int soap_write___ns1__EjectedMolds_(struct soap *soap, struct __ns1__EjectedMolds_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (protocolv2::soap_serialize___ns1__EjectedMolds_(soap, p), 0) || protocolv2::soap_put___ns1__EjectedMolds_(soap, p, "-ns1:EjectedMolds", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__EjectedMolds_(struct soap *soap, const char *URL, struct __ns1__EjectedMolds_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__EjectedMolds_(soap, p), 0) || protocolv2::soap_put___ns1__EjectedMolds_(soap, p, "-ns1:EjectedMolds", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__EjectedMolds_(struct soap *soap, const char *URL, struct __ns1__EjectedMolds_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__EjectedMolds_(soap, p), 0) || protocolv2::soap_put___ns1__EjectedMolds_(soap, p, "-ns1:EjectedMolds", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__EjectedMolds_(struct soap *soap, const char *URL, struct __ns1__EjectedMolds_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__EjectedMolds_(soap, p), 0) || protocolv2::soap_put___ns1__EjectedMolds_(soap, p, "-ns1:EjectedMolds", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__EjectedMolds_ * SOAP_FMAC4 soap_get___ns1__EjectedMolds_(struct soap*, struct __ns1__EjectedMolds_ *, const char*, const char*);

inline int soap_read___ns1__EjectedMolds_(struct soap *soap, struct __ns1__EjectedMolds_ *p)
{
	if (p)
	{	protocolv2::soap_default___ns1__EjectedMolds_(soap, p);
		if (soap_begin_recv(soap) || protocolv2::soap_get___ns1__EjectedMolds_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__EjectedMolds_(struct soap *soap, const char *URL, struct __ns1__EjectedMolds_ *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read___ns1__EjectedMolds_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__EjectedMolds_(struct soap *soap, struct __ns1__EjectedMolds_ *p)
{
	if (protocolv2::soap_read___ns1__EjectedMolds_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2___ns1__MountedMolds__DEFINED
#define SOAP_TYPE_protocolv2___ns1__MountedMolds__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__MountedMolds_(struct soap*, struct __ns1__MountedMolds_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__MountedMolds_(struct soap*, const struct __ns1__MountedMolds_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__MountedMolds_(struct soap*, const char*, int, const struct __ns1__MountedMolds_ *, const char*);
SOAP_FMAC3 struct __ns1__MountedMolds_ * SOAP_FMAC4 soap_in___ns1__MountedMolds_(struct soap*, const char*, struct __ns1__MountedMolds_ *, const char*);
SOAP_FMAC1 struct __ns1__MountedMolds_ * SOAP_FMAC2 soap_instantiate___ns1__MountedMolds_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__MountedMolds_ * soap_new___ns1__MountedMolds_(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate___ns1__MountedMolds_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__MountedMolds_ * soap_new_req___ns1__MountedMolds_(
	struct soap *soap)
{
	struct __ns1__MountedMolds_ *_p = protocolv2::soap_new___ns1__MountedMolds_(soap);
	if (_p)
	{	protocolv2::soap_default___ns1__MountedMolds_(soap, _p);
	}
	return _p;
}

inline struct __ns1__MountedMolds_ * soap_new_set___ns1__MountedMolds_(
	struct soap *soap,
	_ns1__MountedMolds *ns1__MountedMolds)
{
	struct __ns1__MountedMolds_ *_p = protocolv2::soap_new___ns1__MountedMolds_(soap);
	if (_p)
	{	protocolv2::soap_default___ns1__MountedMolds_(soap, _p);
		_p->ns1__MountedMolds = ns1__MountedMolds;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__MountedMolds_(struct soap*, const struct __ns1__MountedMolds_ *, const char*, const char*);

inline int soap_write___ns1__MountedMolds_(struct soap *soap, struct __ns1__MountedMolds_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (protocolv2::soap_serialize___ns1__MountedMolds_(soap, p), 0) || protocolv2::soap_put___ns1__MountedMolds_(soap, p, "-ns1:MountedMolds", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__MountedMolds_(struct soap *soap, const char *URL, struct __ns1__MountedMolds_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__MountedMolds_(soap, p), 0) || protocolv2::soap_put___ns1__MountedMolds_(soap, p, "-ns1:MountedMolds", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__MountedMolds_(struct soap *soap, const char *URL, struct __ns1__MountedMolds_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__MountedMolds_(soap, p), 0) || protocolv2::soap_put___ns1__MountedMolds_(soap, p, "-ns1:MountedMolds", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__MountedMolds_(struct soap *soap, const char *URL, struct __ns1__MountedMolds_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__MountedMolds_(soap, p), 0) || protocolv2::soap_put___ns1__MountedMolds_(soap, p, "-ns1:MountedMolds", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__MountedMolds_ * SOAP_FMAC4 soap_get___ns1__MountedMolds_(struct soap*, struct __ns1__MountedMolds_ *, const char*, const char*);

inline int soap_read___ns1__MountedMolds_(struct soap *soap, struct __ns1__MountedMolds_ *p)
{
	if (p)
	{	protocolv2::soap_default___ns1__MountedMolds_(soap, p);
		if (soap_begin_recv(soap) || protocolv2::soap_get___ns1__MountedMolds_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__MountedMolds_(struct soap *soap, const char *URL, struct __ns1__MountedMolds_ *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read___ns1__MountedMolds_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__MountedMolds_(struct soap *soap, struct __ns1__MountedMolds_ *p)
{
	if (protocolv2::soap_read___ns1__MountedMolds_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2___ns1__GetUpdatedLastRequestDate__DEFINED
#define SOAP_TYPE_protocolv2___ns1__GetUpdatedLastRequestDate__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetUpdatedLastRequestDate_(struct soap*, struct __ns1__GetUpdatedLastRequestDate_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetUpdatedLastRequestDate_(struct soap*, const struct __ns1__GetUpdatedLastRequestDate_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetUpdatedLastRequestDate_(struct soap*, const char*, int, const struct __ns1__GetUpdatedLastRequestDate_ *, const char*);
SOAP_FMAC3 struct __ns1__GetUpdatedLastRequestDate_ * SOAP_FMAC4 soap_in___ns1__GetUpdatedLastRequestDate_(struct soap*, const char*, struct __ns1__GetUpdatedLastRequestDate_ *, const char*);
SOAP_FMAC1 struct __ns1__GetUpdatedLastRequestDate_ * SOAP_FMAC2 soap_instantiate___ns1__GetUpdatedLastRequestDate_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetUpdatedLastRequestDate_ * soap_new___ns1__GetUpdatedLastRequestDate_(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate___ns1__GetUpdatedLastRequestDate_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetUpdatedLastRequestDate_ * soap_new_req___ns1__GetUpdatedLastRequestDate_(
	struct soap *soap)
{
	struct __ns1__GetUpdatedLastRequestDate_ *_p = protocolv2::soap_new___ns1__GetUpdatedLastRequestDate_(soap);
	if (_p)
	{	protocolv2::soap_default___ns1__GetUpdatedLastRequestDate_(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetUpdatedLastRequestDate_ * soap_new_set___ns1__GetUpdatedLastRequestDate_(
	struct soap *soap,
	_ns1__GetUpdatedLastRequestDate *ns1__GetUpdatedLastRequestDate)
{
	struct __ns1__GetUpdatedLastRequestDate_ *_p = protocolv2::soap_new___ns1__GetUpdatedLastRequestDate_(soap);
	if (_p)
	{	protocolv2::soap_default___ns1__GetUpdatedLastRequestDate_(soap, _p);
		_p->ns1__GetUpdatedLastRequestDate = ns1__GetUpdatedLastRequestDate;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetUpdatedLastRequestDate_(struct soap*, const struct __ns1__GetUpdatedLastRequestDate_ *, const char*, const char*);

inline int soap_write___ns1__GetUpdatedLastRequestDate_(struct soap *soap, struct __ns1__GetUpdatedLastRequestDate_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (protocolv2::soap_serialize___ns1__GetUpdatedLastRequestDate_(soap, p), 0) || protocolv2::soap_put___ns1__GetUpdatedLastRequestDate_(soap, p, "-ns1:GetUpdatedLastRequestDate", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetUpdatedLastRequestDate_(struct soap *soap, const char *URL, struct __ns1__GetUpdatedLastRequestDate_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__GetUpdatedLastRequestDate_(soap, p), 0) || protocolv2::soap_put___ns1__GetUpdatedLastRequestDate_(soap, p, "-ns1:GetUpdatedLastRequestDate", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__GetUpdatedLastRequestDate_(struct soap *soap, const char *URL, struct __ns1__GetUpdatedLastRequestDate_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__GetUpdatedLastRequestDate_(soap, p), 0) || protocolv2::soap_put___ns1__GetUpdatedLastRequestDate_(soap, p, "-ns1:GetUpdatedLastRequestDate", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetUpdatedLastRequestDate_(struct soap *soap, const char *URL, struct __ns1__GetUpdatedLastRequestDate_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__GetUpdatedLastRequestDate_(soap, p), 0) || protocolv2::soap_put___ns1__GetUpdatedLastRequestDate_(soap, p, "-ns1:GetUpdatedLastRequestDate", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetUpdatedLastRequestDate_ * SOAP_FMAC4 soap_get___ns1__GetUpdatedLastRequestDate_(struct soap*, struct __ns1__GetUpdatedLastRequestDate_ *, const char*, const char*);

inline int soap_read___ns1__GetUpdatedLastRequestDate_(struct soap *soap, struct __ns1__GetUpdatedLastRequestDate_ *p)
{
	if (p)
	{	protocolv2::soap_default___ns1__GetUpdatedLastRequestDate_(soap, p);
		if (soap_begin_recv(soap) || protocolv2::soap_get___ns1__GetUpdatedLastRequestDate_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetUpdatedLastRequestDate_(struct soap *soap, const char *URL, struct __ns1__GetUpdatedLastRequestDate_ *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read___ns1__GetUpdatedLastRequestDate_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__GetUpdatedLastRequestDate_(struct soap *soap, struct __ns1__GetUpdatedLastRequestDate_ *p)
{
	if (protocolv2::soap_read___ns1__GetUpdatedLastRequestDate_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2___ns1__PreserveCounts__DEFINED
#define SOAP_TYPE_protocolv2___ns1__PreserveCounts__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__PreserveCounts_(struct soap*, struct __ns1__PreserveCounts_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__PreserveCounts_(struct soap*, const struct __ns1__PreserveCounts_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__PreserveCounts_(struct soap*, const char*, int, const struct __ns1__PreserveCounts_ *, const char*);
SOAP_FMAC3 struct __ns1__PreserveCounts_ * SOAP_FMAC4 soap_in___ns1__PreserveCounts_(struct soap*, const char*, struct __ns1__PreserveCounts_ *, const char*);
SOAP_FMAC1 struct __ns1__PreserveCounts_ * SOAP_FMAC2 soap_instantiate___ns1__PreserveCounts_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__PreserveCounts_ * soap_new___ns1__PreserveCounts_(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate___ns1__PreserveCounts_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__PreserveCounts_ * soap_new_req___ns1__PreserveCounts_(
	struct soap *soap)
{
	struct __ns1__PreserveCounts_ *_p = protocolv2::soap_new___ns1__PreserveCounts_(soap);
	if (_p)
	{	protocolv2::soap_default___ns1__PreserveCounts_(soap, _p);
	}
	return _p;
}

inline struct __ns1__PreserveCounts_ * soap_new_set___ns1__PreserveCounts_(
	struct soap *soap,
	_ns1__PreserveCounts *ns1__PreserveCounts)
{
	struct __ns1__PreserveCounts_ *_p = protocolv2::soap_new___ns1__PreserveCounts_(soap);
	if (_p)
	{	protocolv2::soap_default___ns1__PreserveCounts_(soap, _p);
		_p->ns1__PreserveCounts = ns1__PreserveCounts;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__PreserveCounts_(struct soap*, const struct __ns1__PreserveCounts_ *, const char*, const char*);

inline int soap_write___ns1__PreserveCounts_(struct soap *soap, struct __ns1__PreserveCounts_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (protocolv2::soap_serialize___ns1__PreserveCounts_(soap, p), 0) || protocolv2::soap_put___ns1__PreserveCounts_(soap, p, "-ns1:PreserveCounts", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__PreserveCounts_(struct soap *soap, const char *URL, struct __ns1__PreserveCounts_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__PreserveCounts_(soap, p), 0) || protocolv2::soap_put___ns1__PreserveCounts_(soap, p, "-ns1:PreserveCounts", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__PreserveCounts_(struct soap *soap, const char *URL, struct __ns1__PreserveCounts_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__PreserveCounts_(soap, p), 0) || protocolv2::soap_put___ns1__PreserveCounts_(soap, p, "-ns1:PreserveCounts", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__PreserveCounts_(struct soap *soap, const char *URL, struct __ns1__PreserveCounts_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__PreserveCounts_(soap, p), 0) || protocolv2::soap_put___ns1__PreserveCounts_(soap, p, "-ns1:PreserveCounts", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__PreserveCounts_ * SOAP_FMAC4 soap_get___ns1__PreserveCounts_(struct soap*, struct __ns1__PreserveCounts_ *, const char*, const char*);

inline int soap_read___ns1__PreserveCounts_(struct soap *soap, struct __ns1__PreserveCounts_ *p)
{
	if (p)
	{	protocolv2::soap_default___ns1__PreserveCounts_(soap, p);
		if (soap_begin_recv(soap) || protocolv2::soap_get___ns1__PreserveCounts_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__PreserveCounts_(struct soap *soap, const char *URL, struct __ns1__PreserveCounts_ *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read___ns1__PreserveCounts_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__PreserveCounts_(struct soap *soap, struct __ns1__PreserveCounts_ *p)
{
	if (protocolv2::soap_read___ns1__PreserveCounts_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2___ns1__CountsByArticle__DEFINED
#define SOAP_TYPE_protocolv2___ns1__CountsByArticle__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CountsByArticle_(struct soap*, struct __ns1__CountsByArticle_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CountsByArticle_(struct soap*, const struct __ns1__CountsByArticle_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CountsByArticle_(struct soap*, const char*, int, const struct __ns1__CountsByArticle_ *, const char*);
SOAP_FMAC3 struct __ns1__CountsByArticle_ * SOAP_FMAC4 soap_in___ns1__CountsByArticle_(struct soap*, const char*, struct __ns1__CountsByArticle_ *, const char*);
SOAP_FMAC1 struct __ns1__CountsByArticle_ * SOAP_FMAC2 soap_instantiate___ns1__CountsByArticle_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__CountsByArticle_ * soap_new___ns1__CountsByArticle_(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate___ns1__CountsByArticle_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__CountsByArticle_ * soap_new_req___ns1__CountsByArticle_(
	struct soap *soap)
{
	struct __ns1__CountsByArticle_ *_p = protocolv2::soap_new___ns1__CountsByArticle_(soap);
	if (_p)
	{	protocolv2::soap_default___ns1__CountsByArticle_(soap, _p);
	}
	return _p;
}

inline struct __ns1__CountsByArticle_ * soap_new_set___ns1__CountsByArticle_(
	struct soap *soap,
	_ns1__CountsByArticle *ns1__CountsByArticle)
{
	struct __ns1__CountsByArticle_ *_p = protocolv2::soap_new___ns1__CountsByArticle_(soap);
	if (_p)
	{	protocolv2::soap_default___ns1__CountsByArticle_(soap, _p);
		_p->ns1__CountsByArticle = ns1__CountsByArticle;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CountsByArticle_(struct soap*, const struct __ns1__CountsByArticle_ *, const char*, const char*);

inline int soap_write___ns1__CountsByArticle_(struct soap *soap, struct __ns1__CountsByArticle_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (protocolv2::soap_serialize___ns1__CountsByArticle_(soap, p), 0) || protocolv2::soap_put___ns1__CountsByArticle_(soap, p, "-ns1:CountsByArticle", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__CountsByArticle_(struct soap *soap, const char *URL, struct __ns1__CountsByArticle_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__CountsByArticle_(soap, p), 0) || protocolv2::soap_put___ns1__CountsByArticle_(soap, p, "-ns1:CountsByArticle", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__CountsByArticle_(struct soap *soap, const char *URL, struct __ns1__CountsByArticle_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__CountsByArticle_(soap, p), 0) || protocolv2::soap_put___ns1__CountsByArticle_(soap, p, "-ns1:CountsByArticle", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__CountsByArticle_(struct soap *soap, const char *URL, struct __ns1__CountsByArticle_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__CountsByArticle_(soap, p), 0) || protocolv2::soap_put___ns1__CountsByArticle_(soap, p, "-ns1:CountsByArticle", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__CountsByArticle_ * SOAP_FMAC4 soap_get___ns1__CountsByArticle_(struct soap*, struct __ns1__CountsByArticle_ *, const char*, const char*);

inline int soap_read___ns1__CountsByArticle_(struct soap *soap, struct __ns1__CountsByArticle_ *p)
{
	if (p)
	{	protocolv2::soap_default___ns1__CountsByArticle_(soap, p);
		if (soap_begin_recv(soap) || protocolv2::soap_get___ns1__CountsByArticle_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__CountsByArticle_(struct soap *soap, const char *URL, struct __ns1__CountsByArticle_ *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read___ns1__CountsByArticle_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__CountsByArticle_(struct soap *soap, struct __ns1__CountsByArticle_ *p)
{
	if (protocolv2::soap_read___ns1__CountsByArticle_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2___ns1__Counts__DEFINED
#define SOAP_TYPE_protocolv2___ns1__Counts__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Counts_(struct soap*, struct __ns1__Counts_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Counts_(struct soap*, const struct __ns1__Counts_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Counts_(struct soap*, const char*, int, const struct __ns1__Counts_ *, const char*);
SOAP_FMAC3 struct __ns1__Counts_ * SOAP_FMAC4 soap_in___ns1__Counts_(struct soap*, const char*, struct __ns1__Counts_ *, const char*);
SOAP_FMAC1 struct __ns1__Counts_ * SOAP_FMAC2 soap_instantiate___ns1__Counts_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Counts_ * soap_new___ns1__Counts_(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate___ns1__Counts_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__Counts_ * soap_new_req___ns1__Counts_(
	struct soap *soap)
{
	struct __ns1__Counts_ *_p = protocolv2::soap_new___ns1__Counts_(soap);
	if (_p)
	{	protocolv2::soap_default___ns1__Counts_(soap, _p);
	}
	return _p;
}

inline struct __ns1__Counts_ * soap_new_set___ns1__Counts_(
	struct soap *soap,
	_ns1__Counts *ns1__Counts)
{
	struct __ns1__Counts_ *_p = protocolv2::soap_new___ns1__Counts_(soap);
	if (_p)
	{	protocolv2::soap_default___ns1__Counts_(soap, _p);
		_p->ns1__Counts = ns1__Counts;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Counts_(struct soap*, const struct __ns1__Counts_ *, const char*, const char*);

inline int soap_write___ns1__Counts_(struct soap *soap, struct __ns1__Counts_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (protocolv2::soap_serialize___ns1__Counts_(soap, p), 0) || protocolv2::soap_put___ns1__Counts_(soap, p, "-ns1:Counts", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__Counts_(struct soap *soap, const char *URL, struct __ns1__Counts_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__Counts_(soap, p), 0) || protocolv2::soap_put___ns1__Counts_(soap, p, "-ns1:Counts", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__Counts_(struct soap *soap, const char *URL, struct __ns1__Counts_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__Counts_(soap, p), 0) || protocolv2::soap_put___ns1__Counts_(soap, p, "-ns1:Counts", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__Counts_(struct soap *soap, const char *URL, struct __ns1__Counts_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__Counts_(soap, p), 0) || protocolv2::soap_put___ns1__Counts_(soap, p, "-ns1:Counts", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__Counts_ * SOAP_FMAC4 soap_get___ns1__Counts_(struct soap*, struct __ns1__Counts_ *, const char*, const char*);

inline int soap_read___ns1__Counts_(struct soap *soap, struct __ns1__Counts_ *p)
{
	if (p)
	{	protocolv2::soap_default___ns1__Counts_(soap, p);
		if (soap_begin_recv(soap) || protocolv2::soap_get___ns1__Counts_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__Counts_(struct soap *soap, const char *URL, struct __ns1__Counts_ *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read___ns1__Counts_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__Counts_(struct soap *soap, struct __ns1__Counts_ *p)
{
	if (protocolv2::soap_read___ns1__Counts_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2___ns1__GetLastRequestDate_DEFINED
#define SOAP_TYPE_protocolv2___ns1__GetLastRequestDate_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetLastRequestDate(struct soap*, struct __ns1__GetLastRequestDate *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetLastRequestDate(struct soap*, const struct __ns1__GetLastRequestDate *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetLastRequestDate(struct soap*, const char*, int, const struct __ns1__GetLastRequestDate *, const char*);
SOAP_FMAC3 struct __ns1__GetLastRequestDate * SOAP_FMAC4 soap_in___ns1__GetLastRequestDate(struct soap*, const char*, struct __ns1__GetLastRequestDate *, const char*);
SOAP_FMAC1 struct __ns1__GetLastRequestDate * SOAP_FMAC2 soap_instantiate___ns1__GetLastRequestDate(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetLastRequestDate * soap_new___ns1__GetLastRequestDate(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate___ns1__GetLastRequestDate(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetLastRequestDate * soap_new_req___ns1__GetLastRequestDate(
	struct soap *soap)
{
	struct __ns1__GetLastRequestDate *_p = protocolv2::soap_new___ns1__GetLastRequestDate(soap);
	if (_p)
	{	protocolv2::soap_default___ns1__GetLastRequestDate(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetLastRequestDate * soap_new_set___ns1__GetLastRequestDate(
	struct soap *soap,
	_ns1__GetLastRequestDate *ns1__GetLastRequestDate)
{
	struct __ns1__GetLastRequestDate *_p = protocolv2::soap_new___ns1__GetLastRequestDate(soap);
	if (_p)
	{	protocolv2::soap_default___ns1__GetLastRequestDate(soap, _p);
		_p->ns1__GetLastRequestDate = ns1__GetLastRequestDate;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetLastRequestDate(struct soap*, const struct __ns1__GetLastRequestDate *, const char*, const char*);

inline int soap_write___ns1__GetLastRequestDate(struct soap *soap, struct __ns1__GetLastRequestDate const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (protocolv2::soap_serialize___ns1__GetLastRequestDate(soap, p), 0) || protocolv2::soap_put___ns1__GetLastRequestDate(soap, p, "-ns1:GetLastRequestDate", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetLastRequestDate(struct soap *soap, const char *URL, struct __ns1__GetLastRequestDate const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__GetLastRequestDate(soap, p), 0) || protocolv2::soap_put___ns1__GetLastRequestDate(soap, p, "-ns1:GetLastRequestDate", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__GetLastRequestDate(struct soap *soap, const char *URL, struct __ns1__GetLastRequestDate const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__GetLastRequestDate(soap, p), 0) || protocolv2::soap_put___ns1__GetLastRequestDate(soap, p, "-ns1:GetLastRequestDate", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetLastRequestDate(struct soap *soap, const char *URL, struct __ns1__GetLastRequestDate const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__GetLastRequestDate(soap, p), 0) || protocolv2::soap_put___ns1__GetLastRequestDate(soap, p, "-ns1:GetLastRequestDate", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetLastRequestDate * SOAP_FMAC4 soap_get___ns1__GetLastRequestDate(struct soap*, struct __ns1__GetLastRequestDate *, const char*, const char*);

inline int soap_read___ns1__GetLastRequestDate(struct soap *soap, struct __ns1__GetLastRequestDate *p)
{
	if (p)
	{	protocolv2::soap_default___ns1__GetLastRequestDate(soap, p);
		if (soap_begin_recv(soap) || protocolv2::soap_get___ns1__GetLastRequestDate(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetLastRequestDate(struct soap *soap, const char *URL, struct __ns1__GetLastRequestDate *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read___ns1__GetLastRequestDate(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__GetLastRequestDate(struct soap *soap, struct __ns1__GetLastRequestDate *p)
{
	if (protocolv2::soap_read___ns1__GetLastRequestDate(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2___ns1__AddSamples_DEFINED
#define SOAP_TYPE_protocolv2___ns1__AddSamples_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AddSamples(struct soap*, struct __ns1__AddSamples *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AddSamples(struct soap*, const struct __ns1__AddSamples *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AddSamples(struct soap*, const char*, int, const struct __ns1__AddSamples *, const char*);
SOAP_FMAC3 struct __ns1__AddSamples * SOAP_FMAC4 soap_in___ns1__AddSamples(struct soap*, const char*, struct __ns1__AddSamples *, const char*);
SOAP_FMAC1 struct __ns1__AddSamples * SOAP_FMAC2 soap_instantiate___ns1__AddSamples(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__AddSamples * soap_new___ns1__AddSamples(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate___ns1__AddSamples(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__AddSamples * soap_new_req___ns1__AddSamples(
	struct soap *soap)
{
	struct __ns1__AddSamples *_p = protocolv2::soap_new___ns1__AddSamples(soap);
	if (_p)
	{	protocolv2::soap_default___ns1__AddSamples(soap, _p);
	}
	return _p;
}

inline struct __ns1__AddSamples * soap_new_set___ns1__AddSamples(
	struct soap *soap,
	_ns1__AddSamples *ns1__AddSamples)
{
	struct __ns1__AddSamples *_p = protocolv2::soap_new___ns1__AddSamples(soap);
	if (_p)
	{	protocolv2::soap_default___ns1__AddSamples(soap, _p);
		_p->ns1__AddSamples = ns1__AddSamples;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AddSamples(struct soap*, const struct __ns1__AddSamples *, const char*, const char*);

inline int soap_write___ns1__AddSamples(struct soap *soap, struct __ns1__AddSamples const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (protocolv2::soap_serialize___ns1__AddSamples(soap, p), 0) || protocolv2::soap_put___ns1__AddSamples(soap, p, "-ns1:AddSamples", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__AddSamples(struct soap *soap, const char *URL, struct __ns1__AddSamples const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__AddSamples(soap, p), 0) || protocolv2::soap_put___ns1__AddSamples(soap, p, "-ns1:AddSamples", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__AddSamples(struct soap *soap, const char *URL, struct __ns1__AddSamples const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__AddSamples(soap, p), 0) || protocolv2::soap_put___ns1__AddSamples(soap, p, "-ns1:AddSamples", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__AddSamples(struct soap *soap, const char *URL, struct __ns1__AddSamples const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__AddSamples(soap, p), 0) || protocolv2::soap_put___ns1__AddSamples(soap, p, "-ns1:AddSamples", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__AddSamples * SOAP_FMAC4 soap_get___ns1__AddSamples(struct soap*, struct __ns1__AddSamples *, const char*, const char*);

inline int soap_read___ns1__AddSamples(struct soap *soap, struct __ns1__AddSamples *p)
{
	if (p)
	{	protocolv2::soap_default___ns1__AddSamples(soap, p);
		if (soap_begin_recv(soap) || protocolv2::soap_get___ns1__AddSamples(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__AddSamples(struct soap *soap, const char *URL, struct __ns1__AddSamples *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read___ns1__AddSamples(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__AddSamples(struct soap *soap, struct __ns1__AddSamples *p)
{
	if (protocolv2::soap_read___ns1__AddSamples(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2___ns1__AddEjectedMolds_DEFINED
#define SOAP_TYPE_protocolv2___ns1__AddEjectedMolds_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AddEjectedMolds(struct soap*, struct __ns1__AddEjectedMolds *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AddEjectedMolds(struct soap*, const struct __ns1__AddEjectedMolds *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AddEjectedMolds(struct soap*, const char*, int, const struct __ns1__AddEjectedMolds *, const char*);
SOAP_FMAC3 struct __ns1__AddEjectedMolds * SOAP_FMAC4 soap_in___ns1__AddEjectedMolds(struct soap*, const char*, struct __ns1__AddEjectedMolds *, const char*);
SOAP_FMAC1 struct __ns1__AddEjectedMolds * SOAP_FMAC2 soap_instantiate___ns1__AddEjectedMolds(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__AddEjectedMolds * soap_new___ns1__AddEjectedMolds(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate___ns1__AddEjectedMolds(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__AddEjectedMolds * soap_new_req___ns1__AddEjectedMolds(
	struct soap *soap)
{
	struct __ns1__AddEjectedMolds *_p = protocolv2::soap_new___ns1__AddEjectedMolds(soap);
	if (_p)
	{	protocolv2::soap_default___ns1__AddEjectedMolds(soap, _p);
	}
	return _p;
}

inline struct __ns1__AddEjectedMolds * soap_new_set___ns1__AddEjectedMolds(
	struct soap *soap,
	_ns1__AddEjectedMolds *ns1__AddEjectedMolds)
{
	struct __ns1__AddEjectedMolds *_p = protocolv2::soap_new___ns1__AddEjectedMolds(soap);
	if (_p)
	{	protocolv2::soap_default___ns1__AddEjectedMolds(soap, _p);
		_p->ns1__AddEjectedMolds = ns1__AddEjectedMolds;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AddEjectedMolds(struct soap*, const struct __ns1__AddEjectedMolds *, const char*, const char*);

inline int soap_write___ns1__AddEjectedMolds(struct soap *soap, struct __ns1__AddEjectedMolds const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (protocolv2::soap_serialize___ns1__AddEjectedMolds(soap, p), 0) || protocolv2::soap_put___ns1__AddEjectedMolds(soap, p, "-ns1:AddEjectedMolds", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__AddEjectedMolds(struct soap *soap, const char *URL, struct __ns1__AddEjectedMolds const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__AddEjectedMolds(soap, p), 0) || protocolv2::soap_put___ns1__AddEjectedMolds(soap, p, "-ns1:AddEjectedMolds", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__AddEjectedMolds(struct soap *soap, const char *URL, struct __ns1__AddEjectedMolds const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__AddEjectedMolds(soap, p), 0) || protocolv2::soap_put___ns1__AddEjectedMolds(soap, p, "-ns1:AddEjectedMolds", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__AddEjectedMolds(struct soap *soap, const char *URL, struct __ns1__AddEjectedMolds const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__AddEjectedMolds(soap, p), 0) || protocolv2::soap_put___ns1__AddEjectedMolds(soap, p, "-ns1:AddEjectedMolds", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__AddEjectedMolds * SOAP_FMAC4 soap_get___ns1__AddEjectedMolds(struct soap*, struct __ns1__AddEjectedMolds *, const char*, const char*);

inline int soap_read___ns1__AddEjectedMolds(struct soap *soap, struct __ns1__AddEjectedMolds *p)
{
	if (p)
	{	protocolv2::soap_default___ns1__AddEjectedMolds(soap, p);
		if (soap_begin_recv(soap) || protocolv2::soap_get___ns1__AddEjectedMolds(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__AddEjectedMolds(struct soap *soap, const char *URL, struct __ns1__AddEjectedMolds *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read___ns1__AddEjectedMolds(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__AddEjectedMolds(struct soap *soap, struct __ns1__AddEjectedMolds *p)
{
	if (protocolv2::soap_read___ns1__AddEjectedMolds(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2___ns1__AddMountedMolds_DEFINED
#define SOAP_TYPE_protocolv2___ns1__AddMountedMolds_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AddMountedMolds(struct soap*, struct __ns1__AddMountedMolds *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AddMountedMolds(struct soap*, const struct __ns1__AddMountedMolds *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AddMountedMolds(struct soap*, const char*, int, const struct __ns1__AddMountedMolds *, const char*);
SOAP_FMAC3 struct __ns1__AddMountedMolds * SOAP_FMAC4 soap_in___ns1__AddMountedMolds(struct soap*, const char*, struct __ns1__AddMountedMolds *, const char*);
SOAP_FMAC1 struct __ns1__AddMountedMolds * SOAP_FMAC2 soap_instantiate___ns1__AddMountedMolds(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__AddMountedMolds * soap_new___ns1__AddMountedMolds(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate___ns1__AddMountedMolds(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__AddMountedMolds * soap_new_req___ns1__AddMountedMolds(
	struct soap *soap)
{
	struct __ns1__AddMountedMolds *_p = protocolv2::soap_new___ns1__AddMountedMolds(soap);
	if (_p)
	{	protocolv2::soap_default___ns1__AddMountedMolds(soap, _p);
	}
	return _p;
}

inline struct __ns1__AddMountedMolds * soap_new_set___ns1__AddMountedMolds(
	struct soap *soap,
	_ns1__AddMountedMolds *ns1__AddMountedMolds)
{
	struct __ns1__AddMountedMolds *_p = protocolv2::soap_new___ns1__AddMountedMolds(soap);
	if (_p)
	{	protocolv2::soap_default___ns1__AddMountedMolds(soap, _p);
		_p->ns1__AddMountedMolds = ns1__AddMountedMolds;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AddMountedMolds(struct soap*, const struct __ns1__AddMountedMolds *, const char*, const char*);

inline int soap_write___ns1__AddMountedMolds(struct soap *soap, struct __ns1__AddMountedMolds const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (protocolv2::soap_serialize___ns1__AddMountedMolds(soap, p), 0) || protocolv2::soap_put___ns1__AddMountedMolds(soap, p, "-ns1:AddMountedMolds", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__AddMountedMolds(struct soap *soap, const char *URL, struct __ns1__AddMountedMolds const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__AddMountedMolds(soap, p), 0) || protocolv2::soap_put___ns1__AddMountedMolds(soap, p, "-ns1:AddMountedMolds", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__AddMountedMolds(struct soap *soap, const char *URL, struct __ns1__AddMountedMolds const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__AddMountedMolds(soap, p), 0) || protocolv2::soap_put___ns1__AddMountedMolds(soap, p, "-ns1:AddMountedMolds", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__AddMountedMolds(struct soap *soap, const char *URL, struct __ns1__AddMountedMolds const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__AddMountedMolds(soap, p), 0) || protocolv2::soap_put___ns1__AddMountedMolds(soap, p, "-ns1:AddMountedMolds", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__AddMountedMolds * SOAP_FMAC4 soap_get___ns1__AddMountedMolds(struct soap*, struct __ns1__AddMountedMolds *, const char*, const char*);

inline int soap_read___ns1__AddMountedMolds(struct soap *soap, struct __ns1__AddMountedMolds *p)
{
	if (p)
	{	protocolv2::soap_default___ns1__AddMountedMolds(soap, p);
		if (soap_begin_recv(soap) || protocolv2::soap_get___ns1__AddMountedMolds(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__AddMountedMolds(struct soap *soap, const char *URL, struct __ns1__AddMountedMolds *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read___ns1__AddMountedMolds(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__AddMountedMolds(struct soap *soap, struct __ns1__AddMountedMolds *p)
{
	if (protocolv2::soap_read___ns1__AddMountedMolds(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2___ns1__Samples_DEFINED
#define SOAP_TYPE_protocolv2___ns1__Samples_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Samples(struct soap*, struct __ns1__Samples *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Samples(struct soap*, const struct __ns1__Samples *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Samples(struct soap*, const char*, int, const struct __ns1__Samples *, const char*);
SOAP_FMAC3 struct __ns1__Samples * SOAP_FMAC4 soap_in___ns1__Samples(struct soap*, const char*, struct __ns1__Samples *, const char*);
SOAP_FMAC1 struct __ns1__Samples * SOAP_FMAC2 soap_instantiate___ns1__Samples(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Samples * soap_new___ns1__Samples(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate___ns1__Samples(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__Samples * soap_new_req___ns1__Samples(
	struct soap *soap)
{
	struct __ns1__Samples *_p = protocolv2::soap_new___ns1__Samples(soap);
	if (_p)
	{	protocolv2::soap_default___ns1__Samples(soap, _p);
	}
	return _p;
}

inline struct __ns1__Samples * soap_new_set___ns1__Samples(
	struct soap *soap,
	_ns1__Samples *ns1__Samples)
{
	struct __ns1__Samples *_p = protocolv2::soap_new___ns1__Samples(soap);
	if (_p)
	{	protocolv2::soap_default___ns1__Samples(soap, _p);
		_p->ns1__Samples = ns1__Samples;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Samples(struct soap*, const struct __ns1__Samples *, const char*, const char*);

inline int soap_write___ns1__Samples(struct soap *soap, struct __ns1__Samples const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (protocolv2::soap_serialize___ns1__Samples(soap, p), 0) || protocolv2::soap_put___ns1__Samples(soap, p, "-ns1:Samples", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__Samples(struct soap *soap, const char *URL, struct __ns1__Samples const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__Samples(soap, p), 0) || protocolv2::soap_put___ns1__Samples(soap, p, "-ns1:Samples", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__Samples(struct soap *soap, const char *URL, struct __ns1__Samples const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__Samples(soap, p), 0) || protocolv2::soap_put___ns1__Samples(soap, p, "-ns1:Samples", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__Samples(struct soap *soap, const char *URL, struct __ns1__Samples const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__Samples(soap, p), 0) || protocolv2::soap_put___ns1__Samples(soap, p, "-ns1:Samples", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__Samples * SOAP_FMAC4 soap_get___ns1__Samples(struct soap*, struct __ns1__Samples *, const char*, const char*);

inline int soap_read___ns1__Samples(struct soap *soap, struct __ns1__Samples *p)
{
	if (p)
	{	protocolv2::soap_default___ns1__Samples(soap, p);
		if (soap_begin_recv(soap) || protocolv2::soap_get___ns1__Samples(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__Samples(struct soap *soap, const char *URL, struct __ns1__Samples *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read___ns1__Samples(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__Samples(struct soap *soap, struct __ns1__Samples *p)
{
	if (protocolv2::soap_read___ns1__Samples(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2___ns1__Alarms_DEFINED
#define SOAP_TYPE_protocolv2___ns1__Alarms_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Alarms(struct soap*, struct __ns1__Alarms *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Alarms(struct soap*, const struct __ns1__Alarms *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Alarms(struct soap*, const char*, int, const struct __ns1__Alarms *, const char*);
SOAP_FMAC3 struct __ns1__Alarms * SOAP_FMAC4 soap_in___ns1__Alarms(struct soap*, const char*, struct __ns1__Alarms *, const char*);
SOAP_FMAC1 struct __ns1__Alarms * SOAP_FMAC2 soap_instantiate___ns1__Alarms(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Alarms * soap_new___ns1__Alarms(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate___ns1__Alarms(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__Alarms * soap_new_req___ns1__Alarms(
	struct soap *soap)
{
	struct __ns1__Alarms *_p = protocolv2::soap_new___ns1__Alarms(soap);
	if (_p)
	{	protocolv2::soap_default___ns1__Alarms(soap, _p);
	}
	return _p;
}

inline struct __ns1__Alarms * soap_new_set___ns1__Alarms(
	struct soap *soap,
	_ns1__Alarms *ns1__Alarms)
{
	struct __ns1__Alarms *_p = protocolv2::soap_new___ns1__Alarms(soap);
	if (_p)
	{	protocolv2::soap_default___ns1__Alarms(soap, _p);
		_p->ns1__Alarms = ns1__Alarms;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Alarms(struct soap*, const struct __ns1__Alarms *, const char*, const char*);

inline int soap_write___ns1__Alarms(struct soap *soap, struct __ns1__Alarms const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (protocolv2::soap_serialize___ns1__Alarms(soap, p), 0) || protocolv2::soap_put___ns1__Alarms(soap, p, "-ns1:Alarms", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__Alarms(struct soap *soap, const char *URL, struct __ns1__Alarms const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__Alarms(soap, p), 0) || protocolv2::soap_put___ns1__Alarms(soap, p, "-ns1:Alarms", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__Alarms(struct soap *soap, const char *URL, struct __ns1__Alarms const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__Alarms(soap, p), 0) || protocolv2::soap_put___ns1__Alarms(soap, p, "-ns1:Alarms", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__Alarms(struct soap *soap, const char *URL, struct __ns1__Alarms const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__Alarms(soap, p), 0) || protocolv2::soap_put___ns1__Alarms(soap, p, "-ns1:Alarms", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__Alarms * SOAP_FMAC4 soap_get___ns1__Alarms(struct soap*, struct __ns1__Alarms *, const char*, const char*);

inline int soap_read___ns1__Alarms(struct soap *soap, struct __ns1__Alarms *p)
{
	if (p)
	{	protocolv2::soap_default___ns1__Alarms(soap, p);
		if (soap_begin_recv(soap) || protocolv2::soap_get___ns1__Alarms(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__Alarms(struct soap *soap, const char *URL, struct __ns1__Alarms *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read___ns1__Alarms(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__Alarms(struct soap *soap, struct __ns1__Alarms *p)
{
	if (protocolv2::soap_read___ns1__Alarms(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2___ns1__Measures_DEFINED
#define SOAP_TYPE_protocolv2___ns1__Measures_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Measures(struct soap*, struct __ns1__Measures *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Measures(struct soap*, const struct __ns1__Measures *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Measures(struct soap*, const char*, int, const struct __ns1__Measures *, const char*);
SOAP_FMAC3 struct __ns1__Measures * SOAP_FMAC4 soap_in___ns1__Measures(struct soap*, const char*, struct __ns1__Measures *, const char*);
SOAP_FMAC1 struct __ns1__Measures * SOAP_FMAC2 soap_instantiate___ns1__Measures(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Measures * soap_new___ns1__Measures(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate___ns1__Measures(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__Measures * soap_new_req___ns1__Measures(
	struct soap *soap)
{
	struct __ns1__Measures *_p = protocolv2::soap_new___ns1__Measures(soap);
	if (_p)
	{	protocolv2::soap_default___ns1__Measures(soap, _p);
	}
	return _p;
}

inline struct __ns1__Measures * soap_new_set___ns1__Measures(
	struct soap *soap,
	_ns1__Measures *ns1__Measures)
{
	struct __ns1__Measures *_p = protocolv2::soap_new___ns1__Measures(soap);
	if (_p)
	{	protocolv2::soap_default___ns1__Measures(soap, _p);
		_p->ns1__Measures = ns1__Measures;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Measures(struct soap*, const struct __ns1__Measures *, const char*, const char*);

inline int soap_write___ns1__Measures(struct soap *soap, struct __ns1__Measures const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (protocolv2::soap_serialize___ns1__Measures(soap, p), 0) || protocolv2::soap_put___ns1__Measures(soap, p, "-ns1:Measures", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__Measures(struct soap *soap, const char *URL, struct __ns1__Measures const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__Measures(soap, p), 0) || protocolv2::soap_put___ns1__Measures(soap, p, "-ns1:Measures", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__Measures(struct soap *soap, const char *URL, struct __ns1__Measures const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__Measures(soap, p), 0) || protocolv2::soap_put___ns1__Measures(soap, p, "-ns1:Measures", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__Measures(struct soap *soap, const char *URL, struct __ns1__Measures const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__Measures(soap, p), 0) || protocolv2::soap_put___ns1__Measures(soap, p, "-ns1:Measures", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__Measures * SOAP_FMAC4 soap_get___ns1__Measures(struct soap*, struct __ns1__Measures *, const char*, const char*);

inline int soap_read___ns1__Measures(struct soap *soap, struct __ns1__Measures *p)
{
	if (p)
	{	protocolv2::soap_default___ns1__Measures(soap, p);
		if (soap_begin_recv(soap) || protocolv2::soap_get___ns1__Measures(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__Measures(struct soap *soap, const char *URL, struct __ns1__Measures *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read___ns1__Measures(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__Measures(struct soap *soap, struct __ns1__Measures *p)
{
	if (protocolv2::soap_read___ns1__Measures(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2___ns1__ReadenMolds_DEFINED
#define SOAP_TYPE_protocolv2___ns1__ReadenMolds_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ReadenMolds(struct soap*, struct __ns1__ReadenMolds *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ReadenMolds(struct soap*, const struct __ns1__ReadenMolds *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ReadenMolds(struct soap*, const char*, int, const struct __ns1__ReadenMolds *, const char*);
SOAP_FMAC3 struct __ns1__ReadenMolds * SOAP_FMAC4 soap_in___ns1__ReadenMolds(struct soap*, const char*, struct __ns1__ReadenMolds *, const char*);
SOAP_FMAC1 struct __ns1__ReadenMolds * SOAP_FMAC2 soap_instantiate___ns1__ReadenMolds(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ReadenMolds * soap_new___ns1__ReadenMolds(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate___ns1__ReadenMolds(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__ReadenMolds * soap_new_req___ns1__ReadenMolds(
	struct soap *soap)
{
	struct __ns1__ReadenMolds *_p = protocolv2::soap_new___ns1__ReadenMolds(soap);
	if (_p)
	{	protocolv2::soap_default___ns1__ReadenMolds(soap, _p);
	}
	return _p;
}

inline struct __ns1__ReadenMolds * soap_new_set___ns1__ReadenMolds(
	struct soap *soap,
	_ns1__ReadenMolds *ns1__ReadenMolds)
{
	struct __ns1__ReadenMolds *_p = protocolv2::soap_new___ns1__ReadenMolds(soap);
	if (_p)
	{	protocolv2::soap_default___ns1__ReadenMolds(soap, _p);
		_p->ns1__ReadenMolds = ns1__ReadenMolds;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ReadenMolds(struct soap*, const struct __ns1__ReadenMolds *, const char*, const char*);

inline int soap_write___ns1__ReadenMolds(struct soap *soap, struct __ns1__ReadenMolds const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (protocolv2::soap_serialize___ns1__ReadenMolds(soap, p), 0) || protocolv2::soap_put___ns1__ReadenMolds(soap, p, "-ns1:ReadenMolds", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__ReadenMolds(struct soap *soap, const char *URL, struct __ns1__ReadenMolds const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__ReadenMolds(soap, p), 0) || protocolv2::soap_put___ns1__ReadenMolds(soap, p, "-ns1:ReadenMolds", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__ReadenMolds(struct soap *soap, const char *URL, struct __ns1__ReadenMolds const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__ReadenMolds(soap, p), 0) || protocolv2::soap_put___ns1__ReadenMolds(soap, p, "-ns1:ReadenMolds", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__ReadenMolds(struct soap *soap, const char *URL, struct __ns1__ReadenMolds const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__ReadenMolds(soap, p), 0) || protocolv2::soap_put___ns1__ReadenMolds(soap, p, "-ns1:ReadenMolds", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__ReadenMolds * SOAP_FMAC4 soap_get___ns1__ReadenMolds(struct soap*, struct __ns1__ReadenMolds *, const char*, const char*);

inline int soap_read___ns1__ReadenMolds(struct soap *soap, struct __ns1__ReadenMolds *p)
{
	if (p)
	{	protocolv2::soap_default___ns1__ReadenMolds(soap, p);
		if (soap_begin_recv(soap) || protocolv2::soap_get___ns1__ReadenMolds(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__ReadenMolds(struct soap *soap, const char *URL, struct __ns1__ReadenMolds *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read___ns1__ReadenMolds(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__ReadenMolds(struct soap *soap, struct __ns1__ReadenMolds *p)
{
	if (protocolv2::soap_read___ns1__ReadenMolds(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2___ns1__EjectedMolds_DEFINED
#define SOAP_TYPE_protocolv2___ns1__EjectedMolds_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__EjectedMolds(struct soap*, struct __ns1__EjectedMolds *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__EjectedMolds(struct soap*, const struct __ns1__EjectedMolds *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__EjectedMolds(struct soap*, const char*, int, const struct __ns1__EjectedMolds *, const char*);
SOAP_FMAC3 struct __ns1__EjectedMolds * SOAP_FMAC4 soap_in___ns1__EjectedMolds(struct soap*, const char*, struct __ns1__EjectedMolds *, const char*);
SOAP_FMAC1 struct __ns1__EjectedMolds * SOAP_FMAC2 soap_instantiate___ns1__EjectedMolds(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__EjectedMolds * soap_new___ns1__EjectedMolds(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate___ns1__EjectedMolds(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__EjectedMolds * soap_new_req___ns1__EjectedMolds(
	struct soap *soap)
{
	struct __ns1__EjectedMolds *_p = protocolv2::soap_new___ns1__EjectedMolds(soap);
	if (_p)
	{	protocolv2::soap_default___ns1__EjectedMolds(soap, _p);
	}
	return _p;
}

inline struct __ns1__EjectedMolds * soap_new_set___ns1__EjectedMolds(
	struct soap *soap,
	_ns1__EjectedMolds *ns1__EjectedMolds)
{
	struct __ns1__EjectedMolds *_p = protocolv2::soap_new___ns1__EjectedMolds(soap);
	if (_p)
	{	protocolv2::soap_default___ns1__EjectedMolds(soap, _p);
		_p->ns1__EjectedMolds = ns1__EjectedMolds;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__EjectedMolds(struct soap*, const struct __ns1__EjectedMolds *, const char*, const char*);

inline int soap_write___ns1__EjectedMolds(struct soap *soap, struct __ns1__EjectedMolds const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (protocolv2::soap_serialize___ns1__EjectedMolds(soap, p), 0) || protocolv2::soap_put___ns1__EjectedMolds(soap, p, "-ns1:EjectedMolds", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__EjectedMolds(struct soap *soap, const char *URL, struct __ns1__EjectedMolds const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__EjectedMolds(soap, p), 0) || protocolv2::soap_put___ns1__EjectedMolds(soap, p, "-ns1:EjectedMolds", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__EjectedMolds(struct soap *soap, const char *URL, struct __ns1__EjectedMolds const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__EjectedMolds(soap, p), 0) || protocolv2::soap_put___ns1__EjectedMolds(soap, p, "-ns1:EjectedMolds", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__EjectedMolds(struct soap *soap, const char *URL, struct __ns1__EjectedMolds const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__EjectedMolds(soap, p), 0) || protocolv2::soap_put___ns1__EjectedMolds(soap, p, "-ns1:EjectedMolds", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__EjectedMolds * SOAP_FMAC4 soap_get___ns1__EjectedMolds(struct soap*, struct __ns1__EjectedMolds *, const char*, const char*);

inline int soap_read___ns1__EjectedMolds(struct soap *soap, struct __ns1__EjectedMolds *p)
{
	if (p)
	{	protocolv2::soap_default___ns1__EjectedMolds(soap, p);
		if (soap_begin_recv(soap) || protocolv2::soap_get___ns1__EjectedMolds(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__EjectedMolds(struct soap *soap, const char *URL, struct __ns1__EjectedMolds *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read___ns1__EjectedMolds(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__EjectedMolds(struct soap *soap, struct __ns1__EjectedMolds *p)
{
	if (protocolv2::soap_read___ns1__EjectedMolds(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2___ns1__MountedMolds_DEFINED
#define SOAP_TYPE_protocolv2___ns1__MountedMolds_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__MountedMolds(struct soap*, struct __ns1__MountedMolds *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__MountedMolds(struct soap*, const struct __ns1__MountedMolds *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__MountedMolds(struct soap*, const char*, int, const struct __ns1__MountedMolds *, const char*);
SOAP_FMAC3 struct __ns1__MountedMolds * SOAP_FMAC4 soap_in___ns1__MountedMolds(struct soap*, const char*, struct __ns1__MountedMolds *, const char*);
SOAP_FMAC1 struct __ns1__MountedMolds * SOAP_FMAC2 soap_instantiate___ns1__MountedMolds(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__MountedMolds * soap_new___ns1__MountedMolds(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate___ns1__MountedMolds(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__MountedMolds * soap_new_req___ns1__MountedMolds(
	struct soap *soap)
{
	struct __ns1__MountedMolds *_p = protocolv2::soap_new___ns1__MountedMolds(soap);
	if (_p)
	{	protocolv2::soap_default___ns1__MountedMolds(soap, _p);
	}
	return _p;
}

inline struct __ns1__MountedMolds * soap_new_set___ns1__MountedMolds(
	struct soap *soap,
	_ns1__MountedMolds *ns1__MountedMolds)
{
	struct __ns1__MountedMolds *_p = protocolv2::soap_new___ns1__MountedMolds(soap);
	if (_p)
	{	protocolv2::soap_default___ns1__MountedMolds(soap, _p);
		_p->ns1__MountedMolds = ns1__MountedMolds;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__MountedMolds(struct soap*, const struct __ns1__MountedMolds *, const char*, const char*);

inline int soap_write___ns1__MountedMolds(struct soap *soap, struct __ns1__MountedMolds const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (protocolv2::soap_serialize___ns1__MountedMolds(soap, p), 0) || protocolv2::soap_put___ns1__MountedMolds(soap, p, "-ns1:MountedMolds", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__MountedMolds(struct soap *soap, const char *URL, struct __ns1__MountedMolds const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__MountedMolds(soap, p), 0) || protocolv2::soap_put___ns1__MountedMolds(soap, p, "-ns1:MountedMolds", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__MountedMolds(struct soap *soap, const char *URL, struct __ns1__MountedMolds const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__MountedMolds(soap, p), 0) || protocolv2::soap_put___ns1__MountedMolds(soap, p, "-ns1:MountedMolds", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__MountedMolds(struct soap *soap, const char *URL, struct __ns1__MountedMolds const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__MountedMolds(soap, p), 0) || protocolv2::soap_put___ns1__MountedMolds(soap, p, "-ns1:MountedMolds", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__MountedMolds * SOAP_FMAC4 soap_get___ns1__MountedMolds(struct soap*, struct __ns1__MountedMolds *, const char*, const char*);

inline int soap_read___ns1__MountedMolds(struct soap *soap, struct __ns1__MountedMolds *p)
{
	if (p)
	{	protocolv2::soap_default___ns1__MountedMolds(soap, p);
		if (soap_begin_recv(soap) || protocolv2::soap_get___ns1__MountedMolds(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__MountedMolds(struct soap *soap, const char *URL, struct __ns1__MountedMolds *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read___ns1__MountedMolds(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__MountedMolds(struct soap *soap, struct __ns1__MountedMolds *p)
{
	if (protocolv2::soap_read___ns1__MountedMolds(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2___ns1__GetUpdatedLastRequestDate_DEFINED
#define SOAP_TYPE_protocolv2___ns1__GetUpdatedLastRequestDate_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetUpdatedLastRequestDate(struct soap*, struct __ns1__GetUpdatedLastRequestDate *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetUpdatedLastRequestDate(struct soap*, const struct __ns1__GetUpdatedLastRequestDate *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetUpdatedLastRequestDate(struct soap*, const char*, int, const struct __ns1__GetUpdatedLastRequestDate *, const char*);
SOAP_FMAC3 struct __ns1__GetUpdatedLastRequestDate * SOAP_FMAC4 soap_in___ns1__GetUpdatedLastRequestDate(struct soap*, const char*, struct __ns1__GetUpdatedLastRequestDate *, const char*);
SOAP_FMAC1 struct __ns1__GetUpdatedLastRequestDate * SOAP_FMAC2 soap_instantiate___ns1__GetUpdatedLastRequestDate(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetUpdatedLastRequestDate * soap_new___ns1__GetUpdatedLastRequestDate(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate___ns1__GetUpdatedLastRequestDate(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetUpdatedLastRequestDate * soap_new_req___ns1__GetUpdatedLastRequestDate(
	struct soap *soap)
{
	struct __ns1__GetUpdatedLastRequestDate *_p = protocolv2::soap_new___ns1__GetUpdatedLastRequestDate(soap);
	if (_p)
	{	protocolv2::soap_default___ns1__GetUpdatedLastRequestDate(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetUpdatedLastRequestDate * soap_new_set___ns1__GetUpdatedLastRequestDate(
	struct soap *soap,
	_ns1__GetUpdatedLastRequestDate *ns1__GetUpdatedLastRequestDate)
{
	struct __ns1__GetUpdatedLastRequestDate *_p = protocolv2::soap_new___ns1__GetUpdatedLastRequestDate(soap);
	if (_p)
	{	protocolv2::soap_default___ns1__GetUpdatedLastRequestDate(soap, _p);
		_p->ns1__GetUpdatedLastRequestDate = ns1__GetUpdatedLastRequestDate;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetUpdatedLastRequestDate(struct soap*, const struct __ns1__GetUpdatedLastRequestDate *, const char*, const char*);

inline int soap_write___ns1__GetUpdatedLastRequestDate(struct soap *soap, struct __ns1__GetUpdatedLastRequestDate const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (protocolv2::soap_serialize___ns1__GetUpdatedLastRequestDate(soap, p), 0) || protocolv2::soap_put___ns1__GetUpdatedLastRequestDate(soap, p, "-ns1:GetUpdatedLastRequestDate", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetUpdatedLastRequestDate(struct soap *soap, const char *URL, struct __ns1__GetUpdatedLastRequestDate const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__GetUpdatedLastRequestDate(soap, p), 0) || protocolv2::soap_put___ns1__GetUpdatedLastRequestDate(soap, p, "-ns1:GetUpdatedLastRequestDate", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__GetUpdatedLastRequestDate(struct soap *soap, const char *URL, struct __ns1__GetUpdatedLastRequestDate const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__GetUpdatedLastRequestDate(soap, p), 0) || protocolv2::soap_put___ns1__GetUpdatedLastRequestDate(soap, p, "-ns1:GetUpdatedLastRequestDate", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetUpdatedLastRequestDate(struct soap *soap, const char *URL, struct __ns1__GetUpdatedLastRequestDate const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__GetUpdatedLastRequestDate(soap, p), 0) || protocolv2::soap_put___ns1__GetUpdatedLastRequestDate(soap, p, "-ns1:GetUpdatedLastRequestDate", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetUpdatedLastRequestDate * SOAP_FMAC4 soap_get___ns1__GetUpdatedLastRequestDate(struct soap*, struct __ns1__GetUpdatedLastRequestDate *, const char*, const char*);

inline int soap_read___ns1__GetUpdatedLastRequestDate(struct soap *soap, struct __ns1__GetUpdatedLastRequestDate *p)
{
	if (p)
	{	protocolv2::soap_default___ns1__GetUpdatedLastRequestDate(soap, p);
		if (soap_begin_recv(soap) || protocolv2::soap_get___ns1__GetUpdatedLastRequestDate(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetUpdatedLastRequestDate(struct soap *soap, const char *URL, struct __ns1__GetUpdatedLastRequestDate *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read___ns1__GetUpdatedLastRequestDate(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__GetUpdatedLastRequestDate(struct soap *soap, struct __ns1__GetUpdatedLastRequestDate *p)
{
	if (protocolv2::soap_read___ns1__GetUpdatedLastRequestDate(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2___ns1__PreserveCounts_DEFINED
#define SOAP_TYPE_protocolv2___ns1__PreserveCounts_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__PreserveCounts(struct soap*, struct __ns1__PreserveCounts *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__PreserveCounts(struct soap*, const struct __ns1__PreserveCounts *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__PreserveCounts(struct soap*, const char*, int, const struct __ns1__PreserveCounts *, const char*);
SOAP_FMAC3 struct __ns1__PreserveCounts * SOAP_FMAC4 soap_in___ns1__PreserveCounts(struct soap*, const char*, struct __ns1__PreserveCounts *, const char*);
SOAP_FMAC1 struct __ns1__PreserveCounts * SOAP_FMAC2 soap_instantiate___ns1__PreserveCounts(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__PreserveCounts * soap_new___ns1__PreserveCounts(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate___ns1__PreserveCounts(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__PreserveCounts * soap_new_req___ns1__PreserveCounts(
	struct soap *soap)
{
	struct __ns1__PreserveCounts *_p = protocolv2::soap_new___ns1__PreserveCounts(soap);
	if (_p)
	{	protocolv2::soap_default___ns1__PreserveCounts(soap, _p);
	}
	return _p;
}

inline struct __ns1__PreserveCounts * soap_new_set___ns1__PreserveCounts(
	struct soap *soap,
	_ns1__PreserveCounts *ns1__PreserveCounts)
{
	struct __ns1__PreserveCounts *_p = protocolv2::soap_new___ns1__PreserveCounts(soap);
	if (_p)
	{	protocolv2::soap_default___ns1__PreserveCounts(soap, _p);
		_p->ns1__PreserveCounts = ns1__PreserveCounts;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__PreserveCounts(struct soap*, const struct __ns1__PreserveCounts *, const char*, const char*);

inline int soap_write___ns1__PreserveCounts(struct soap *soap, struct __ns1__PreserveCounts const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (protocolv2::soap_serialize___ns1__PreserveCounts(soap, p), 0) || protocolv2::soap_put___ns1__PreserveCounts(soap, p, "-ns1:PreserveCounts", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__PreserveCounts(struct soap *soap, const char *URL, struct __ns1__PreserveCounts const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__PreserveCounts(soap, p), 0) || protocolv2::soap_put___ns1__PreserveCounts(soap, p, "-ns1:PreserveCounts", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__PreserveCounts(struct soap *soap, const char *URL, struct __ns1__PreserveCounts const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__PreserveCounts(soap, p), 0) || protocolv2::soap_put___ns1__PreserveCounts(soap, p, "-ns1:PreserveCounts", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__PreserveCounts(struct soap *soap, const char *URL, struct __ns1__PreserveCounts const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__PreserveCounts(soap, p), 0) || protocolv2::soap_put___ns1__PreserveCounts(soap, p, "-ns1:PreserveCounts", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__PreserveCounts * SOAP_FMAC4 soap_get___ns1__PreserveCounts(struct soap*, struct __ns1__PreserveCounts *, const char*, const char*);

inline int soap_read___ns1__PreserveCounts(struct soap *soap, struct __ns1__PreserveCounts *p)
{
	if (p)
	{	protocolv2::soap_default___ns1__PreserveCounts(soap, p);
		if (soap_begin_recv(soap) || protocolv2::soap_get___ns1__PreserveCounts(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__PreserveCounts(struct soap *soap, const char *URL, struct __ns1__PreserveCounts *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read___ns1__PreserveCounts(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__PreserveCounts(struct soap *soap, struct __ns1__PreserveCounts *p)
{
	if (protocolv2::soap_read___ns1__PreserveCounts(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2___ns1__CountsByArticle_DEFINED
#define SOAP_TYPE_protocolv2___ns1__CountsByArticle_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CountsByArticle(struct soap*, struct __ns1__CountsByArticle *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CountsByArticle(struct soap*, const struct __ns1__CountsByArticle *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CountsByArticle(struct soap*, const char*, int, const struct __ns1__CountsByArticle *, const char*);
SOAP_FMAC3 struct __ns1__CountsByArticle * SOAP_FMAC4 soap_in___ns1__CountsByArticle(struct soap*, const char*, struct __ns1__CountsByArticle *, const char*);
SOAP_FMAC1 struct __ns1__CountsByArticle * SOAP_FMAC2 soap_instantiate___ns1__CountsByArticle(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__CountsByArticle * soap_new___ns1__CountsByArticle(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate___ns1__CountsByArticle(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__CountsByArticle * soap_new_req___ns1__CountsByArticle(
	struct soap *soap)
{
	struct __ns1__CountsByArticle *_p = protocolv2::soap_new___ns1__CountsByArticle(soap);
	if (_p)
	{	protocolv2::soap_default___ns1__CountsByArticle(soap, _p);
	}
	return _p;
}

inline struct __ns1__CountsByArticle * soap_new_set___ns1__CountsByArticle(
	struct soap *soap,
	_ns1__CountsByArticle *ns1__CountsByArticle)
{
	struct __ns1__CountsByArticle *_p = protocolv2::soap_new___ns1__CountsByArticle(soap);
	if (_p)
	{	protocolv2::soap_default___ns1__CountsByArticle(soap, _p);
		_p->ns1__CountsByArticle = ns1__CountsByArticle;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CountsByArticle(struct soap*, const struct __ns1__CountsByArticle *, const char*, const char*);

inline int soap_write___ns1__CountsByArticle(struct soap *soap, struct __ns1__CountsByArticle const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (protocolv2::soap_serialize___ns1__CountsByArticle(soap, p), 0) || protocolv2::soap_put___ns1__CountsByArticle(soap, p, "-ns1:CountsByArticle", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__CountsByArticle(struct soap *soap, const char *URL, struct __ns1__CountsByArticle const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__CountsByArticle(soap, p), 0) || protocolv2::soap_put___ns1__CountsByArticle(soap, p, "-ns1:CountsByArticle", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__CountsByArticle(struct soap *soap, const char *URL, struct __ns1__CountsByArticle const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__CountsByArticle(soap, p), 0) || protocolv2::soap_put___ns1__CountsByArticle(soap, p, "-ns1:CountsByArticle", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__CountsByArticle(struct soap *soap, const char *URL, struct __ns1__CountsByArticle const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__CountsByArticle(soap, p), 0) || protocolv2::soap_put___ns1__CountsByArticle(soap, p, "-ns1:CountsByArticle", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__CountsByArticle * SOAP_FMAC4 soap_get___ns1__CountsByArticle(struct soap*, struct __ns1__CountsByArticle *, const char*, const char*);

inline int soap_read___ns1__CountsByArticle(struct soap *soap, struct __ns1__CountsByArticle *p)
{
	if (p)
	{	protocolv2::soap_default___ns1__CountsByArticle(soap, p);
		if (soap_begin_recv(soap) || protocolv2::soap_get___ns1__CountsByArticle(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__CountsByArticle(struct soap *soap, const char *URL, struct __ns1__CountsByArticle *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read___ns1__CountsByArticle(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__CountsByArticle(struct soap *soap, struct __ns1__CountsByArticle *p)
{
	if (protocolv2::soap_read___ns1__CountsByArticle(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2___ns1__Counts_DEFINED
#define SOAP_TYPE_protocolv2___ns1__Counts_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Counts(struct soap*, struct __ns1__Counts *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Counts(struct soap*, const struct __ns1__Counts *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Counts(struct soap*, const char*, int, const struct __ns1__Counts *, const char*);
SOAP_FMAC3 struct __ns1__Counts * SOAP_FMAC4 soap_in___ns1__Counts(struct soap*, const char*, struct __ns1__Counts *, const char*);
SOAP_FMAC1 struct __ns1__Counts * SOAP_FMAC2 soap_instantiate___ns1__Counts(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Counts * soap_new___ns1__Counts(struct soap *soap, int n = -1)
{
	return protocolv2::soap_instantiate___ns1__Counts(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__Counts * soap_new_req___ns1__Counts(
	struct soap *soap)
{
	struct __ns1__Counts *_p = protocolv2::soap_new___ns1__Counts(soap);
	if (_p)
	{	protocolv2::soap_default___ns1__Counts(soap, _p);
	}
	return _p;
}

inline struct __ns1__Counts * soap_new_set___ns1__Counts(
	struct soap *soap,
	_ns1__Counts *ns1__Counts)
{
	struct __ns1__Counts *_p = protocolv2::soap_new___ns1__Counts(soap);
	if (_p)
	{	protocolv2::soap_default___ns1__Counts(soap, _p);
		_p->ns1__Counts = ns1__Counts;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Counts(struct soap*, const struct __ns1__Counts *, const char*, const char*);

inline int soap_write___ns1__Counts(struct soap *soap, struct __ns1__Counts const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (protocolv2::soap_serialize___ns1__Counts(soap, p), 0) || protocolv2::soap_put___ns1__Counts(soap, p, "-ns1:Counts", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__Counts(struct soap *soap, const char *URL, struct __ns1__Counts const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__Counts(soap, p), 0) || protocolv2::soap_put___ns1__Counts(soap, p, "-ns1:Counts", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__Counts(struct soap *soap, const char *URL, struct __ns1__Counts const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__Counts(soap, p), 0) || protocolv2::soap_put___ns1__Counts(soap, p, "-ns1:Counts", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__Counts(struct soap *soap, const char *URL, struct __ns1__Counts const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (protocolv2::soap_serialize___ns1__Counts(soap, p), 0) || protocolv2::soap_put___ns1__Counts(soap, p, "-ns1:Counts", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__Counts * SOAP_FMAC4 soap_get___ns1__Counts(struct soap*, struct __ns1__Counts *, const char*, const char*);

inline int soap_read___ns1__Counts(struct soap *soap, struct __ns1__Counts *p)
{
	if (p)
	{	protocolv2::soap_default___ns1__Counts(soap, p);
		if (soap_begin_recv(soap) || protocolv2::soap_get___ns1__Counts(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__Counts(struct soap *soap, const char *URL, struct __ns1__Counts *p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read___ns1__Counts(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__Counts(struct soap *soap, struct __ns1__Counts *p)
{
	if (protocolv2::soap_read___ns1__Counts(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_protocolv2_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_protocolv2_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_protocolv2_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_protocolv2_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_protocolv2_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_protocolv2_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_protocolv2_PointerTo_ns1__GetLastRequestDate_DEFINED
#define SOAP_TYPE_protocolv2_PointerTo_ns1__GetLastRequestDate_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetLastRequestDate(struct soap*, _ns1__GetLastRequestDate *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetLastRequestDate(struct soap*, const char *, int, _ns1__GetLastRequestDate *const*, const char *);
SOAP_FMAC3 _ns1__GetLastRequestDate ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetLastRequestDate(struct soap*, const char*, _ns1__GetLastRequestDate **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetLastRequestDate(struct soap*, _ns1__GetLastRequestDate *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetLastRequestDate ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetLastRequestDate(struct soap*, _ns1__GetLastRequestDate **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_protocolv2_PointerTo_ns1__AddSamples_DEFINED
#define SOAP_TYPE_protocolv2_PointerTo_ns1__AddSamples_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__AddSamples(struct soap*, _ns1__AddSamples *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__AddSamples(struct soap*, const char *, int, _ns1__AddSamples *const*, const char *);
SOAP_FMAC3 _ns1__AddSamples ** SOAP_FMAC4 soap_in_PointerTo_ns1__AddSamples(struct soap*, const char*, _ns1__AddSamples **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__AddSamples(struct soap*, _ns1__AddSamples *const*, const char*, const char*);
SOAP_FMAC3 _ns1__AddSamples ** SOAP_FMAC4 soap_get_PointerTo_ns1__AddSamples(struct soap*, _ns1__AddSamples **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_protocolv2_PointerTo_ns1__AddEjectedMolds_DEFINED
#define SOAP_TYPE_protocolv2_PointerTo_ns1__AddEjectedMolds_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__AddEjectedMolds(struct soap*, _ns1__AddEjectedMolds *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__AddEjectedMolds(struct soap*, const char *, int, _ns1__AddEjectedMolds *const*, const char *);
SOAP_FMAC3 _ns1__AddEjectedMolds ** SOAP_FMAC4 soap_in_PointerTo_ns1__AddEjectedMolds(struct soap*, const char*, _ns1__AddEjectedMolds **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__AddEjectedMolds(struct soap*, _ns1__AddEjectedMolds *const*, const char*, const char*);
SOAP_FMAC3 _ns1__AddEjectedMolds ** SOAP_FMAC4 soap_get_PointerTo_ns1__AddEjectedMolds(struct soap*, _ns1__AddEjectedMolds **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_protocolv2_PointerTo_ns1__AddMountedMolds_DEFINED
#define SOAP_TYPE_protocolv2_PointerTo_ns1__AddMountedMolds_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__AddMountedMolds(struct soap*, _ns1__AddMountedMolds *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__AddMountedMolds(struct soap*, const char *, int, _ns1__AddMountedMolds *const*, const char *);
SOAP_FMAC3 _ns1__AddMountedMolds ** SOAP_FMAC4 soap_in_PointerTo_ns1__AddMountedMolds(struct soap*, const char*, _ns1__AddMountedMolds **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__AddMountedMolds(struct soap*, _ns1__AddMountedMolds *const*, const char*, const char*);
SOAP_FMAC3 _ns1__AddMountedMolds ** SOAP_FMAC4 soap_get_PointerTo_ns1__AddMountedMolds(struct soap*, _ns1__AddMountedMolds **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_protocolv2_PointerTo_ns1__Samples_DEFINED
#define SOAP_TYPE_protocolv2_PointerTo_ns1__Samples_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Samples(struct soap*, _ns1__Samples *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Samples(struct soap*, const char *, int, _ns1__Samples *const*, const char *);
SOAP_FMAC3 _ns1__Samples ** SOAP_FMAC4 soap_in_PointerTo_ns1__Samples(struct soap*, const char*, _ns1__Samples **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Samples(struct soap*, _ns1__Samples *const*, const char*, const char*);
SOAP_FMAC3 _ns1__Samples ** SOAP_FMAC4 soap_get_PointerTo_ns1__Samples(struct soap*, _ns1__Samples **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_protocolv2_PointerTo_ns1__Alarms_DEFINED
#define SOAP_TYPE_protocolv2_PointerTo_ns1__Alarms_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Alarms(struct soap*, _ns1__Alarms *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Alarms(struct soap*, const char *, int, _ns1__Alarms *const*, const char *);
SOAP_FMAC3 _ns1__Alarms ** SOAP_FMAC4 soap_in_PointerTo_ns1__Alarms(struct soap*, const char*, _ns1__Alarms **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Alarms(struct soap*, _ns1__Alarms *const*, const char*, const char*);
SOAP_FMAC3 _ns1__Alarms ** SOAP_FMAC4 soap_get_PointerTo_ns1__Alarms(struct soap*, _ns1__Alarms **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_protocolv2_PointerTo_ns1__Measures_DEFINED
#define SOAP_TYPE_protocolv2_PointerTo_ns1__Measures_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Measures(struct soap*, _ns1__Measures *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Measures(struct soap*, const char *, int, _ns1__Measures *const*, const char *);
SOAP_FMAC3 _ns1__Measures ** SOAP_FMAC4 soap_in_PointerTo_ns1__Measures(struct soap*, const char*, _ns1__Measures **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Measures(struct soap*, _ns1__Measures *const*, const char*, const char*);
SOAP_FMAC3 _ns1__Measures ** SOAP_FMAC4 soap_get_PointerTo_ns1__Measures(struct soap*, _ns1__Measures **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_protocolv2_PointerTo_ns1__ReadenMolds_DEFINED
#define SOAP_TYPE_protocolv2_PointerTo_ns1__ReadenMolds_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ReadenMolds(struct soap*, _ns1__ReadenMolds *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ReadenMolds(struct soap*, const char *, int, _ns1__ReadenMolds *const*, const char *);
SOAP_FMAC3 _ns1__ReadenMolds ** SOAP_FMAC4 soap_in_PointerTo_ns1__ReadenMolds(struct soap*, const char*, _ns1__ReadenMolds **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ReadenMolds(struct soap*, _ns1__ReadenMolds *const*, const char*, const char*);
SOAP_FMAC3 _ns1__ReadenMolds ** SOAP_FMAC4 soap_get_PointerTo_ns1__ReadenMolds(struct soap*, _ns1__ReadenMolds **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_protocolv2_PointerTo_ns1__EjectedMolds_DEFINED
#define SOAP_TYPE_protocolv2_PointerTo_ns1__EjectedMolds_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__EjectedMolds(struct soap*, _ns1__EjectedMolds *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__EjectedMolds(struct soap*, const char *, int, _ns1__EjectedMolds *const*, const char *);
SOAP_FMAC3 _ns1__EjectedMolds ** SOAP_FMAC4 soap_in_PointerTo_ns1__EjectedMolds(struct soap*, const char*, _ns1__EjectedMolds **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__EjectedMolds(struct soap*, _ns1__EjectedMolds *const*, const char*, const char*);
SOAP_FMAC3 _ns1__EjectedMolds ** SOAP_FMAC4 soap_get_PointerTo_ns1__EjectedMolds(struct soap*, _ns1__EjectedMolds **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_protocolv2_PointerTo_ns1__MountedMolds_DEFINED
#define SOAP_TYPE_protocolv2_PointerTo_ns1__MountedMolds_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__MountedMolds(struct soap*, _ns1__MountedMolds *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__MountedMolds(struct soap*, const char *, int, _ns1__MountedMolds *const*, const char *);
SOAP_FMAC3 _ns1__MountedMolds ** SOAP_FMAC4 soap_in_PointerTo_ns1__MountedMolds(struct soap*, const char*, _ns1__MountedMolds **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__MountedMolds(struct soap*, _ns1__MountedMolds *const*, const char*, const char*);
SOAP_FMAC3 _ns1__MountedMolds ** SOAP_FMAC4 soap_get_PointerTo_ns1__MountedMolds(struct soap*, _ns1__MountedMolds **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_protocolv2_PointerTo_ns1__GetUpdatedLastRequestDate_DEFINED
#define SOAP_TYPE_protocolv2_PointerTo_ns1__GetUpdatedLastRequestDate_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetUpdatedLastRequestDate(struct soap*, _ns1__GetUpdatedLastRequestDate *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetUpdatedLastRequestDate(struct soap*, const char *, int, _ns1__GetUpdatedLastRequestDate *const*, const char *);
SOAP_FMAC3 _ns1__GetUpdatedLastRequestDate ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetUpdatedLastRequestDate(struct soap*, const char*, _ns1__GetUpdatedLastRequestDate **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetUpdatedLastRequestDate(struct soap*, _ns1__GetUpdatedLastRequestDate *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetUpdatedLastRequestDate ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetUpdatedLastRequestDate(struct soap*, _ns1__GetUpdatedLastRequestDate **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_protocolv2_PointerTo_ns1__PreserveCounts_DEFINED
#define SOAP_TYPE_protocolv2_PointerTo_ns1__PreserveCounts_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__PreserveCounts(struct soap*, _ns1__PreserveCounts *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__PreserveCounts(struct soap*, const char *, int, _ns1__PreserveCounts *const*, const char *);
SOAP_FMAC3 _ns1__PreserveCounts ** SOAP_FMAC4 soap_in_PointerTo_ns1__PreserveCounts(struct soap*, const char*, _ns1__PreserveCounts **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__PreserveCounts(struct soap*, _ns1__PreserveCounts *const*, const char*, const char*);
SOAP_FMAC3 _ns1__PreserveCounts ** SOAP_FMAC4 soap_get_PointerTo_ns1__PreserveCounts(struct soap*, _ns1__PreserveCounts **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_protocolv2_PointerTo_ns1__CountsByArticle_DEFINED
#define SOAP_TYPE_protocolv2_PointerTo_ns1__CountsByArticle_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CountsByArticle(struct soap*, _ns1__CountsByArticle *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CountsByArticle(struct soap*, const char *, int, _ns1__CountsByArticle *const*, const char *);
SOAP_FMAC3 _ns1__CountsByArticle ** SOAP_FMAC4 soap_in_PointerTo_ns1__CountsByArticle(struct soap*, const char*, _ns1__CountsByArticle **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CountsByArticle(struct soap*, _ns1__CountsByArticle *const*, const char*, const char*);
SOAP_FMAC3 _ns1__CountsByArticle ** SOAP_FMAC4 soap_get_PointerTo_ns1__CountsByArticle(struct soap*, _ns1__CountsByArticle **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_protocolv2_PointerTo_ns1__Counts_DEFINED
#define SOAP_TYPE_protocolv2_PointerTo_ns1__Counts_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Counts(struct soap*, _ns1__Counts *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Counts(struct soap*, const char *, int, _ns1__Counts *const*, const char *);
SOAP_FMAC3 _ns1__Counts ** SOAP_FMAC4 soap_in_PointerTo_ns1__Counts(struct soap*, const char*, _ns1__Counts **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Counts(struct soap*, _ns1__Counts *const*, const char*, const char*);
SOAP_FMAC3 _ns1__Counts ** SOAP_FMAC4 soap_get_PointerTo_ns1__Counts(struct soap*, _ns1__Counts **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_protocolv2_PointerToPointerTons1__CCompteurMouleCapteur_DEFINED
#define SOAP_TYPE_protocolv2_PointerToPointerTons1__CCompteurMouleCapteur_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__CCompteurMouleCapteur(struct soap*, ns1__CCompteurMouleCapteur **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__CCompteurMouleCapteur(struct soap*, const char *, int, ns1__CCompteurMouleCapteur **const*, const char *);
SOAP_FMAC3 ns1__CCompteurMouleCapteur *** SOAP_FMAC4 soap_in_PointerToPointerTons1__CCompteurMouleCapteur(struct soap*, const char*, ns1__CCompteurMouleCapteur ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__CCompteurMouleCapteur(struct soap*, ns1__CCompteurMouleCapteur **const*, const char*, const char*);
SOAP_FMAC3 ns1__CCompteurMouleCapteur *** SOAP_FMAC4 soap_get_PointerToPointerTons1__CCompteurMouleCapteur(struct soap*, ns1__CCompteurMouleCapteur ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_protocolv2_PointerTons1__CCompteurMouleCapteur_DEFINED
#define SOAP_TYPE_protocolv2_PointerTons1__CCompteurMouleCapteur_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CCompteurMouleCapteur(struct soap*, ns1__CCompteurMouleCapteur *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CCompteurMouleCapteur(struct soap*, const char *, int, ns1__CCompteurMouleCapteur *const*, const char *);
SOAP_FMAC3 ns1__CCompteurMouleCapteur ** SOAP_FMAC4 soap_in_PointerTons1__CCompteurMouleCapteur(struct soap*, const char*, ns1__CCompteurMouleCapteur **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CCompteurMouleCapteur(struct soap*, ns1__CCompteurMouleCapteur *const*, const char*, const char*);
SOAP_FMAC3 ns1__CCompteurMouleCapteur ** SOAP_FMAC4 soap_get_PointerTons1__CCompteurMouleCapteur(struct soap*, ns1__CCompteurMouleCapteur **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_protocolv2_PointerToPointerTons1__CCounter_DEFINED
#define SOAP_TYPE_protocolv2_PointerToPointerTons1__CCounter_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__CCounter(struct soap*, ns1__CCounter **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__CCounter(struct soap*, const char *, int, ns1__CCounter **const*, const char *);
SOAP_FMAC3 ns1__CCounter *** SOAP_FMAC4 soap_in_PointerToPointerTons1__CCounter(struct soap*, const char*, ns1__CCounter ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__CCounter(struct soap*, ns1__CCounter **const*, const char*, const char*);
SOAP_FMAC3 ns1__CCounter *** SOAP_FMAC4 soap_get_PointerToPointerTons1__CCounter(struct soap*, ns1__CCounter ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_protocolv2_PointerTons1__CCounter_DEFINED
#define SOAP_TYPE_protocolv2_PointerTons1__CCounter_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CCounter(struct soap*, ns1__CCounter *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CCounter(struct soap*, const char *, int, ns1__CCounter *const*, const char *);
SOAP_FMAC3 ns1__CCounter ** SOAP_FMAC4 soap_in_PointerTons1__CCounter(struct soap*, const char*, ns1__CCounter **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CCounter(struct soap*, ns1__CCounter *const*, const char*, const char*);
SOAP_FMAC3 ns1__CCounter ** SOAP_FMAC4 soap_get_PointerTons1__CCounter(struct soap*, ns1__CCounter **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_protocolv2_PointerTons1__ArrayOfCCompteurArticle_DEFINED
#define SOAP_TYPE_protocolv2_PointerTons1__ArrayOfCCompteurArticle_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfCCompteurArticle(struct soap*, ns1__ArrayOfCCompteurArticle *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfCCompteurArticle(struct soap*, const char *, int, ns1__ArrayOfCCompteurArticle *const*, const char *);
SOAP_FMAC3 ns1__ArrayOfCCompteurArticle ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfCCompteurArticle(struct soap*, const char*, ns1__ArrayOfCCompteurArticle **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfCCompteurArticle(struct soap*, ns1__ArrayOfCCompteurArticle *const*, const char*, const char*);
SOAP_FMAC3 ns1__ArrayOfCCompteurArticle ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfCCompteurArticle(struct soap*, ns1__ArrayOfCCompteurArticle **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_protocolv2_PointerTons1__CountsByArticleResult_DEFINED
#define SOAP_TYPE_protocolv2_PointerTons1__CountsByArticleResult_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CountsByArticleResult(struct soap*, ns1__CountsByArticleResult *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CountsByArticleResult(struct soap*, const char *, int, ns1__CountsByArticleResult *const*, const char *);
SOAP_FMAC3 ns1__CountsByArticleResult ** SOAP_FMAC4 soap_in_PointerTons1__CountsByArticleResult(struct soap*, const char*, ns1__CountsByArticleResult **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CountsByArticleResult(struct soap*, ns1__CountsByArticleResult *const*, const char*, const char*);
SOAP_FMAC3 ns1__CountsByArticleResult ** SOAP_FMAC4 soap_get_PointerTons1__CountsByArticleResult(struct soap*, ns1__CountsByArticleResult **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_protocolv2_PointerToPointerTons1__CCompteurArticle_DEFINED
#define SOAP_TYPE_protocolv2_PointerToPointerTons1__CCompteurArticle_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__CCompteurArticle(struct soap*, ns1__CCompteurArticle **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__CCompteurArticle(struct soap*, const char *, int, ns1__CCompteurArticle **const*, const char *);
SOAP_FMAC3 ns1__CCompteurArticle *** SOAP_FMAC4 soap_in_PointerToPointerTons1__CCompteurArticle(struct soap*, const char*, ns1__CCompteurArticle ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__CCompteurArticle(struct soap*, ns1__CCompteurArticle **const*, const char*, const char*);
SOAP_FMAC3 ns1__CCompteurArticle *** SOAP_FMAC4 soap_get_PointerToPointerTons1__CCompteurArticle(struct soap*, ns1__CCompteurArticle ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_protocolv2_PointerTons1__CCompteurArticle_DEFINED
#define SOAP_TYPE_protocolv2_PointerTons1__CCompteurArticle_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CCompteurArticle(struct soap*, ns1__CCompteurArticle *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CCompteurArticle(struct soap*, const char *, int, ns1__CCompteurArticle *const*, const char *);
SOAP_FMAC3 ns1__CCompteurArticle ** SOAP_FMAC4 soap_in_PointerTons1__CCompteurArticle(struct soap*, const char*, ns1__CCompteurArticle **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CCompteurArticle(struct soap*, ns1__CCompteurArticle *const*, const char*, const char*);
SOAP_FMAC3 ns1__CCompteurArticle ** SOAP_FMAC4 soap_get_PointerTons1__CCompteurArticle(struct soap*, ns1__CCompteurArticle **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_protocolv2_PointerToint_DEFINED
#define SOAP_TYPE_protocolv2_PointerToint_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap*, int *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap*, const char *, int, int *const*, const char *);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap*, const char*, int **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap*, int *const*, const char*, const char*);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap*, int **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_protocolv2_PointerTons1__CCompteurMachine_DEFINED
#define SOAP_TYPE_protocolv2_PointerTons1__CCompteurMachine_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CCompteurMachine(struct soap*, ns1__CCompteurMachine *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CCompteurMachine(struct soap*, const char *, int, ns1__CCompteurMachine *const*, const char *);
SOAP_FMAC3 ns1__CCompteurMachine ** SOAP_FMAC4 soap_in_PointerTons1__CCompteurMachine(struct soap*, const char*, ns1__CCompteurMachine **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CCompteurMachine(struct soap*, ns1__CCompteurMachine *const*, const char*, const char*);
SOAP_FMAC3 ns1__CCompteurMachine ** SOAP_FMAC4 soap_get_PointerTons1__CCompteurMachine(struct soap*, ns1__CCompteurMachine **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_protocolv2__QName_DEFINED
#define SOAP_TYPE_protocolv2__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || protocolv2::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || protocolv2::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || protocolv2::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || protocolv2::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || protocolv2::soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (protocolv2::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_protocolv2__XML_DEFINED
#define SOAP_TYPE_protocolv2__XML_DEFINED
#endif

#ifndef SOAP_TYPE_protocolv2_string_DEFINED
#define SOAP_TYPE_protocolv2_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || protocolv2::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || protocolv2::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || protocolv2::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || protocolv2::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || protocolv2::soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || protocolv2::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (protocolv2::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

} // namespace protocolv2


#endif

/* End of protocolv2H.h */
