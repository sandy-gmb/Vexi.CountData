/* protocolv2Stub.h
   Generated by gSOAP 2.8.111 for cwebservice.h

gSOAP XML Web services tools
Copyright (C) 2000-2021, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#define SOAP_NAMESPACE_OF_ns1	"http://www.tiama-inspection.com/"

#ifndef protocolv2Stub_H
#define protocolv2Stub_H
#ifndef WITH_NONAMESPACES
#define WITH_NONAMESPACES
#endif
#ifndef WITH_NOGLOBAL
#define WITH_NOGLOBAL
#endif
#include "stdsoap2.h"
#if GSOAP_VERSION != 208111
# error "GSOAP VERSION 208111 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


namespace protocolv2 {

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes, Structs and Unions                                                *
 *                                                                            *
\******************************************************************************/

class ns1__CountsByArticleResult;	/* cwebservice.h:150 */
class ns1__CCompteurMoule;	/* cwebservice.h:154 */
class ns1__CCounter;	/* cwebservice.h:158 */
class ns1__ArrayOfCCompteurArticle;	/* cwebservice.h:162 */
class _ns1__Counts;	/* cwebservice.h:164 */
class _ns1__CountsResponse;	/* cwebservice.h:166 */
class _ns1__CountsByArticle;	/* cwebservice.h:168 */
class _ns1__CountsByArticleResponse;	/* cwebservice.h:170 */
class _ns1__PreserveCounts;	/* cwebservice.h:172 */
class _ns1__PreserveCountsResponse;	/* cwebservice.h:174 */
class _ns1__GetUpdatedLastRequestDate;	/* cwebservice.h:176 */
class _ns1__GetUpdatedLastRequestDateResponse;	/* cwebservice.h:178 */
class _ns1__MountedMolds;	/* cwebservice.h:180 */
class _ns1__MountedMoldsResponse;	/* cwebservice.h:182 */
class _ns1__EjectedMolds;	/* cwebservice.h:184 */
class _ns1__EjectedMoldsResponse;	/* cwebservice.h:186 */
class _ns1__ReadenMolds;	/* cwebservice.h:188 */
class _ns1__ReadenMoldsResponse;	/* cwebservice.h:190 */
class _ns1__Measures;	/* cwebservice.h:192 */
class _ns1__MeasuresResponse;	/* cwebservice.h:194 */
class _ns1__Alarms;	/* cwebservice.h:196 */
class _ns1__AlarmsResponse;	/* cwebservice.h:198 */
class _ns1__Samples;	/* cwebservice.h:200 */
class _ns1__SamplesResponse;	/* cwebservice.h:202 */
class _ns1__AddMountedMolds;	/* cwebservice.h:204 */
class _ns1__AddMountedMoldsResponse;	/* cwebservice.h:206 */
class _ns1__AddEjectedMolds;	/* cwebservice.h:208 */
class _ns1__AddEjectedMoldsResponse;	/* cwebservice.h:210 */
class _ns1__AddSamples;	/* cwebservice.h:212 */
class _ns1__AddSamplesResponse;	/* cwebservice.h:214 */
class _ns1__GetLastRequestDate;	/* cwebservice.h:216 */
class _ns1__GetLastRequestDateResponse;	/* cwebservice.h:218 */
class ns1__CCompteurMachine;	/* cwebservice.h:152 */
class ns1__CCompteurMouleCapteur;	/* cwebservice.h:156 */
class ns1__CCompteurArticle;	/* cwebservice.h:160 */
struct __ns1__Counts;	/* cwebservice.h:1222 */
struct __ns1__CountsByArticle;	/* cwebservice.h:1292 */
struct __ns1__PreserveCounts;	/* cwebservice.h:1362 */
struct __ns1__GetUpdatedLastRequestDate;	/* cwebservice.h:1432 */
struct __ns1__MountedMolds;	/* cwebservice.h:1502 */
struct __ns1__EjectedMolds;	/* cwebservice.h:1572 */
struct __ns1__ReadenMolds;	/* cwebservice.h:1642 */
struct __ns1__Measures;	/* cwebservice.h:1712 */
struct __ns1__Alarms;	/* cwebservice.h:1782 */
struct __ns1__Samples;	/* cwebservice.h:1852 */
struct __ns1__AddMountedMolds;	/* cwebservice.h:1922 */
struct __ns1__AddEjectedMolds;	/* cwebservice.h:1992 */
struct __ns1__AddSamples;	/* cwebservice.h:2062 */
struct __ns1__GetLastRequestDate;	/* cwebservice.h:2132 */
struct __ns1__Counts_;	/* cwebservice.h:2202 */
struct __ns1__CountsByArticle_;	/* cwebservice.h:2272 */
struct __ns1__PreserveCounts_;	/* cwebservice.h:2342 */
struct __ns1__GetUpdatedLastRequestDate_;	/* cwebservice.h:2412 */
struct __ns1__MountedMolds_;	/* cwebservice.h:2482 */
struct __ns1__EjectedMolds_;	/* cwebservice.h:2552 */
struct __ns1__ReadenMolds_;	/* cwebservice.h:2622 */
struct __ns1__Measures_;	/* cwebservice.h:2692 */
struct __ns1__Alarms_;	/* cwebservice.h:2762 */
struct __ns1__Samples_;	/* cwebservice.h:2832 */
struct __ns1__AddMountedMolds_;	/* cwebservice.h:2902 */
struct __ns1__AddEjectedMolds_;	/* cwebservice.h:2972 */
struct __ns1__AddSamples_;	/* cwebservice.h:3042 */
struct __ns1__GetLastRequestDate_;	/* cwebservice.h:3112 */

/* cwebservice.h:150 */
#ifndef SOAP_TYPE_protocolv2_ns1__CountsByArticleResult
#define SOAP_TYPE_protocolv2_ns1__CountsByArticleResult (-1125695494)
/* complex XML schema type 'ns1:CountsByArticleResult': */
class SOAP_CMAC ns1__CountsByArticleResult {
      public:
        /// Optional element 'ns1:Machine' of XML schema type 'ns1:CCompteurMachine'
        ns1__CCompteurMachine *Machine;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_protocolv2_ns1__CountsByArticleResult
        virtual long soap_type(void) const { return SOAP_TYPE_protocolv2_ns1__CountsByArticleResult; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__CountsByArticleResult, default initialized and not managed by a soap context
        virtual ns1__CountsByArticleResult *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns1__CountsByArticleResult); }
      public:
        /// Constructor with default initializations
        ns1__CountsByArticleResult() : Machine(), soap() { }
        virtual ~ns1__CountsByArticleResult() { }
        /// Friend allocator used by soap_new_ns1__CountsByArticleResult(struct soap*, int)
        friend SOAP_FMAC1 ns1__CountsByArticleResult * SOAP_FMAC2 soap_instantiate_ns1__CountsByArticleResult(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:154 */
#ifndef SOAP_TYPE_protocolv2_ns1__CCompteurMoule
#define SOAP_TYPE_protocolv2_ns1__CCompteurMoule (-1125695496)
/* complex XML schema type 'ns1:CCompteurMoule': */
class SOAP_CMAC ns1__CCompteurMoule {
      public:
        /// Optional element 'ns1:Inspected' of XML schema type 'xsd:int'
        int *Inspected;
        /// Required element 'ns1:Rejects' of XML schema type 'xsd:int'
        int Rejects;
        /// Required element 'ns1:Defects' of XML schema type 'xsd:int'
        int Defects;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_protocolv2_ns1__CCompteurMoule
        virtual long soap_type(void) const { return SOAP_TYPE_protocolv2_ns1__CCompteurMoule; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__CCompteurMoule, default initialized and not managed by a soap context
        virtual ns1__CCompteurMoule *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns1__CCompteurMoule); }
      public:
        /// Constructor with default initializations
        ns1__CCompteurMoule() : Inspected(), Rejects(), Defects(), soap() { }
        virtual ~ns1__CCompteurMoule() { }
        /// Friend allocator used by soap_new_ns1__CCompteurMoule(struct soap*, int)
        friend SOAP_FMAC1 ns1__CCompteurMoule * SOAP_FMAC2 soap_instantiate_ns1__CCompteurMoule(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:158 */
#ifndef SOAP_TYPE_protocolv2_ns1__CCounter
#define SOAP_TYPE_protocolv2_ns1__CCounter (-1125695498)
/* complex XML schema type 'ns1:CCounter': */
class SOAP_CMAC ns1__CCounter {
      public:
        /// Required attribute 'id' of XML schema type 'xsd:int'
        int id;
        /// Required attribute 'nb' of XML schema type 'xsd:int'
        int nb;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_protocolv2_ns1__CCounter
        virtual long soap_type(void) const { return SOAP_TYPE_protocolv2_ns1__CCounter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__CCounter, default initialized and not managed by a soap context
        virtual ns1__CCounter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns1__CCounter); }
      public:
        /// Constructor with default initializations
        ns1__CCounter() : id(), nb(), soap() { }
        virtual ~ns1__CCounter() { }
        /// Friend allocator used by soap_new_ns1__CCounter(struct soap*, int)
        friend SOAP_FMAC1 ns1__CCounter * SOAP_FMAC2 soap_instantiate_ns1__CCounter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:162 */
#ifndef SOAP_TYPE_protocolv2_ns1__ArrayOfCCompteurArticle
#define SOAP_TYPE_protocolv2_ns1__ArrayOfCCompteurArticle (-1125695500)
/* complex XML schema type 'ns1:ArrayOfCCompteurArticle': */
class SOAP_CMAC ns1__ArrayOfCCompteurArticle {
      public:
        /// Sequence of elements 'ns1:Article' of XML schema type 'ns1:CCompteurArticle' stored in dynamic array Article of length __sizeArticle
        int __sizeArticle;
        ns1__CCompteurArticle **Article;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_protocolv2_ns1__ArrayOfCCompteurArticle
        virtual long soap_type(void) const { return SOAP_TYPE_protocolv2_ns1__ArrayOfCCompteurArticle; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__ArrayOfCCompteurArticle, default initialized and not managed by a soap context
        virtual ns1__ArrayOfCCompteurArticle *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns1__ArrayOfCCompteurArticle); }
      public:
        /// Constructor with default initializations
        ns1__ArrayOfCCompteurArticle() : __sizeArticle(), Article(), soap() { }
        virtual ~ns1__ArrayOfCCompteurArticle() { }
        /// Friend allocator used by soap_new_ns1__ArrayOfCCompteurArticle(struct soap*, int)
        friend SOAP_FMAC1 ns1__ArrayOfCCompteurArticle * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfCCompteurArticle(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:164 */
#ifndef SOAP_TYPE_protocolv2__ns1__Counts
#define SOAP_TYPE_protocolv2__ns1__Counts (-1125695501)
/* complex XML schema type 'ns1:Counts': */
class SOAP_CMAC _ns1__Counts {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_protocolv2__ns1__Counts
        virtual long soap_type(void) const { return SOAP_TYPE_protocolv2__ns1__Counts; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__Counts, default initialized and not managed by a soap context
        virtual _ns1__Counts *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__Counts); }
      public:
        /// Constructor with default initializations
        _ns1__Counts() : soap() { }
        virtual ~_ns1__Counts() { }
        /// Friend allocator used by soap_new__ns1__Counts(struct soap*, int)
        friend SOAP_FMAC1 _ns1__Counts * SOAP_FMAC2 soap_instantiate__ns1__Counts(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:166 */
#ifndef SOAP_TYPE_protocolv2__ns1__CountsResponse
#define SOAP_TYPE_protocolv2__ns1__CountsResponse (-1125695502)
/* complex XML schema type 'ns1:CountsResponse': */
class SOAP_CMAC _ns1__CountsResponse {
      public:
        /// Optional element 'ns1:CountsResult' of XML schema type 'xsd:string'
        char *CountsResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_protocolv2__ns1__CountsResponse
        virtual long soap_type(void) const { return SOAP_TYPE_protocolv2__ns1__CountsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__CountsResponse, default initialized and not managed by a soap context
        virtual _ns1__CountsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__CountsResponse); }
      public:
        /// Constructor with default initializations
        _ns1__CountsResponse() : CountsResult(), soap() { }
        virtual ~_ns1__CountsResponse() { }
        /// Friend allocator used by soap_new__ns1__CountsResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__CountsResponse * SOAP_FMAC2 soap_instantiate__ns1__CountsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:168 */
#ifndef SOAP_TYPE_protocolv2__ns1__CountsByArticle
#define SOAP_TYPE_protocolv2__ns1__CountsByArticle (-1125695503)
/* complex XML schema type 'ns1:CountsByArticle': */
class SOAP_CMAC _ns1__CountsByArticle {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_protocolv2__ns1__CountsByArticle
        virtual long soap_type(void) const { return SOAP_TYPE_protocolv2__ns1__CountsByArticle; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__CountsByArticle, default initialized and not managed by a soap context
        virtual _ns1__CountsByArticle *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__CountsByArticle); }
      public:
        /// Constructor with default initializations
        _ns1__CountsByArticle() : soap() { }
        virtual ~_ns1__CountsByArticle() { }
        /// Friend allocator used by soap_new__ns1__CountsByArticle(struct soap*, int)
        friend SOAP_FMAC1 _ns1__CountsByArticle * SOAP_FMAC2 soap_instantiate__ns1__CountsByArticle(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:170 */
#ifndef SOAP_TYPE_protocolv2__ns1__CountsByArticleResponse
#define SOAP_TYPE_protocolv2__ns1__CountsByArticleResponse (-1125695504)
/* complex XML schema type 'ns1:CountsByArticleResponse': */
class SOAP_CMAC _ns1__CountsByArticleResponse {
      public:
        /// Optional element 'ns1:CountsByArticleResult' of XML schema type 'ns1:CountsByArticleResult'
        ns1__CountsByArticleResult *CountsByArticleResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_protocolv2__ns1__CountsByArticleResponse
        virtual long soap_type(void) const { return SOAP_TYPE_protocolv2__ns1__CountsByArticleResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__CountsByArticleResponse, default initialized and not managed by a soap context
        virtual _ns1__CountsByArticleResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__CountsByArticleResponse); }
      public:
        /// Constructor with default initializations
        _ns1__CountsByArticleResponse() : CountsByArticleResult(), soap() { }
        virtual ~_ns1__CountsByArticleResponse() { }
        /// Friend allocator used by soap_new__ns1__CountsByArticleResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__CountsByArticleResponse * SOAP_FMAC2 soap_instantiate__ns1__CountsByArticleResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:172 */
#ifndef SOAP_TYPE_protocolv2__ns1__PreserveCounts
#define SOAP_TYPE_protocolv2__ns1__PreserveCounts (-1125695505)
/* complex XML schema type 'ns1:PreserveCounts': */
class SOAP_CMAC _ns1__PreserveCounts {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_protocolv2__ns1__PreserveCounts
        virtual long soap_type(void) const { return SOAP_TYPE_protocolv2__ns1__PreserveCounts; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__PreserveCounts, default initialized and not managed by a soap context
        virtual _ns1__PreserveCounts *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__PreserveCounts); }
      public:
        /// Constructor with default initializations
        _ns1__PreserveCounts() : soap() { }
        virtual ~_ns1__PreserveCounts() { }
        /// Friend allocator used by soap_new__ns1__PreserveCounts(struct soap*, int)
        friend SOAP_FMAC1 _ns1__PreserveCounts * SOAP_FMAC2 soap_instantiate__ns1__PreserveCounts(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:174 */
#ifndef SOAP_TYPE_protocolv2__ns1__PreserveCountsResponse
#define SOAP_TYPE_protocolv2__ns1__PreserveCountsResponse (-1125695506)
/* complex XML schema type 'ns1:PreserveCountsResponse': */
class SOAP_CMAC _ns1__PreserveCountsResponse {
      public:
        /// Optional element 'ns1:PreserveCountsResult' of XML schema type 'xsd:string'
        char *PreserveCountsResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_protocolv2__ns1__PreserveCountsResponse
        virtual long soap_type(void) const { return SOAP_TYPE_protocolv2__ns1__PreserveCountsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__PreserveCountsResponse, default initialized and not managed by a soap context
        virtual _ns1__PreserveCountsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__PreserveCountsResponse); }
      public:
        /// Constructor with default initializations
        _ns1__PreserveCountsResponse() : PreserveCountsResult(), soap() { }
        virtual ~_ns1__PreserveCountsResponse() { }
        /// Friend allocator used by soap_new__ns1__PreserveCountsResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__PreserveCountsResponse * SOAP_FMAC2 soap_instantiate__ns1__PreserveCountsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:176 */
#ifndef SOAP_TYPE_protocolv2__ns1__GetUpdatedLastRequestDate
#define SOAP_TYPE_protocolv2__ns1__GetUpdatedLastRequestDate (-1125695507)
/* complex XML schema type 'ns1:GetUpdatedLastRequestDate': */
class SOAP_CMAC _ns1__GetUpdatedLastRequestDate {
      public:
        /// Required element 'ns1:functionNumber' of XML schema type 'xsd:int'
        int functionNumber;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_protocolv2__ns1__GetUpdatedLastRequestDate
        virtual long soap_type(void) const { return SOAP_TYPE_protocolv2__ns1__GetUpdatedLastRequestDate; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetUpdatedLastRequestDate, default initialized and not managed by a soap context
        virtual _ns1__GetUpdatedLastRequestDate *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetUpdatedLastRequestDate); }
      public:
        /// Constructor with default initializations
        _ns1__GetUpdatedLastRequestDate() : functionNumber(), soap() { }
        virtual ~_ns1__GetUpdatedLastRequestDate() { }
        /// Friend allocator used by soap_new__ns1__GetUpdatedLastRequestDate(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetUpdatedLastRequestDate * SOAP_FMAC2 soap_instantiate__ns1__GetUpdatedLastRequestDate(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:178 */
#ifndef SOAP_TYPE_protocolv2__ns1__GetUpdatedLastRequestDateResponse
#define SOAP_TYPE_protocolv2__ns1__GetUpdatedLastRequestDateResponse (-1125695508)
/* complex XML schema type 'ns1:GetUpdatedLastRequestDateResponse': */
class SOAP_CMAC _ns1__GetUpdatedLastRequestDateResponse {
      public:
        /// Required element 'ns1:GetUpdatedLastRequestDateResult' of XML schema type 'xsd:dateTime'
        time_t GetUpdatedLastRequestDateResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_protocolv2__ns1__GetUpdatedLastRequestDateResponse
        virtual long soap_type(void) const { return SOAP_TYPE_protocolv2__ns1__GetUpdatedLastRequestDateResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetUpdatedLastRequestDateResponse, default initialized and not managed by a soap context
        virtual _ns1__GetUpdatedLastRequestDateResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetUpdatedLastRequestDateResponse); }
      public:
        /// Constructor with default initializations
        _ns1__GetUpdatedLastRequestDateResponse() : GetUpdatedLastRequestDateResult(), soap() { }
        virtual ~_ns1__GetUpdatedLastRequestDateResponse() { }
        /// Friend allocator used by soap_new__ns1__GetUpdatedLastRequestDateResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetUpdatedLastRequestDateResponse * SOAP_FMAC2 soap_instantiate__ns1__GetUpdatedLastRequestDateResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:180 */
#ifndef SOAP_TYPE_protocolv2__ns1__MountedMolds
#define SOAP_TYPE_protocolv2__ns1__MountedMolds (-1125695509)
/* complex XML schema type 'ns1:MountedMolds': */
class SOAP_CMAC _ns1__MountedMolds {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_protocolv2__ns1__MountedMolds
        virtual long soap_type(void) const { return SOAP_TYPE_protocolv2__ns1__MountedMolds; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__MountedMolds, default initialized and not managed by a soap context
        virtual _ns1__MountedMolds *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__MountedMolds); }
      public:
        /// Constructor with default initializations
        _ns1__MountedMolds() : soap() { }
        virtual ~_ns1__MountedMolds() { }
        /// Friend allocator used by soap_new__ns1__MountedMolds(struct soap*, int)
        friend SOAP_FMAC1 _ns1__MountedMolds * SOAP_FMAC2 soap_instantiate__ns1__MountedMolds(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:182 */
#ifndef SOAP_TYPE_protocolv2__ns1__MountedMoldsResponse
#define SOAP_TYPE_protocolv2__ns1__MountedMoldsResponse (-1125695510)
/* complex XML schema type 'ns1:MountedMoldsResponse': */
class SOAP_CMAC _ns1__MountedMoldsResponse {
      public:
        /// Optional element 'ns1:MountedMoldsResult' of XML schema type 'xsd:string'
        char *MountedMoldsResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_protocolv2__ns1__MountedMoldsResponse
        virtual long soap_type(void) const { return SOAP_TYPE_protocolv2__ns1__MountedMoldsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__MountedMoldsResponse, default initialized and not managed by a soap context
        virtual _ns1__MountedMoldsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__MountedMoldsResponse); }
      public:
        /// Constructor with default initializations
        _ns1__MountedMoldsResponse() : MountedMoldsResult(), soap() { }
        virtual ~_ns1__MountedMoldsResponse() { }
        /// Friend allocator used by soap_new__ns1__MountedMoldsResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__MountedMoldsResponse * SOAP_FMAC2 soap_instantiate__ns1__MountedMoldsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:184 */
#ifndef SOAP_TYPE_protocolv2__ns1__EjectedMolds
#define SOAP_TYPE_protocolv2__ns1__EjectedMolds (-1125695511)
/* complex XML schema type 'ns1:EjectedMolds': */
class SOAP_CMAC _ns1__EjectedMolds {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_protocolv2__ns1__EjectedMolds
        virtual long soap_type(void) const { return SOAP_TYPE_protocolv2__ns1__EjectedMolds; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__EjectedMolds, default initialized and not managed by a soap context
        virtual _ns1__EjectedMolds *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__EjectedMolds); }
      public:
        /// Constructor with default initializations
        _ns1__EjectedMolds() : soap() { }
        virtual ~_ns1__EjectedMolds() { }
        /// Friend allocator used by soap_new__ns1__EjectedMolds(struct soap*, int)
        friend SOAP_FMAC1 _ns1__EjectedMolds * SOAP_FMAC2 soap_instantiate__ns1__EjectedMolds(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:186 */
#ifndef SOAP_TYPE_protocolv2__ns1__EjectedMoldsResponse
#define SOAP_TYPE_protocolv2__ns1__EjectedMoldsResponse (-1125695512)
/* complex XML schema type 'ns1:EjectedMoldsResponse': */
class SOAP_CMAC _ns1__EjectedMoldsResponse {
      public:
        /// Optional element 'ns1:EjectedMoldsResult' of XML schema type 'xsd:string'
        char *EjectedMoldsResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_protocolv2__ns1__EjectedMoldsResponse
        virtual long soap_type(void) const { return SOAP_TYPE_protocolv2__ns1__EjectedMoldsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__EjectedMoldsResponse, default initialized and not managed by a soap context
        virtual _ns1__EjectedMoldsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__EjectedMoldsResponse); }
      public:
        /// Constructor with default initializations
        _ns1__EjectedMoldsResponse() : EjectedMoldsResult(), soap() { }
        virtual ~_ns1__EjectedMoldsResponse() { }
        /// Friend allocator used by soap_new__ns1__EjectedMoldsResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__EjectedMoldsResponse * SOAP_FMAC2 soap_instantiate__ns1__EjectedMoldsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:188 */
#ifndef SOAP_TYPE_protocolv2__ns1__ReadenMolds
#define SOAP_TYPE_protocolv2__ns1__ReadenMolds (-1125695513)
/* complex XML schema type 'ns1:ReadenMolds': */
class SOAP_CMAC _ns1__ReadenMolds {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_protocolv2__ns1__ReadenMolds
        virtual long soap_type(void) const { return SOAP_TYPE_protocolv2__ns1__ReadenMolds; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__ReadenMolds, default initialized and not managed by a soap context
        virtual _ns1__ReadenMolds *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__ReadenMolds); }
      public:
        /// Constructor with default initializations
        _ns1__ReadenMolds() : soap() { }
        virtual ~_ns1__ReadenMolds() { }
        /// Friend allocator used by soap_new__ns1__ReadenMolds(struct soap*, int)
        friend SOAP_FMAC1 _ns1__ReadenMolds * SOAP_FMAC2 soap_instantiate__ns1__ReadenMolds(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:190 */
#ifndef SOAP_TYPE_protocolv2__ns1__ReadenMoldsResponse
#define SOAP_TYPE_protocolv2__ns1__ReadenMoldsResponse (-1125695514)
/* complex XML schema type 'ns1:ReadenMoldsResponse': */
class SOAP_CMAC _ns1__ReadenMoldsResponse {
      public:
        /// Optional element 'ns1:ReadenMoldsResult' of XML schema type 'xsd:string'
        char *ReadenMoldsResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_protocolv2__ns1__ReadenMoldsResponse
        virtual long soap_type(void) const { return SOAP_TYPE_protocolv2__ns1__ReadenMoldsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__ReadenMoldsResponse, default initialized and not managed by a soap context
        virtual _ns1__ReadenMoldsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__ReadenMoldsResponse); }
      public:
        /// Constructor with default initializations
        _ns1__ReadenMoldsResponse() : ReadenMoldsResult(), soap() { }
        virtual ~_ns1__ReadenMoldsResponse() { }
        /// Friend allocator used by soap_new__ns1__ReadenMoldsResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__ReadenMoldsResponse * SOAP_FMAC2 soap_instantiate__ns1__ReadenMoldsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:192 */
#ifndef SOAP_TYPE_protocolv2__ns1__Measures
#define SOAP_TYPE_protocolv2__ns1__Measures (-1125695515)
/* complex XML schema type 'ns1:Measures': */
class SOAP_CMAC _ns1__Measures {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_protocolv2__ns1__Measures
        virtual long soap_type(void) const { return SOAP_TYPE_protocolv2__ns1__Measures; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__Measures, default initialized and not managed by a soap context
        virtual _ns1__Measures *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__Measures); }
      public:
        /// Constructor with default initializations
        _ns1__Measures() : soap() { }
        virtual ~_ns1__Measures() { }
        /// Friend allocator used by soap_new__ns1__Measures(struct soap*, int)
        friend SOAP_FMAC1 _ns1__Measures * SOAP_FMAC2 soap_instantiate__ns1__Measures(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:194 */
#ifndef SOAP_TYPE_protocolv2__ns1__MeasuresResponse
#define SOAP_TYPE_protocolv2__ns1__MeasuresResponse (-1125695516)
/* complex XML schema type 'ns1:MeasuresResponse': */
class SOAP_CMAC _ns1__MeasuresResponse {
      public:
        /// Optional element 'ns1:MeasuresResult' of XML schema type 'xsd:string'
        char *MeasuresResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_protocolv2__ns1__MeasuresResponse
        virtual long soap_type(void) const { return SOAP_TYPE_protocolv2__ns1__MeasuresResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__MeasuresResponse, default initialized and not managed by a soap context
        virtual _ns1__MeasuresResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__MeasuresResponse); }
      public:
        /// Constructor with default initializations
        _ns1__MeasuresResponse() : MeasuresResult(), soap() { }
        virtual ~_ns1__MeasuresResponse() { }
        /// Friend allocator used by soap_new__ns1__MeasuresResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__MeasuresResponse * SOAP_FMAC2 soap_instantiate__ns1__MeasuresResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:196 */
#ifndef SOAP_TYPE_protocolv2__ns1__Alarms
#define SOAP_TYPE_protocolv2__ns1__Alarms (-1125695517)
/* complex XML schema type 'ns1:Alarms': */
class SOAP_CMAC _ns1__Alarms {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_protocolv2__ns1__Alarms
        virtual long soap_type(void) const { return SOAP_TYPE_protocolv2__ns1__Alarms; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__Alarms, default initialized and not managed by a soap context
        virtual _ns1__Alarms *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__Alarms); }
      public:
        /// Constructor with default initializations
        _ns1__Alarms() : soap() { }
        virtual ~_ns1__Alarms() { }
        /// Friend allocator used by soap_new__ns1__Alarms(struct soap*, int)
        friend SOAP_FMAC1 _ns1__Alarms * SOAP_FMAC2 soap_instantiate__ns1__Alarms(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:198 */
#ifndef SOAP_TYPE_protocolv2__ns1__AlarmsResponse
#define SOAP_TYPE_protocolv2__ns1__AlarmsResponse (-1125695518)
/* complex XML schema type 'ns1:AlarmsResponse': */
class SOAP_CMAC _ns1__AlarmsResponse {
      public:
        /// Optional element 'ns1:AlarmsResult' of XML schema type 'xsd:string'
        char *AlarmsResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_protocolv2__ns1__AlarmsResponse
        virtual long soap_type(void) const { return SOAP_TYPE_protocolv2__ns1__AlarmsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__AlarmsResponse, default initialized and not managed by a soap context
        virtual _ns1__AlarmsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__AlarmsResponse); }
      public:
        /// Constructor with default initializations
        _ns1__AlarmsResponse() : AlarmsResult(), soap() { }
        virtual ~_ns1__AlarmsResponse() { }
        /// Friend allocator used by soap_new__ns1__AlarmsResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__AlarmsResponse * SOAP_FMAC2 soap_instantiate__ns1__AlarmsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:200 */
#ifndef SOAP_TYPE_protocolv2__ns1__Samples
#define SOAP_TYPE_protocolv2__ns1__Samples (-1125695519)
/* complex XML schema type 'ns1:Samples': */
class SOAP_CMAC _ns1__Samples {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_protocolv2__ns1__Samples
        virtual long soap_type(void) const { return SOAP_TYPE_protocolv2__ns1__Samples; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__Samples, default initialized and not managed by a soap context
        virtual _ns1__Samples *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__Samples); }
      public:
        /// Constructor with default initializations
        _ns1__Samples() : soap() { }
        virtual ~_ns1__Samples() { }
        /// Friend allocator used by soap_new__ns1__Samples(struct soap*, int)
        friend SOAP_FMAC1 _ns1__Samples * SOAP_FMAC2 soap_instantiate__ns1__Samples(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:202 */
#ifndef SOAP_TYPE_protocolv2__ns1__SamplesResponse
#define SOAP_TYPE_protocolv2__ns1__SamplesResponse (-1125695520)
/* complex XML schema type 'ns1:SamplesResponse': */
class SOAP_CMAC _ns1__SamplesResponse {
      public:
        /// Optional element 'ns1:SamplesResult' of XML schema type 'xsd:string'
        char *SamplesResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_protocolv2__ns1__SamplesResponse
        virtual long soap_type(void) const { return SOAP_TYPE_protocolv2__ns1__SamplesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__SamplesResponse, default initialized and not managed by a soap context
        virtual _ns1__SamplesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__SamplesResponse); }
      public:
        /// Constructor with default initializations
        _ns1__SamplesResponse() : SamplesResult(), soap() { }
        virtual ~_ns1__SamplesResponse() { }
        /// Friend allocator used by soap_new__ns1__SamplesResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__SamplesResponse * SOAP_FMAC2 soap_instantiate__ns1__SamplesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:204 */
#ifndef SOAP_TYPE_protocolv2__ns1__AddMountedMolds
#define SOAP_TYPE_protocolv2__ns1__AddMountedMolds (-1125695521)
/* complex XML schema type 'ns1:AddMountedMolds': */
class SOAP_CMAC _ns1__AddMountedMolds {
      public:
        /// Optional element 'ns1:mountedMolds' of XML schema type 'xsd:string'
        char *mountedMolds;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_protocolv2__ns1__AddMountedMolds
        virtual long soap_type(void) const { return SOAP_TYPE_protocolv2__ns1__AddMountedMolds; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__AddMountedMolds, default initialized and not managed by a soap context
        virtual _ns1__AddMountedMolds *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__AddMountedMolds); }
      public:
        /// Constructor with default initializations
        _ns1__AddMountedMolds() : mountedMolds(), soap() { }
        virtual ~_ns1__AddMountedMolds() { }
        /// Friend allocator used by soap_new__ns1__AddMountedMolds(struct soap*, int)
        friend SOAP_FMAC1 _ns1__AddMountedMolds * SOAP_FMAC2 soap_instantiate__ns1__AddMountedMolds(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:206 */
#ifndef SOAP_TYPE_protocolv2__ns1__AddMountedMoldsResponse
#define SOAP_TYPE_protocolv2__ns1__AddMountedMoldsResponse (-1125695522)
/* complex XML schema type 'ns1:AddMountedMoldsResponse': */
class SOAP_CMAC _ns1__AddMountedMoldsResponse {
      public:
        /// Optional element 'ns1:AddMountedMoldsResult' of XML schema type 'xsd:string'
        char *AddMountedMoldsResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_protocolv2__ns1__AddMountedMoldsResponse
        virtual long soap_type(void) const { return SOAP_TYPE_protocolv2__ns1__AddMountedMoldsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__AddMountedMoldsResponse, default initialized and not managed by a soap context
        virtual _ns1__AddMountedMoldsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__AddMountedMoldsResponse); }
      public:
        /// Constructor with default initializations
        _ns1__AddMountedMoldsResponse() : AddMountedMoldsResult(), soap() { }
        virtual ~_ns1__AddMountedMoldsResponse() { }
        /// Friend allocator used by soap_new__ns1__AddMountedMoldsResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__AddMountedMoldsResponse * SOAP_FMAC2 soap_instantiate__ns1__AddMountedMoldsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:208 */
#ifndef SOAP_TYPE_protocolv2__ns1__AddEjectedMolds
#define SOAP_TYPE_protocolv2__ns1__AddEjectedMolds (-1125695523)
/* complex XML schema type 'ns1:AddEjectedMolds': */
class SOAP_CMAC _ns1__AddEjectedMolds {
      public:
        /// Optional element 'ns1:ejectedMolds' of XML schema type 'xsd:string'
        char *ejectedMolds;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_protocolv2__ns1__AddEjectedMolds
        virtual long soap_type(void) const { return SOAP_TYPE_protocolv2__ns1__AddEjectedMolds; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__AddEjectedMolds, default initialized and not managed by a soap context
        virtual _ns1__AddEjectedMolds *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__AddEjectedMolds); }
      public:
        /// Constructor with default initializations
        _ns1__AddEjectedMolds() : ejectedMolds(), soap() { }
        virtual ~_ns1__AddEjectedMolds() { }
        /// Friend allocator used by soap_new__ns1__AddEjectedMolds(struct soap*, int)
        friend SOAP_FMAC1 _ns1__AddEjectedMolds * SOAP_FMAC2 soap_instantiate__ns1__AddEjectedMolds(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:210 */
#ifndef SOAP_TYPE_protocolv2__ns1__AddEjectedMoldsResponse
#define SOAP_TYPE_protocolv2__ns1__AddEjectedMoldsResponse (-1125695524)
/* complex XML schema type 'ns1:AddEjectedMoldsResponse': */
class SOAP_CMAC _ns1__AddEjectedMoldsResponse {
      public:
        /// Optional element 'ns1:AddEjectedMoldsResult' of XML schema type 'xsd:string'
        char *AddEjectedMoldsResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_protocolv2__ns1__AddEjectedMoldsResponse
        virtual long soap_type(void) const { return SOAP_TYPE_protocolv2__ns1__AddEjectedMoldsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__AddEjectedMoldsResponse, default initialized and not managed by a soap context
        virtual _ns1__AddEjectedMoldsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__AddEjectedMoldsResponse); }
      public:
        /// Constructor with default initializations
        _ns1__AddEjectedMoldsResponse() : AddEjectedMoldsResult(), soap() { }
        virtual ~_ns1__AddEjectedMoldsResponse() { }
        /// Friend allocator used by soap_new__ns1__AddEjectedMoldsResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__AddEjectedMoldsResponse * SOAP_FMAC2 soap_instantiate__ns1__AddEjectedMoldsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:212 */
#ifndef SOAP_TYPE_protocolv2__ns1__AddSamples
#define SOAP_TYPE_protocolv2__ns1__AddSamples (-1125695525)
/* complex XML schema type 'ns1:AddSamples': */
class SOAP_CMAC _ns1__AddSamples {
      public:
        /// Optional element 'ns1:samples' of XML schema type 'xsd:string'
        char *samples;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_protocolv2__ns1__AddSamples
        virtual long soap_type(void) const { return SOAP_TYPE_protocolv2__ns1__AddSamples; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__AddSamples, default initialized and not managed by a soap context
        virtual _ns1__AddSamples *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__AddSamples); }
      public:
        /// Constructor with default initializations
        _ns1__AddSamples() : samples(), soap() { }
        virtual ~_ns1__AddSamples() { }
        /// Friend allocator used by soap_new__ns1__AddSamples(struct soap*, int)
        friend SOAP_FMAC1 _ns1__AddSamples * SOAP_FMAC2 soap_instantiate__ns1__AddSamples(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:214 */
#ifndef SOAP_TYPE_protocolv2__ns1__AddSamplesResponse
#define SOAP_TYPE_protocolv2__ns1__AddSamplesResponse (-1125695526)
/* complex XML schema type 'ns1:AddSamplesResponse': */
class SOAP_CMAC _ns1__AddSamplesResponse {
      public:
        /// Optional element 'ns1:AddSamplesResult' of XML schema type 'xsd:string'
        char *AddSamplesResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_protocolv2__ns1__AddSamplesResponse
        virtual long soap_type(void) const { return SOAP_TYPE_protocolv2__ns1__AddSamplesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__AddSamplesResponse, default initialized and not managed by a soap context
        virtual _ns1__AddSamplesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__AddSamplesResponse); }
      public:
        /// Constructor with default initializations
        _ns1__AddSamplesResponse() : AddSamplesResult(), soap() { }
        virtual ~_ns1__AddSamplesResponse() { }
        /// Friend allocator used by soap_new__ns1__AddSamplesResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__AddSamplesResponse * SOAP_FMAC2 soap_instantiate__ns1__AddSamplesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:216 */
#ifndef SOAP_TYPE_protocolv2__ns1__GetLastRequestDate
#define SOAP_TYPE_protocolv2__ns1__GetLastRequestDate (-1125695527)
/* complex XML schema type 'ns1:GetLastRequestDate': */
class SOAP_CMAC _ns1__GetLastRequestDate {
      public:
        /// Required element 'ns1:functionNumber' of XML schema type 'xsd:int'
        int functionNumber;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_protocolv2__ns1__GetLastRequestDate
        virtual long soap_type(void) const { return SOAP_TYPE_protocolv2__ns1__GetLastRequestDate; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetLastRequestDate, default initialized and not managed by a soap context
        virtual _ns1__GetLastRequestDate *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetLastRequestDate); }
      public:
        /// Constructor with default initializations
        _ns1__GetLastRequestDate() : functionNumber(), soap() { }
        virtual ~_ns1__GetLastRequestDate() { }
        /// Friend allocator used by soap_new__ns1__GetLastRequestDate(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetLastRequestDate * SOAP_FMAC2 soap_instantiate__ns1__GetLastRequestDate(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:218 */
#ifndef SOAP_TYPE_protocolv2__ns1__GetLastRequestDateResponse
#define SOAP_TYPE_protocolv2__ns1__GetLastRequestDateResponse (-1125695528)
/* complex XML schema type 'ns1:GetLastRequestDateResponse': */
class SOAP_CMAC _ns1__GetLastRequestDateResponse {
      public:
        /// Required element 'ns1:GetLastRequestDateResult' of XML schema type 'xsd:dateTime'
        time_t GetLastRequestDateResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_protocolv2__ns1__GetLastRequestDateResponse
        virtual long soap_type(void) const { return SOAP_TYPE_protocolv2__ns1__GetLastRequestDateResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__GetLastRequestDateResponse, default initialized and not managed by a soap context
        virtual _ns1__GetLastRequestDateResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__GetLastRequestDateResponse); }
      public:
        /// Constructor with default initializations
        _ns1__GetLastRequestDateResponse() : GetLastRequestDateResult(), soap() { }
        virtual ~_ns1__GetLastRequestDateResponse() { }
        /// Friend allocator used by soap_new__ns1__GetLastRequestDateResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__GetLastRequestDateResponse * SOAP_FMAC2 soap_instantiate__ns1__GetLastRequestDateResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:152 */
#ifndef SOAP_TYPE_protocolv2_ns1__CCompteurMachine
#define SOAP_TYPE_protocolv2_ns1__CCompteurMachine (-1125695495)
/* complex XML schema type 'ns1:CCompteurMachine': */
class SOAP_CMAC ns1__CCompteurMachine : public ns1__CCompteurMoule {
      public:
        /// Required element 'ns1:Identified' of XML schema type 'xsd:int'
        int Identified;
        /// Required element 'ns1:Unidentified' of XML schema type 'xsd:int'
        int Unidentified;
        /// Optional element 'ns1:Articles' of XML schema type 'ns1:ArrayOfCCompteurArticle'
        ns1__ArrayOfCCompteurArticle *Articles;
        /// Optional attribute 'Id' of XML schema type 'xsd:string'
        char *Id;
      public:
        /// Return unique type id SOAP_TYPE_protocolv2_ns1__CCompteurMachine
        virtual long soap_type(void) const { return SOAP_TYPE_protocolv2_ns1__CCompteurMachine; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__CCompteurMachine, default initialized and not managed by a soap context
        virtual ns1__CCompteurMachine *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns1__CCompteurMachine); }
      public:
        /// Constructor with default initializations
        ns1__CCompteurMachine() : Identified(), Unidentified(), Articles(), Id() { }
        virtual ~ns1__CCompteurMachine() { }
        /// Friend allocator used by soap_new_ns1__CCompteurMachine(struct soap*, int)
        friend SOAP_FMAC1 ns1__CCompteurMachine * SOAP_FMAC2 soap_instantiate_ns1__CCompteurMachine(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:156 */
#ifndef SOAP_TYPE_protocolv2_ns1__CCompteurMouleCapteur
#define SOAP_TYPE_protocolv2_ns1__CCompteurMouleCapteur (-1125695497)
/* complex XML schema type 'ns1:CCompteurMouleCapteur': */
class SOAP_CMAC ns1__CCompteurMouleCapteur : public ns1__CCompteurMoule {
      public:
        /// Sequence of elements 'ns1:Counter' of XML schema type 'ns1:CCounter' stored in dynamic array Counter of length __sizeCounter
        int __sizeCounter;
        ns1__CCounter **Counter;
        /// Required attribute 'id' of XML schema type 'xsd:int'
        int id;
      public:
        /// Return unique type id SOAP_TYPE_protocolv2_ns1__CCompteurMouleCapteur
        virtual long soap_type(void) const { return SOAP_TYPE_protocolv2_ns1__CCompteurMouleCapteur; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__CCompteurMouleCapteur, default initialized and not managed by a soap context
        virtual ns1__CCompteurMouleCapteur *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns1__CCompteurMouleCapteur); }
      public:
        /// Constructor with default initializations
        ns1__CCompteurMouleCapteur() : __sizeCounter(), Counter(), id() { }
        virtual ~ns1__CCompteurMouleCapteur() { }
        /// Friend allocator used by soap_new_ns1__CCompteurMouleCapteur(struct soap*, int)
        friend SOAP_FMAC1 ns1__CCompteurMouleCapteur * SOAP_FMAC2 soap_instantiate_ns1__CCompteurMouleCapteur(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:160 */
#ifndef SOAP_TYPE_protocolv2_ns1__CCompteurArticle
#define SOAP_TYPE_protocolv2_ns1__CCompteurArticle (-1125695499)
/* complex XML schema type 'ns1:CCompteurArticle': */
class SOAP_CMAC ns1__CCompteurArticle : public ns1__CCompteurMoule {
      public:
        /// Sequence of elements 'ns1:Sensor' of XML schema type 'ns1:CCompteurMouleCapteur' stored in dynamic array Sensor of length __sizeSensor
        int __sizeSensor;
        ns1__CCompteurMouleCapteur **Sensor;
        /// Required attribute 'id' of XML schema type 'xsd:int'
        int id;
      public:
        /// Return unique type id SOAP_TYPE_protocolv2_ns1__CCompteurArticle
        virtual long soap_type(void) const { return SOAP_TYPE_protocolv2_ns1__CCompteurArticle; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__CCompteurArticle, default initialized and not managed by a soap context
        virtual ns1__CCompteurArticle *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns1__CCompteurArticle); }
      public:
        /// Constructor with default initializations
        ns1__CCompteurArticle() : __sizeSensor(), Sensor(), id() { }
        virtual ~ns1__CCompteurArticle() { }
        /// Friend allocator used by soap_new_ns1__CCompteurArticle(struct soap*, int)
        friend SOAP_FMAC1 ns1__CCompteurArticle * SOAP_FMAC2 soap_instantiate_ns1__CCompteurArticle(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:1222 */
#ifndef SOAP_TYPE_protocolv2___ns1__Counts
#define SOAP_TYPE_protocolv2___ns1__Counts (-1125695544)
/* Wrapper: */
struct SOAP_CMAC __ns1__Counts {
      public:
        /** Optional element 'ns1:Counts' of XML schema type 'ns1:Counts' */
        _ns1__Counts *ns1__Counts;
      public:
        /** Return unique type id SOAP_TYPE_protocolv2___ns1__Counts */
        long soap_type() const { return SOAP_TYPE_protocolv2___ns1__Counts; }
        /** Constructor with member initializations */
        __ns1__Counts() : ns1__Counts() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__Counts * SOAP_FMAC2 soap_instantiate___ns1__Counts(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:1292 */
#ifndef SOAP_TYPE_protocolv2___ns1__CountsByArticle
#define SOAP_TYPE_protocolv2___ns1__CountsByArticle (-1125695548)
/* Wrapper: */
struct SOAP_CMAC __ns1__CountsByArticle {
      public:
        /** Optional element 'ns1:CountsByArticle' of XML schema type 'ns1:CountsByArticle' */
        _ns1__CountsByArticle *ns1__CountsByArticle;
      public:
        /** Return unique type id SOAP_TYPE_protocolv2___ns1__CountsByArticle */
        long soap_type() const { return SOAP_TYPE_protocolv2___ns1__CountsByArticle; }
        /** Constructor with member initializations */
        __ns1__CountsByArticle() : ns1__CountsByArticle() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__CountsByArticle * SOAP_FMAC2 soap_instantiate___ns1__CountsByArticle(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:1362 */
#ifndef SOAP_TYPE_protocolv2___ns1__PreserveCounts
#define SOAP_TYPE_protocolv2___ns1__PreserveCounts (-1125695552)
/* Wrapper: */
struct SOAP_CMAC __ns1__PreserveCounts {
      public:
        /** Optional element 'ns1:PreserveCounts' of XML schema type 'ns1:PreserveCounts' */
        _ns1__PreserveCounts *ns1__PreserveCounts;
      public:
        /** Return unique type id SOAP_TYPE_protocolv2___ns1__PreserveCounts */
        long soap_type() const { return SOAP_TYPE_protocolv2___ns1__PreserveCounts; }
        /** Constructor with member initializations */
        __ns1__PreserveCounts() : ns1__PreserveCounts() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__PreserveCounts * SOAP_FMAC2 soap_instantiate___ns1__PreserveCounts(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:1432 */
#ifndef SOAP_TYPE_protocolv2___ns1__GetUpdatedLastRequestDate
#define SOAP_TYPE_protocolv2___ns1__GetUpdatedLastRequestDate (-1125695556)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetUpdatedLastRequestDate {
      public:
        /** Optional element 'ns1:GetUpdatedLastRequestDate' of XML schema type 'ns1:GetUpdatedLastRequestDate' */
        _ns1__GetUpdatedLastRequestDate *ns1__GetUpdatedLastRequestDate;
      public:
        /** Return unique type id SOAP_TYPE_protocolv2___ns1__GetUpdatedLastRequestDate */
        long soap_type() const { return SOAP_TYPE_protocolv2___ns1__GetUpdatedLastRequestDate; }
        /** Constructor with member initializations */
        __ns1__GetUpdatedLastRequestDate() : ns1__GetUpdatedLastRequestDate() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetUpdatedLastRequestDate * SOAP_FMAC2 soap_instantiate___ns1__GetUpdatedLastRequestDate(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:1502 */
#ifndef SOAP_TYPE_protocolv2___ns1__MountedMolds
#define SOAP_TYPE_protocolv2___ns1__MountedMolds (-1125695560)
/* Wrapper: */
struct SOAP_CMAC __ns1__MountedMolds {
      public:
        /** Optional element 'ns1:MountedMolds' of XML schema type 'ns1:MountedMolds' */
        _ns1__MountedMolds *ns1__MountedMolds;
      public:
        /** Return unique type id SOAP_TYPE_protocolv2___ns1__MountedMolds */
        long soap_type() const { return SOAP_TYPE_protocolv2___ns1__MountedMolds; }
        /** Constructor with member initializations */
        __ns1__MountedMolds() : ns1__MountedMolds() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__MountedMolds * SOAP_FMAC2 soap_instantiate___ns1__MountedMolds(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:1572 */
#ifndef SOAP_TYPE_protocolv2___ns1__EjectedMolds
#define SOAP_TYPE_protocolv2___ns1__EjectedMolds (-1125695564)
/* Wrapper: */
struct SOAP_CMAC __ns1__EjectedMolds {
      public:
        /** Optional element 'ns1:EjectedMolds' of XML schema type 'ns1:EjectedMolds' */
        _ns1__EjectedMolds *ns1__EjectedMolds;
      public:
        /** Return unique type id SOAP_TYPE_protocolv2___ns1__EjectedMolds */
        long soap_type() const { return SOAP_TYPE_protocolv2___ns1__EjectedMolds; }
        /** Constructor with member initializations */
        __ns1__EjectedMolds() : ns1__EjectedMolds() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__EjectedMolds * SOAP_FMAC2 soap_instantiate___ns1__EjectedMolds(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:1642 */
#ifndef SOAP_TYPE_protocolv2___ns1__ReadenMolds
#define SOAP_TYPE_protocolv2___ns1__ReadenMolds (-1125695568)
/* Wrapper: */
struct SOAP_CMAC __ns1__ReadenMolds {
      public:
        /** Optional element 'ns1:ReadenMolds' of XML schema type 'ns1:ReadenMolds' */
        _ns1__ReadenMolds *ns1__ReadenMolds;
      public:
        /** Return unique type id SOAP_TYPE_protocolv2___ns1__ReadenMolds */
        long soap_type() const { return SOAP_TYPE_protocolv2___ns1__ReadenMolds; }
        /** Constructor with member initializations */
        __ns1__ReadenMolds() : ns1__ReadenMolds() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__ReadenMolds * SOAP_FMAC2 soap_instantiate___ns1__ReadenMolds(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:1712 */
#ifndef SOAP_TYPE_protocolv2___ns1__Measures
#define SOAP_TYPE_protocolv2___ns1__Measures (-1125695572)
/* Wrapper: */
struct SOAP_CMAC __ns1__Measures {
      public:
        /** Optional element 'ns1:Measures' of XML schema type 'ns1:Measures' */
        _ns1__Measures *ns1__Measures;
      public:
        /** Return unique type id SOAP_TYPE_protocolv2___ns1__Measures */
        long soap_type() const { return SOAP_TYPE_protocolv2___ns1__Measures; }
        /** Constructor with member initializations */
        __ns1__Measures() : ns1__Measures() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__Measures * SOAP_FMAC2 soap_instantiate___ns1__Measures(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:1782 */
#ifndef SOAP_TYPE_protocolv2___ns1__Alarms
#define SOAP_TYPE_protocolv2___ns1__Alarms (-1125695576)
/* Wrapper: */
struct SOAP_CMAC __ns1__Alarms {
      public:
        /** Optional element 'ns1:Alarms' of XML schema type 'ns1:Alarms' */
        _ns1__Alarms *ns1__Alarms;
      public:
        /** Return unique type id SOAP_TYPE_protocolv2___ns1__Alarms */
        long soap_type() const { return SOAP_TYPE_protocolv2___ns1__Alarms; }
        /** Constructor with member initializations */
        __ns1__Alarms() : ns1__Alarms() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__Alarms * SOAP_FMAC2 soap_instantiate___ns1__Alarms(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:1852 */
#ifndef SOAP_TYPE_protocolv2___ns1__Samples
#define SOAP_TYPE_protocolv2___ns1__Samples (-1125695580)
/* Wrapper: */
struct SOAP_CMAC __ns1__Samples {
      public:
        /** Optional element 'ns1:Samples' of XML schema type 'ns1:Samples' */
        _ns1__Samples *ns1__Samples;
      public:
        /** Return unique type id SOAP_TYPE_protocolv2___ns1__Samples */
        long soap_type() const { return SOAP_TYPE_protocolv2___ns1__Samples; }
        /** Constructor with member initializations */
        __ns1__Samples() : ns1__Samples() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__Samples * SOAP_FMAC2 soap_instantiate___ns1__Samples(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:1922 */
#ifndef SOAP_TYPE_protocolv2___ns1__AddMountedMolds
#define SOAP_TYPE_protocolv2___ns1__AddMountedMolds (-1125695584)
/* Wrapper: */
struct SOAP_CMAC __ns1__AddMountedMolds {
      public:
        /** Optional element 'ns1:AddMountedMolds' of XML schema type 'ns1:AddMountedMolds' */
        _ns1__AddMountedMolds *ns1__AddMountedMolds;
      public:
        /** Return unique type id SOAP_TYPE_protocolv2___ns1__AddMountedMolds */
        long soap_type() const { return SOAP_TYPE_protocolv2___ns1__AddMountedMolds; }
        /** Constructor with member initializations */
        __ns1__AddMountedMolds() : ns1__AddMountedMolds() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__AddMountedMolds * SOAP_FMAC2 soap_instantiate___ns1__AddMountedMolds(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:1992 */
#ifndef SOAP_TYPE_protocolv2___ns1__AddEjectedMolds
#define SOAP_TYPE_protocolv2___ns1__AddEjectedMolds (-1125695588)
/* Wrapper: */
struct SOAP_CMAC __ns1__AddEjectedMolds {
      public:
        /** Optional element 'ns1:AddEjectedMolds' of XML schema type 'ns1:AddEjectedMolds' */
        _ns1__AddEjectedMolds *ns1__AddEjectedMolds;
      public:
        /** Return unique type id SOAP_TYPE_protocolv2___ns1__AddEjectedMolds */
        long soap_type() const { return SOAP_TYPE_protocolv2___ns1__AddEjectedMolds; }
        /** Constructor with member initializations */
        __ns1__AddEjectedMolds() : ns1__AddEjectedMolds() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__AddEjectedMolds * SOAP_FMAC2 soap_instantiate___ns1__AddEjectedMolds(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:2062 */
#ifndef SOAP_TYPE_protocolv2___ns1__AddSamples
#define SOAP_TYPE_protocolv2___ns1__AddSamples (-1125695592)
/* Wrapper: */
struct SOAP_CMAC __ns1__AddSamples {
      public:
        /** Optional element 'ns1:AddSamples' of XML schema type 'ns1:AddSamples' */
        _ns1__AddSamples *ns1__AddSamples;
      public:
        /** Return unique type id SOAP_TYPE_protocolv2___ns1__AddSamples */
        long soap_type() const { return SOAP_TYPE_protocolv2___ns1__AddSamples; }
        /** Constructor with member initializations */
        __ns1__AddSamples() : ns1__AddSamples() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__AddSamples * SOAP_FMAC2 soap_instantiate___ns1__AddSamples(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:2132 */
#ifndef SOAP_TYPE_protocolv2___ns1__GetLastRequestDate
#define SOAP_TYPE_protocolv2___ns1__GetLastRequestDate (-1125695596)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetLastRequestDate {
      public:
        /** Optional element 'ns1:GetLastRequestDate' of XML schema type 'ns1:GetLastRequestDate' */
        _ns1__GetLastRequestDate *ns1__GetLastRequestDate;
      public:
        /** Return unique type id SOAP_TYPE_protocolv2___ns1__GetLastRequestDate */
        long soap_type() const { return SOAP_TYPE_protocolv2___ns1__GetLastRequestDate; }
        /** Constructor with member initializations */
        __ns1__GetLastRequestDate() : ns1__GetLastRequestDate() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetLastRequestDate * SOAP_FMAC2 soap_instantiate___ns1__GetLastRequestDate(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:2202 */
#ifndef SOAP_TYPE_protocolv2___ns1__Counts_
#define SOAP_TYPE_protocolv2___ns1__Counts_ (-1125695598)
/* Wrapper: */
struct SOAP_CMAC __ns1__Counts_ {
      public:
        /** Optional element 'ns1:Counts' of XML schema type 'ns1:Counts' */
        _ns1__Counts *ns1__Counts;
      public:
        /** Return unique type id SOAP_TYPE_protocolv2___ns1__Counts_ */
        long soap_type() const { return SOAP_TYPE_protocolv2___ns1__Counts_; }
        /** Constructor with member initializations */
        __ns1__Counts_() : ns1__Counts() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__Counts_ * SOAP_FMAC2 soap_instantiate___ns1__Counts_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:2272 */
#ifndef SOAP_TYPE_protocolv2___ns1__CountsByArticle_
#define SOAP_TYPE_protocolv2___ns1__CountsByArticle_ (-1125695600)
/* Wrapper: */
struct SOAP_CMAC __ns1__CountsByArticle_ {
      public:
        /** Optional element 'ns1:CountsByArticle' of XML schema type 'ns1:CountsByArticle' */
        _ns1__CountsByArticle *ns1__CountsByArticle;
      public:
        /** Return unique type id SOAP_TYPE_protocolv2___ns1__CountsByArticle_ */
        long soap_type() const { return SOAP_TYPE_protocolv2___ns1__CountsByArticle_; }
        /** Constructor with member initializations */
        __ns1__CountsByArticle_() : ns1__CountsByArticle() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__CountsByArticle_ * SOAP_FMAC2 soap_instantiate___ns1__CountsByArticle_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:2342 */
#ifndef SOAP_TYPE_protocolv2___ns1__PreserveCounts_
#define SOAP_TYPE_protocolv2___ns1__PreserveCounts_ (-1125695602)
/* Wrapper: */
struct SOAP_CMAC __ns1__PreserveCounts_ {
      public:
        /** Optional element 'ns1:PreserveCounts' of XML schema type 'ns1:PreserveCounts' */
        _ns1__PreserveCounts *ns1__PreserveCounts;
      public:
        /** Return unique type id SOAP_TYPE_protocolv2___ns1__PreserveCounts_ */
        long soap_type() const { return SOAP_TYPE_protocolv2___ns1__PreserveCounts_; }
        /** Constructor with member initializations */
        __ns1__PreserveCounts_() : ns1__PreserveCounts() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__PreserveCounts_ * SOAP_FMAC2 soap_instantiate___ns1__PreserveCounts_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:2412 */
#ifndef SOAP_TYPE_protocolv2___ns1__GetUpdatedLastRequestDate_
#define SOAP_TYPE_protocolv2___ns1__GetUpdatedLastRequestDate_ (-1125695604)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetUpdatedLastRequestDate_ {
      public:
        /** Optional element 'ns1:GetUpdatedLastRequestDate' of XML schema type 'ns1:GetUpdatedLastRequestDate' */
        _ns1__GetUpdatedLastRequestDate *ns1__GetUpdatedLastRequestDate;
      public:
        /** Return unique type id SOAP_TYPE_protocolv2___ns1__GetUpdatedLastRequestDate_ */
        long soap_type() const { return SOAP_TYPE_protocolv2___ns1__GetUpdatedLastRequestDate_; }
        /** Constructor with member initializations */
        __ns1__GetUpdatedLastRequestDate_() : ns1__GetUpdatedLastRequestDate() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetUpdatedLastRequestDate_ * SOAP_FMAC2 soap_instantiate___ns1__GetUpdatedLastRequestDate_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:2482 */
#ifndef SOAP_TYPE_protocolv2___ns1__MountedMolds_
#define SOAP_TYPE_protocolv2___ns1__MountedMolds_ (-1125695606)
/* Wrapper: */
struct SOAP_CMAC __ns1__MountedMolds_ {
      public:
        /** Optional element 'ns1:MountedMolds' of XML schema type 'ns1:MountedMolds' */
        _ns1__MountedMolds *ns1__MountedMolds;
      public:
        /** Return unique type id SOAP_TYPE_protocolv2___ns1__MountedMolds_ */
        long soap_type() const { return SOAP_TYPE_protocolv2___ns1__MountedMolds_; }
        /** Constructor with member initializations */
        __ns1__MountedMolds_() : ns1__MountedMolds() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__MountedMolds_ * SOAP_FMAC2 soap_instantiate___ns1__MountedMolds_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:2552 */
#ifndef SOAP_TYPE_protocolv2___ns1__EjectedMolds_
#define SOAP_TYPE_protocolv2___ns1__EjectedMolds_ (-1125695608)
/* Wrapper: */
struct SOAP_CMAC __ns1__EjectedMolds_ {
      public:
        /** Optional element 'ns1:EjectedMolds' of XML schema type 'ns1:EjectedMolds' */
        _ns1__EjectedMolds *ns1__EjectedMolds;
      public:
        /** Return unique type id SOAP_TYPE_protocolv2___ns1__EjectedMolds_ */
        long soap_type() const { return SOAP_TYPE_protocolv2___ns1__EjectedMolds_; }
        /** Constructor with member initializations */
        __ns1__EjectedMolds_() : ns1__EjectedMolds() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__EjectedMolds_ * SOAP_FMAC2 soap_instantiate___ns1__EjectedMolds_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:2622 */
#ifndef SOAP_TYPE_protocolv2___ns1__ReadenMolds_
#define SOAP_TYPE_protocolv2___ns1__ReadenMolds_ (-1125695610)
/* Wrapper: */
struct SOAP_CMAC __ns1__ReadenMolds_ {
      public:
        /** Optional element 'ns1:ReadenMolds' of XML schema type 'ns1:ReadenMolds' */
        _ns1__ReadenMolds *ns1__ReadenMolds;
      public:
        /** Return unique type id SOAP_TYPE_protocolv2___ns1__ReadenMolds_ */
        long soap_type() const { return SOAP_TYPE_protocolv2___ns1__ReadenMolds_; }
        /** Constructor with member initializations */
        __ns1__ReadenMolds_() : ns1__ReadenMolds() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__ReadenMolds_ * SOAP_FMAC2 soap_instantiate___ns1__ReadenMolds_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:2692 */
#ifndef SOAP_TYPE_protocolv2___ns1__Measures_
#define SOAP_TYPE_protocolv2___ns1__Measures_ (-1125695612)
/* Wrapper: */
struct SOAP_CMAC __ns1__Measures_ {
      public:
        /** Optional element 'ns1:Measures' of XML schema type 'ns1:Measures' */
        _ns1__Measures *ns1__Measures;
      public:
        /** Return unique type id SOAP_TYPE_protocolv2___ns1__Measures_ */
        long soap_type() const { return SOAP_TYPE_protocolv2___ns1__Measures_; }
        /** Constructor with member initializations */
        __ns1__Measures_() : ns1__Measures() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__Measures_ * SOAP_FMAC2 soap_instantiate___ns1__Measures_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:2762 */
#ifndef SOAP_TYPE_protocolv2___ns1__Alarms_
#define SOAP_TYPE_protocolv2___ns1__Alarms_ (-1125695614)
/* Wrapper: */
struct SOAP_CMAC __ns1__Alarms_ {
      public:
        /** Optional element 'ns1:Alarms' of XML schema type 'ns1:Alarms' */
        _ns1__Alarms *ns1__Alarms;
      public:
        /** Return unique type id SOAP_TYPE_protocolv2___ns1__Alarms_ */
        long soap_type() const { return SOAP_TYPE_protocolv2___ns1__Alarms_; }
        /** Constructor with member initializations */
        __ns1__Alarms_() : ns1__Alarms() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__Alarms_ * SOAP_FMAC2 soap_instantiate___ns1__Alarms_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:2832 */
#ifndef SOAP_TYPE_protocolv2___ns1__Samples_
#define SOAP_TYPE_protocolv2___ns1__Samples_ (-1125695616)
/* Wrapper: */
struct SOAP_CMAC __ns1__Samples_ {
      public:
        /** Optional element 'ns1:Samples' of XML schema type 'ns1:Samples' */
        _ns1__Samples *ns1__Samples;
      public:
        /** Return unique type id SOAP_TYPE_protocolv2___ns1__Samples_ */
        long soap_type() const { return SOAP_TYPE_protocolv2___ns1__Samples_; }
        /** Constructor with member initializations */
        __ns1__Samples_() : ns1__Samples() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__Samples_ * SOAP_FMAC2 soap_instantiate___ns1__Samples_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:2902 */
#ifndef SOAP_TYPE_protocolv2___ns1__AddMountedMolds_
#define SOAP_TYPE_protocolv2___ns1__AddMountedMolds_ (-1125695618)
/* Wrapper: */
struct SOAP_CMAC __ns1__AddMountedMolds_ {
      public:
        /** Optional element 'ns1:AddMountedMolds' of XML schema type 'ns1:AddMountedMolds' */
        _ns1__AddMountedMolds *ns1__AddMountedMolds;
      public:
        /** Return unique type id SOAP_TYPE_protocolv2___ns1__AddMountedMolds_ */
        long soap_type() const { return SOAP_TYPE_protocolv2___ns1__AddMountedMolds_; }
        /** Constructor with member initializations */
        __ns1__AddMountedMolds_() : ns1__AddMountedMolds() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__AddMountedMolds_ * SOAP_FMAC2 soap_instantiate___ns1__AddMountedMolds_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:2972 */
#ifndef SOAP_TYPE_protocolv2___ns1__AddEjectedMolds_
#define SOAP_TYPE_protocolv2___ns1__AddEjectedMolds_ (-1125695620)
/* Wrapper: */
struct SOAP_CMAC __ns1__AddEjectedMolds_ {
      public:
        /** Optional element 'ns1:AddEjectedMolds' of XML schema type 'ns1:AddEjectedMolds' */
        _ns1__AddEjectedMolds *ns1__AddEjectedMolds;
      public:
        /** Return unique type id SOAP_TYPE_protocolv2___ns1__AddEjectedMolds_ */
        long soap_type() const { return SOAP_TYPE_protocolv2___ns1__AddEjectedMolds_; }
        /** Constructor with member initializations */
        __ns1__AddEjectedMolds_() : ns1__AddEjectedMolds() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__AddEjectedMolds_ * SOAP_FMAC2 soap_instantiate___ns1__AddEjectedMolds_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:3042 */
#ifndef SOAP_TYPE_protocolv2___ns1__AddSamples_
#define SOAP_TYPE_protocolv2___ns1__AddSamples_ (-1125695622)
/* Wrapper: */
struct SOAP_CMAC __ns1__AddSamples_ {
      public:
        /** Optional element 'ns1:AddSamples' of XML schema type 'ns1:AddSamples' */
        _ns1__AddSamples *ns1__AddSamples;
      public:
        /** Return unique type id SOAP_TYPE_protocolv2___ns1__AddSamples_ */
        long soap_type() const { return SOAP_TYPE_protocolv2___ns1__AddSamples_; }
        /** Constructor with member initializations */
        __ns1__AddSamples_() : ns1__AddSamples() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__AddSamples_ * SOAP_FMAC2 soap_instantiate___ns1__AddSamples_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:3112 */
#ifndef SOAP_TYPE_protocolv2___ns1__GetLastRequestDate_
#define SOAP_TYPE_protocolv2___ns1__GetLastRequestDate_ (-1125695624)
/* Wrapper: */
struct SOAP_CMAC __ns1__GetLastRequestDate_ {
      public:
        /** Optional element 'ns1:GetLastRequestDate' of XML schema type 'ns1:GetLastRequestDate' */
        _ns1__GetLastRequestDate *ns1__GetLastRequestDate;
      public:
        /** Return unique type id SOAP_TYPE_protocolv2___ns1__GetLastRequestDate_ */
        long soap_type() const { return SOAP_TYPE_protocolv2___ns1__GetLastRequestDate_; }
        /** Constructor with member initializations */
        __ns1__GetLastRequestDate_() : ns1__GetLastRequestDate() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__GetLastRequestDate_ * SOAP_FMAC2 soap_instantiate___ns1__GetLastRequestDate_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* cwebservice.h:3592 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_protocolv2_SOAP_ENV__Header
#define SOAP_TYPE_protocolv2_SOAP_ENV__Header (-1125695488)
/* SOAP_ENV__Header: */
struct SOAP_CMAC SOAP_ENV__Header {
      public:
        /** Return unique type id SOAP_TYPE_protocolv2_SOAP_ENV__Header */
        long soap_type() const { return SOAP_TYPE_protocolv2_SOAP_ENV__Header; }
        /** Constructor with member initializations */
        SOAP_ENV__Header() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* cwebservice.h:3592 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_protocolv2_SOAP_ENV__Code
#define SOAP_TYPE_protocolv2_SOAP_ENV__Code (-1125695489)
/* Type SOAP_ENV__Code is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* SOAP_ENV__Code: */
struct SOAP_CMAC SOAP_ENV__Code {
      public:
        /** Optional element 'SOAP-ENV:Value' of XML schema type 'xsd:QName' */
        char *SOAP_ENV__Value;
        /** Optional element 'SOAP-ENV:Subcode' of XML schema type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Subcode;
      public:
        /** Return unique type id SOAP_TYPE_protocolv2_SOAP_ENV__Code */
        long soap_type() const { return SOAP_TYPE_protocolv2_SOAP_ENV__Code; }
        /** Constructor with member initializations */
        SOAP_ENV__Code() : SOAP_ENV__Value(), SOAP_ENV__Subcode() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* cwebservice.h:3592 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_protocolv2_SOAP_ENV__Detail
#define SOAP_TYPE_protocolv2_SOAP_ENV__Detail (-1125695491)
/* SOAP_ENV__Detail: */
struct SOAP_CMAC SOAP_ENV__Detail {
      public:
        char *__any;
        /** Any type of element 'fault' assigned to fault with its SOAP_TYPE_<typename> assigned to __type */
        /** Do not create a cyclic data structure through this member unless SOAP encoding or SOAP_XML_GRAPH are used for id-ref serialization */
        int __type;
        void *fault;
      public:
        /** Return unique type id SOAP_TYPE_protocolv2_SOAP_ENV__Detail */
        long soap_type() const { return SOAP_TYPE_protocolv2_SOAP_ENV__Detail; }
        /** Constructor with member initializations */
        SOAP_ENV__Detail() : __any(), __type(), fault() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* cwebservice.h:3592 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_protocolv2_SOAP_ENV__Reason
#define SOAP_TYPE_protocolv2_SOAP_ENV__Reason (-1125695494)
/* SOAP_ENV__Reason: */
struct SOAP_CMAC SOAP_ENV__Reason {
      public:
        /** Optional element 'SOAP-ENV:Text' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Text;
      public:
        /** Return unique type id SOAP_TYPE_protocolv2_SOAP_ENV__Reason */
        long soap_type() const { return SOAP_TYPE_protocolv2_SOAP_ENV__Reason; }
        /** Constructor with member initializations */
        SOAP_ENV__Reason() : SOAP_ENV__Text() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* cwebservice.h:3592 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_protocolv2_SOAP_ENV__Fault
#define SOAP_TYPE_protocolv2_SOAP_ENV__Fault (-1125695495)
/* SOAP_ENV__Fault: */
struct SOAP_CMAC SOAP_ENV__Fault {
      public:
        /** Optional element 'faultcode' of XML schema type 'xsd:QName' */
        char *faultcode;
        /** Optional element 'faultstring' of XML schema type 'xsd:string' */
        char *faultstring;
        /** Optional element 'faultactor' of XML schema type 'xsd:string' */
        char *faultactor;
        /** Optional element 'detail' of XML schema type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *detail;
        /** Optional element 'SOAP-ENV:Code' of XML schema type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Code;
        /** Optional element 'SOAP-ENV:Reason' of XML schema type 'SOAP-ENV:Reason' */
        struct SOAP_ENV__Reason *SOAP_ENV__Reason;
        /** Optional element 'SOAP-ENV:Node' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Node;
        /** Optional element 'SOAP-ENV:Role' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Role;
        /** Optional element 'SOAP-ENV:Detail' of XML schema type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *SOAP_ENV__Detail;
      public:
        /** Return unique type id SOAP_TYPE_protocolv2_SOAP_ENV__Fault */
        long soap_type() const { return SOAP_TYPE_protocolv2_SOAP_ENV__Fault; }
        /** Constructor with member initializations */
        SOAP_ENV__Fault() : faultcode(), faultstring(), faultactor(), detail(), SOAP_ENV__Code(), SOAP_ENV__Reason(), SOAP_ENV__Node(), SOAP_ENV__Role(), SOAP_ENV__Detail() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/


/* (built-in):0 */
#ifndef SOAP_TYPE_protocolv2__XML
#define SOAP_TYPE_protocolv2__XML (-1125695492)

typedef char *_XML;
#endif

/* (built-in):0 */
#ifndef SOAP_TYPE_protocolv2__QName
#define SOAP_TYPE_protocolv2__QName (-1125695493)

typedef char *_QName;
#endif

/******************************************************************************\
 *                                                                            *
 * Serializable Types                                                         *
 *                                                                            *
\******************************************************************************/


/* char has binding name 'byte' for type 'xsd:byte' */
#ifndef SOAP_TYPE_protocolv2_byte
#define SOAP_TYPE_protocolv2_byte (-1125695490)

#endif

/* int has binding name 'int' for type 'xsd:int' */
#ifndef SOAP_TYPE_protocolv2_int
#define SOAP_TYPE_protocolv2_int (-1125695488)

#endif

/* time_t has binding name 'dateTime' for type 'xsd:dateTime' */
#ifndef SOAP_TYPE_protocolv2_dateTime
#define SOAP_TYPE_protocolv2_dateTime (-1125695535)

#endif

/* _ns1__GetLastRequestDateResponse has binding name '_ns1__GetLastRequestDateResponse' for type '' */
#ifndef SOAP_TYPE_protocolv2__ns1__GetLastRequestDateResponse
#define SOAP_TYPE_protocolv2__ns1__GetLastRequestDateResponse (-1125695528)

#endif

/* _ns1__GetLastRequestDate has binding name '_ns1__GetLastRequestDate' for type '' */
#ifndef SOAP_TYPE_protocolv2__ns1__GetLastRequestDate
#define SOAP_TYPE_protocolv2__ns1__GetLastRequestDate (-1125695527)

#endif

/* _ns1__AddSamplesResponse has binding name '_ns1__AddSamplesResponse' for type '' */
#ifndef SOAP_TYPE_protocolv2__ns1__AddSamplesResponse
#define SOAP_TYPE_protocolv2__ns1__AddSamplesResponse (-1125695526)

#endif

/* _ns1__AddSamples has binding name '_ns1__AddSamples' for type '' */
#ifndef SOAP_TYPE_protocolv2__ns1__AddSamples
#define SOAP_TYPE_protocolv2__ns1__AddSamples (-1125695525)

#endif

/* _ns1__AddEjectedMoldsResponse has binding name '_ns1__AddEjectedMoldsResponse' for type '' */
#ifndef SOAP_TYPE_protocolv2__ns1__AddEjectedMoldsResponse
#define SOAP_TYPE_protocolv2__ns1__AddEjectedMoldsResponse (-1125695524)

#endif

/* _ns1__AddEjectedMolds has binding name '_ns1__AddEjectedMolds' for type '' */
#ifndef SOAP_TYPE_protocolv2__ns1__AddEjectedMolds
#define SOAP_TYPE_protocolv2__ns1__AddEjectedMolds (-1125695523)

#endif

/* _ns1__AddMountedMoldsResponse has binding name '_ns1__AddMountedMoldsResponse' for type '' */
#ifndef SOAP_TYPE_protocolv2__ns1__AddMountedMoldsResponse
#define SOAP_TYPE_protocolv2__ns1__AddMountedMoldsResponse (-1125695522)

#endif

/* _ns1__AddMountedMolds has binding name '_ns1__AddMountedMolds' for type '' */
#ifndef SOAP_TYPE_protocolv2__ns1__AddMountedMolds
#define SOAP_TYPE_protocolv2__ns1__AddMountedMolds (-1125695521)

#endif

/* _ns1__SamplesResponse has binding name '_ns1__SamplesResponse' for type '' */
#ifndef SOAP_TYPE_protocolv2__ns1__SamplesResponse
#define SOAP_TYPE_protocolv2__ns1__SamplesResponse (-1125695520)

#endif

/* _ns1__Samples has binding name '_ns1__Samples' for type '' */
#ifndef SOAP_TYPE_protocolv2__ns1__Samples
#define SOAP_TYPE_protocolv2__ns1__Samples (-1125695519)

#endif

/* _ns1__AlarmsResponse has binding name '_ns1__AlarmsResponse' for type '' */
#ifndef SOAP_TYPE_protocolv2__ns1__AlarmsResponse
#define SOAP_TYPE_protocolv2__ns1__AlarmsResponse (-1125695518)

#endif

/* _ns1__Alarms has binding name '_ns1__Alarms' for type '' */
#ifndef SOAP_TYPE_protocolv2__ns1__Alarms
#define SOAP_TYPE_protocolv2__ns1__Alarms (-1125695517)

#endif

/* _ns1__MeasuresResponse has binding name '_ns1__MeasuresResponse' for type '' */
#ifndef SOAP_TYPE_protocolv2__ns1__MeasuresResponse
#define SOAP_TYPE_protocolv2__ns1__MeasuresResponse (-1125695516)

#endif

/* _ns1__Measures has binding name '_ns1__Measures' for type '' */
#ifndef SOAP_TYPE_protocolv2__ns1__Measures
#define SOAP_TYPE_protocolv2__ns1__Measures (-1125695515)

#endif

/* _ns1__ReadenMoldsResponse has binding name '_ns1__ReadenMoldsResponse' for type '' */
#ifndef SOAP_TYPE_protocolv2__ns1__ReadenMoldsResponse
#define SOAP_TYPE_protocolv2__ns1__ReadenMoldsResponse (-1125695514)

#endif

/* _ns1__ReadenMolds has binding name '_ns1__ReadenMolds' for type '' */
#ifndef SOAP_TYPE_protocolv2__ns1__ReadenMolds
#define SOAP_TYPE_protocolv2__ns1__ReadenMolds (-1125695513)

#endif

/* _ns1__EjectedMoldsResponse has binding name '_ns1__EjectedMoldsResponse' for type '' */
#ifndef SOAP_TYPE_protocolv2__ns1__EjectedMoldsResponse
#define SOAP_TYPE_protocolv2__ns1__EjectedMoldsResponse (-1125695512)

#endif

/* _ns1__EjectedMolds has binding name '_ns1__EjectedMolds' for type '' */
#ifndef SOAP_TYPE_protocolv2__ns1__EjectedMolds
#define SOAP_TYPE_protocolv2__ns1__EjectedMolds (-1125695511)

#endif

/* _ns1__MountedMoldsResponse has binding name '_ns1__MountedMoldsResponse' for type '' */
#ifndef SOAP_TYPE_protocolv2__ns1__MountedMoldsResponse
#define SOAP_TYPE_protocolv2__ns1__MountedMoldsResponse (-1125695510)

#endif

/* _ns1__MountedMolds has binding name '_ns1__MountedMolds' for type '' */
#ifndef SOAP_TYPE_protocolv2__ns1__MountedMolds
#define SOAP_TYPE_protocolv2__ns1__MountedMolds (-1125695509)

#endif

/* _ns1__GetUpdatedLastRequestDateResponse has binding name '_ns1__GetUpdatedLastRequestDateResponse' for type '' */
#ifndef SOAP_TYPE_protocolv2__ns1__GetUpdatedLastRequestDateResponse
#define SOAP_TYPE_protocolv2__ns1__GetUpdatedLastRequestDateResponse (-1125695508)

#endif

/* _ns1__GetUpdatedLastRequestDate has binding name '_ns1__GetUpdatedLastRequestDate' for type '' */
#ifndef SOAP_TYPE_protocolv2__ns1__GetUpdatedLastRequestDate
#define SOAP_TYPE_protocolv2__ns1__GetUpdatedLastRequestDate (-1125695507)

#endif

/* _ns1__PreserveCountsResponse has binding name '_ns1__PreserveCountsResponse' for type '' */
#ifndef SOAP_TYPE_protocolv2__ns1__PreserveCountsResponse
#define SOAP_TYPE_protocolv2__ns1__PreserveCountsResponse (-1125695506)

#endif

/* _ns1__PreserveCounts has binding name '_ns1__PreserveCounts' for type '' */
#ifndef SOAP_TYPE_protocolv2__ns1__PreserveCounts
#define SOAP_TYPE_protocolv2__ns1__PreserveCounts (-1125695505)

#endif

/* _ns1__CountsByArticleResponse has binding name '_ns1__CountsByArticleResponse' for type '' */
#ifndef SOAP_TYPE_protocolv2__ns1__CountsByArticleResponse
#define SOAP_TYPE_protocolv2__ns1__CountsByArticleResponse (-1125695504)

#endif

/* _ns1__CountsByArticle has binding name '_ns1__CountsByArticle' for type '' */
#ifndef SOAP_TYPE_protocolv2__ns1__CountsByArticle
#define SOAP_TYPE_protocolv2__ns1__CountsByArticle (-1125695503)

#endif

/* _ns1__CountsResponse has binding name '_ns1__CountsResponse' for type '' */
#ifndef SOAP_TYPE_protocolv2__ns1__CountsResponse
#define SOAP_TYPE_protocolv2__ns1__CountsResponse (-1125695502)

#endif

/* _ns1__Counts has binding name '_ns1__Counts' for type '' */
#ifndef SOAP_TYPE_protocolv2__ns1__Counts
#define SOAP_TYPE_protocolv2__ns1__Counts (-1125695501)

#endif

/* ns1__ArrayOfCCompteurArticle has binding name 'ns1__ArrayOfCCompteurArticle' for type 'ns1:ArrayOfCCompteurArticle' */
#ifndef SOAP_TYPE_protocolv2_ns1__ArrayOfCCompteurArticle
#define SOAP_TYPE_protocolv2_ns1__ArrayOfCCompteurArticle (-1125695500)

#endif

/* ns1__CCompteurArticle has binding name 'ns1__CCompteurArticle' for type 'ns1:CCompteurArticle' */
#ifndef SOAP_TYPE_protocolv2_ns1__CCompteurArticle
#define SOAP_TYPE_protocolv2_ns1__CCompteurArticle (-1125695499)

#endif

/* ns1__CCounter has binding name 'ns1__CCounter' for type 'ns1:CCounter' */
#ifndef SOAP_TYPE_protocolv2_ns1__CCounter
#define SOAP_TYPE_protocolv2_ns1__CCounter (-1125695498)

#endif

/* ns1__CCompteurMouleCapteur has binding name 'ns1__CCompteurMouleCapteur' for type 'ns1:CCompteurMouleCapteur' */
#ifndef SOAP_TYPE_protocolv2_ns1__CCompteurMouleCapteur
#define SOAP_TYPE_protocolv2_ns1__CCompteurMouleCapteur (-1125695497)

#endif

/* ns1__CCompteurMoule has binding name 'ns1__CCompteurMoule' for type 'ns1:CCompteurMoule' */
#ifndef SOAP_TYPE_protocolv2_ns1__CCompteurMoule
#define SOAP_TYPE_protocolv2_ns1__CCompteurMoule (-1125695496)

#endif

/* ns1__CCompteurMachine has binding name 'ns1__CCompteurMachine' for type 'ns1:CCompteurMachine' */
#ifndef SOAP_TYPE_protocolv2_ns1__CCompteurMachine
#define SOAP_TYPE_protocolv2_ns1__CCompteurMachine (-1125695495)

#endif

/* ns1__CountsByArticleResult has binding name 'ns1__CountsByArticleResult' for type 'ns1:CountsByArticleResult' */
#ifndef SOAP_TYPE_protocolv2_ns1__CountsByArticleResult
#define SOAP_TYPE_protocolv2_ns1__CountsByArticleResult (-1125695494)

#endif

/* struct SOAP_ENV__Fault has binding name 'SOAP_ENV__Fault' for type '' */
#ifndef SOAP_TYPE_protocolv2_SOAP_ENV__Fault
#define SOAP_TYPE_protocolv2_SOAP_ENV__Fault (-1125695495)

#endif

/* struct SOAP_ENV__Reason has binding name 'SOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_protocolv2_SOAP_ENV__Reason
#define SOAP_TYPE_protocolv2_SOAP_ENV__Reason (-1125695494)

#endif

/* struct SOAP_ENV__Detail has binding name 'SOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_protocolv2_SOAP_ENV__Detail
#define SOAP_TYPE_protocolv2_SOAP_ENV__Detail (-1125695491)

#endif

/* struct SOAP_ENV__Code has binding name 'SOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_protocolv2_SOAP_ENV__Code
#define SOAP_TYPE_protocolv2_SOAP_ENV__Code (-1125695489)

#endif

/* struct SOAP_ENV__Header has binding name 'SOAP_ENV__Header' for type '' */
#ifndef SOAP_TYPE_protocolv2_SOAP_ENV__Header
#define SOAP_TYPE_protocolv2_SOAP_ENV__Header (-1125695488)

#endif

/* struct SOAP_ENV__Reason * has binding name 'PointerToSOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_protocolv2_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_protocolv2_PointerToSOAP_ENV__Reason (-1125695497)

#endif

/* struct SOAP_ENV__Detail * has binding name 'PointerToSOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_protocolv2_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_protocolv2_PointerToSOAP_ENV__Detail (-1125695496)

#endif

/* struct SOAP_ENV__Code * has binding name 'PointerToSOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_protocolv2_PointerToSOAP_ENV__Code
#define SOAP_TYPE_protocolv2_PointerToSOAP_ENV__Code (-1125695490)

#endif

/* _ns1__GetLastRequestDate * has binding name 'PointerTo_ns1__GetLastRequestDate' for type '' */
#ifndef SOAP_TYPE_protocolv2_PointerTo_ns1__GetLastRequestDate
#define SOAP_TYPE_protocolv2_PointerTo_ns1__GetLastRequestDate (-1125695593)

#endif

/* _ns1__AddSamples * has binding name 'PointerTo_ns1__AddSamples' for type '' */
#ifndef SOAP_TYPE_protocolv2_PointerTo_ns1__AddSamples
#define SOAP_TYPE_protocolv2_PointerTo_ns1__AddSamples (-1125695589)

#endif

/* _ns1__AddEjectedMolds * has binding name 'PointerTo_ns1__AddEjectedMolds' for type '' */
#ifndef SOAP_TYPE_protocolv2_PointerTo_ns1__AddEjectedMolds
#define SOAP_TYPE_protocolv2_PointerTo_ns1__AddEjectedMolds (-1125695585)

#endif

/* _ns1__AddMountedMolds * has binding name 'PointerTo_ns1__AddMountedMolds' for type '' */
#ifndef SOAP_TYPE_protocolv2_PointerTo_ns1__AddMountedMolds
#define SOAP_TYPE_protocolv2_PointerTo_ns1__AddMountedMolds (-1125695581)

#endif

/* _ns1__Samples * has binding name 'PointerTo_ns1__Samples' for type '' */
#ifndef SOAP_TYPE_protocolv2_PointerTo_ns1__Samples
#define SOAP_TYPE_protocolv2_PointerTo_ns1__Samples (-1125695577)

#endif

/* _ns1__Alarms * has binding name 'PointerTo_ns1__Alarms' for type '' */
#ifndef SOAP_TYPE_protocolv2_PointerTo_ns1__Alarms
#define SOAP_TYPE_protocolv2_PointerTo_ns1__Alarms (-1125695573)

#endif

/* _ns1__Measures * has binding name 'PointerTo_ns1__Measures' for type '' */
#ifndef SOAP_TYPE_protocolv2_PointerTo_ns1__Measures
#define SOAP_TYPE_protocolv2_PointerTo_ns1__Measures (-1125695569)

#endif

/* _ns1__ReadenMolds * has binding name 'PointerTo_ns1__ReadenMolds' for type '' */
#ifndef SOAP_TYPE_protocolv2_PointerTo_ns1__ReadenMolds
#define SOAP_TYPE_protocolv2_PointerTo_ns1__ReadenMolds (-1125695565)

#endif

/* _ns1__EjectedMolds * has binding name 'PointerTo_ns1__EjectedMolds' for type '' */
#ifndef SOAP_TYPE_protocolv2_PointerTo_ns1__EjectedMolds
#define SOAP_TYPE_protocolv2_PointerTo_ns1__EjectedMolds (-1125695561)

#endif

/* _ns1__MountedMolds * has binding name 'PointerTo_ns1__MountedMolds' for type '' */
#ifndef SOAP_TYPE_protocolv2_PointerTo_ns1__MountedMolds
#define SOAP_TYPE_protocolv2_PointerTo_ns1__MountedMolds (-1125695557)

#endif

/* _ns1__GetUpdatedLastRequestDate * has binding name 'PointerTo_ns1__GetUpdatedLastRequestDate' for type '' */
#ifndef SOAP_TYPE_protocolv2_PointerTo_ns1__GetUpdatedLastRequestDate
#define SOAP_TYPE_protocolv2_PointerTo_ns1__GetUpdatedLastRequestDate (-1125695553)

#endif

/* _ns1__PreserveCounts * has binding name 'PointerTo_ns1__PreserveCounts' for type '' */
#ifndef SOAP_TYPE_protocolv2_PointerTo_ns1__PreserveCounts
#define SOAP_TYPE_protocolv2_PointerTo_ns1__PreserveCounts (-1125695549)

#endif

/* _ns1__CountsByArticle * has binding name 'PointerTo_ns1__CountsByArticle' for type '' */
#ifndef SOAP_TYPE_protocolv2_PointerTo_ns1__CountsByArticle
#define SOAP_TYPE_protocolv2_PointerTo_ns1__CountsByArticle (-1125695545)

#endif

/* _ns1__Counts * has binding name 'PointerTo_ns1__Counts' for type '' */
#ifndef SOAP_TYPE_protocolv2_PointerTo_ns1__Counts
#define SOAP_TYPE_protocolv2_PointerTo_ns1__Counts (-1125695541)

#endif

/* ns1__CCompteurMouleCapteur ** has binding name 'PointerToPointerTons1__CCompteurMouleCapteur' for type 'ns1:CCompteurMouleCapteur' */
#ifndef SOAP_TYPE_protocolv2_PointerToPointerTons1__CCompteurMouleCapteur
#define SOAP_TYPE_protocolv2_PointerToPointerTons1__CCompteurMouleCapteur (-1125695540)

#endif

/* ns1__CCompteurMouleCapteur * has binding name 'PointerTons1__CCompteurMouleCapteur' for type 'ns1:CCompteurMouleCapteur' */
#ifndef SOAP_TYPE_protocolv2_PointerTons1__CCompteurMouleCapteur
#define SOAP_TYPE_protocolv2_PointerTons1__CCompteurMouleCapteur (-1125695539)

#endif

/* ns1__CCounter ** has binding name 'PointerToPointerTons1__CCounter' for type 'ns1:CCounter' */
#ifndef SOAP_TYPE_protocolv2_PointerToPointerTons1__CCounter
#define SOAP_TYPE_protocolv2_PointerToPointerTons1__CCounter (-1125695538)

#endif

/* ns1__CCounter * has binding name 'PointerTons1__CCounter' for type 'ns1:CCounter' */
#ifndef SOAP_TYPE_protocolv2_PointerTons1__CCounter
#define SOAP_TYPE_protocolv2_PointerTons1__CCounter (-1125695537)

#endif

/* ns1__ArrayOfCCompteurArticle * has binding name 'PointerTons1__ArrayOfCCompteurArticle' for type 'ns1:ArrayOfCCompteurArticle' */
#ifndef SOAP_TYPE_protocolv2_PointerTons1__ArrayOfCCompteurArticle
#define SOAP_TYPE_protocolv2_PointerTons1__ArrayOfCCompteurArticle (-1125695536)

#endif

/* ns1__CountsByArticleResult * has binding name 'PointerTons1__CountsByArticleResult' for type 'ns1:CountsByArticleResult' */
#ifndef SOAP_TYPE_protocolv2_PointerTons1__CountsByArticleResult
#define SOAP_TYPE_protocolv2_PointerTons1__CountsByArticleResult (-1125695534)

#endif

/* ns1__CCompteurArticle ** has binding name 'PointerToPointerTons1__CCompteurArticle' for type 'ns1:CCompteurArticle' */
#ifndef SOAP_TYPE_protocolv2_PointerToPointerTons1__CCompteurArticle
#define SOAP_TYPE_protocolv2_PointerToPointerTons1__CCompteurArticle (-1125695533)

#endif

/* ns1__CCompteurArticle * has binding name 'PointerTons1__CCompteurArticle' for type 'ns1:CCompteurArticle' */
#ifndef SOAP_TYPE_protocolv2_PointerTons1__CCompteurArticle
#define SOAP_TYPE_protocolv2_PointerTons1__CCompteurArticle (-1125695532)

#endif

/* int * has binding name 'PointerToint' for type 'xsd:int' */
#ifndef SOAP_TYPE_protocolv2_PointerToint
#define SOAP_TYPE_protocolv2_PointerToint (-1125695531)

#endif

/* ns1__CCompteurMachine * has binding name 'PointerTons1__CCompteurMachine' for type 'ns1:CCompteurMachine' */
#ifndef SOAP_TYPE_protocolv2_PointerTons1__CCompteurMachine
#define SOAP_TYPE_protocolv2_PointerTons1__CCompteurMachine (-1125695529)

#endif

/* _QName has binding name '_QName' for type 'xsd:QName' */
#ifndef SOAP_TYPE_protocolv2__QName
#define SOAP_TYPE_protocolv2__QName (-1125695493)

#endif

/* _XML has binding name '_XML' for type '' */
#ifndef SOAP_TYPE_protocolv2__XML
#define SOAP_TYPE_protocolv2__XML (-1125695492)

#endif

/* char * has binding name 'string' for type 'xsd:string' */
#ifndef SOAP_TYPE_protocolv2_string
#define SOAP_TYPE_protocolv2_string (-1125695491)

#endif

/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Client-Side Call Stub Functions                                            *
 *                                                                            *
\******************************************************************************/

    
    /** Web service synchronous operation 'soap_call___ns1__Counts' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__Counts(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__Counts *ns1__Counts, _ns1__CountsResponse &ns1__CountsResponse);
    /** Web service asynchronous operation 'soap_send___ns1__Counts' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___ns1__Counts(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__Counts *ns1__Counts);
    /** Web service asynchronous operation 'soap_recv___ns1__Counts' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___ns1__Counts(struct soap *soap, _ns1__CountsResponse &ns1__CountsResponse);
    
    /** Web service synchronous operation 'soap_call___ns1__CountsByArticle' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CountsByArticle(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__CountsByArticle *ns1__CountsByArticle, _ns1__CountsByArticleResponse &ns1__CountsByArticleResponse);
    /** Web service asynchronous operation 'soap_send___ns1__CountsByArticle' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___ns1__CountsByArticle(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__CountsByArticle *ns1__CountsByArticle);
    /** Web service asynchronous operation 'soap_recv___ns1__CountsByArticle' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___ns1__CountsByArticle(struct soap *soap, _ns1__CountsByArticleResponse &ns1__CountsByArticleResponse);
    
    /** Web service synchronous operation 'soap_call___ns1__PreserveCounts' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__PreserveCounts(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__PreserveCounts *ns1__PreserveCounts, _ns1__PreserveCountsResponse &ns1__PreserveCountsResponse);
    /** Web service asynchronous operation 'soap_send___ns1__PreserveCounts' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___ns1__PreserveCounts(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__PreserveCounts *ns1__PreserveCounts);
    /** Web service asynchronous operation 'soap_recv___ns1__PreserveCounts' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___ns1__PreserveCounts(struct soap *soap, _ns1__PreserveCountsResponse &ns1__PreserveCountsResponse);
    
    /** Web service synchronous operation 'soap_call___ns1__GetUpdatedLastRequestDate' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetUpdatedLastRequestDate(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetUpdatedLastRequestDate *ns1__GetUpdatedLastRequestDate, _ns1__GetUpdatedLastRequestDateResponse &ns1__GetUpdatedLastRequestDateResponse);
    /** Web service asynchronous operation 'soap_send___ns1__GetUpdatedLastRequestDate' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___ns1__GetUpdatedLastRequestDate(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetUpdatedLastRequestDate *ns1__GetUpdatedLastRequestDate);
    /** Web service asynchronous operation 'soap_recv___ns1__GetUpdatedLastRequestDate' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___ns1__GetUpdatedLastRequestDate(struct soap *soap, _ns1__GetUpdatedLastRequestDateResponse &ns1__GetUpdatedLastRequestDateResponse);
    
    /** Web service synchronous operation 'soap_call___ns1__MountedMolds' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__MountedMolds(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__MountedMolds *ns1__MountedMolds, _ns1__MountedMoldsResponse &ns1__MountedMoldsResponse);
    /** Web service asynchronous operation 'soap_send___ns1__MountedMolds' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___ns1__MountedMolds(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__MountedMolds *ns1__MountedMolds);
    /** Web service asynchronous operation 'soap_recv___ns1__MountedMolds' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___ns1__MountedMolds(struct soap *soap, _ns1__MountedMoldsResponse &ns1__MountedMoldsResponse);
    
    /** Web service synchronous operation 'soap_call___ns1__EjectedMolds' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__EjectedMolds(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__EjectedMolds *ns1__EjectedMolds, _ns1__EjectedMoldsResponse &ns1__EjectedMoldsResponse);
    /** Web service asynchronous operation 'soap_send___ns1__EjectedMolds' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___ns1__EjectedMolds(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__EjectedMolds *ns1__EjectedMolds);
    /** Web service asynchronous operation 'soap_recv___ns1__EjectedMolds' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___ns1__EjectedMolds(struct soap *soap, _ns1__EjectedMoldsResponse &ns1__EjectedMoldsResponse);
    
    /** Web service synchronous operation 'soap_call___ns1__ReadenMolds' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ReadenMolds(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__ReadenMolds *ns1__ReadenMolds, _ns1__ReadenMoldsResponse &ns1__ReadenMoldsResponse);
    /** Web service asynchronous operation 'soap_send___ns1__ReadenMolds' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___ns1__ReadenMolds(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__ReadenMolds *ns1__ReadenMolds);
    /** Web service asynchronous operation 'soap_recv___ns1__ReadenMolds' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___ns1__ReadenMolds(struct soap *soap, _ns1__ReadenMoldsResponse &ns1__ReadenMoldsResponse);
    
    /** Web service synchronous operation 'soap_call___ns1__Measures' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__Measures(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__Measures *ns1__Measures, _ns1__MeasuresResponse &ns1__MeasuresResponse);
    /** Web service asynchronous operation 'soap_send___ns1__Measures' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___ns1__Measures(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__Measures *ns1__Measures);
    /** Web service asynchronous operation 'soap_recv___ns1__Measures' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___ns1__Measures(struct soap *soap, _ns1__MeasuresResponse &ns1__MeasuresResponse);
    
    /** Web service synchronous operation 'soap_call___ns1__Alarms' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__Alarms(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__Alarms *ns1__Alarms, _ns1__AlarmsResponse &ns1__AlarmsResponse);
    /** Web service asynchronous operation 'soap_send___ns1__Alarms' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___ns1__Alarms(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__Alarms *ns1__Alarms);
    /** Web service asynchronous operation 'soap_recv___ns1__Alarms' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___ns1__Alarms(struct soap *soap, _ns1__AlarmsResponse &ns1__AlarmsResponse);
    
    /** Web service synchronous operation 'soap_call___ns1__Samples' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__Samples(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__Samples *ns1__Samples, _ns1__SamplesResponse &ns1__SamplesResponse);
    /** Web service asynchronous operation 'soap_send___ns1__Samples' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___ns1__Samples(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__Samples *ns1__Samples);
    /** Web service asynchronous operation 'soap_recv___ns1__Samples' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___ns1__Samples(struct soap *soap, _ns1__SamplesResponse &ns1__SamplesResponse);
    
    /** Web service synchronous operation 'soap_call___ns1__AddMountedMolds' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AddMountedMolds(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__AddMountedMolds *ns1__AddMountedMolds, _ns1__AddMountedMoldsResponse &ns1__AddMountedMoldsResponse);
    /** Web service asynchronous operation 'soap_send___ns1__AddMountedMolds' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___ns1__AddMountedMolds(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__AddMountedMolds *ns1__AddMountedMolds);
    /** Web service asynchronous operation 'soap_recv___ns1__AddMountedMolds' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___ns1__AddMountedMolds(struct soap *soap, _ns1__AddMountedMoldsResponse &ns1__AddMountedMoldsResponse);
    
    /** Web service synchronous operation 'soap_call___ns1__AddEjectedMolds' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AddEjectedMolds(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__AddEjectedMolds *ns1__AddEjectedMolds, _ns1__AddEjectedMoldsResponse &ns1__AddEjectedMoldsResponse);
    /** Web service asynchronous operation 'soap_send___ns1__AddEjectedMolds' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___ns1__AddEjectedMolds(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__AddEjectedMolds *ns1__AddEjectedMolds);
    /** Web service asynchronous operation 'soap_recv___ns1__AddEjectedMolds' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___ns1__AddEjectedMolds(struct soap *soap, _ns1__AddEjectedMoldsResponse &ns1__AddEjectedMoldsResponse);
    
    /** Web service synchronous operation 'soap_call___ns1__AddSamples' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AddSamples(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__AddSamples *ns1__AddSamples, _ns1__AddSamplesResponse &ns1__AddSamplesResponse);
    /** Web service asynchronous operation 'soap_send___ns1__AddSamples' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___ns1__AddSamples(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__AddSamples *ns1__AddSamples);
    /** Web service asynchronous operation 'soap_recv___ns1__AddSamples' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___ns1__AddSamples(struct soap *soap, _ns1__AddSamplesResponse &ns1__AddSamplesResponse);
    
    /** Web service synchronous operation 'soap_call___ns1__GetLastRequestDate' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetLastRequestDate(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetLastRequestDate *ns1__GetLastRequestDate, _ns1__GetLastRequestDateResponse &ns1__GetLastRequestDateResponse);
    /** Web service asynchronous operation 'soap_send___ns1__GetLastRequestDate' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___ns1__GetLastRequestDate(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetLastRequestDate *ns1__GetLastRequestDate);
    /** Web service asynchronous operation 'soap_recv___ns1__GetLastRequestDate' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___ns1__GetLastRequestDate(struct soap *soap, _ns1__GetLastRequestDateResponse &ns1__GetLastRequestDateResponse);
    
    /** Web service synchronous operation 'soap_call___ns1__Counts_' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__Counts_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__Counts *ns1__Counts, _ns1__CountsResponse &ns1__CountsResponse);
    /** Web service asynchronous operation 'soap_send___ns1__Counts_' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___ns1__Counts_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__Counts *ns1__Counts);
    /** Web service asynchronous operation 'soap_recv___ns1__Counts_' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___ns1__Counts_(struct soap *soap, _ns1__CountsResponse &ns1__CountsResponse);
    
    /** Web service synchronous operation 'soap_call___ns1__CountsByArticle_' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__CountsByArticle_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__CountsByArticle *ns1__CountsByArticle, _ns1__CountsByArticleResponse &ns1__CountsByArticleResponse);
    /** Web service asynchronous operation 'soap_send___ns1__CountsByArticle_' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___ns1__CountsByArticle_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__CountsByArticle *ns1__CountsByArticle);
    /** Web service asynchronous operation 'soap_recv___ns1__CountsByArticle_' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___ns1__CountsByArticle_(struct soap *soap, _ns1__CountsByArticleResponse &ns1__CountsByArticleResponse);
    
    /** Web service synchronous operation 'soap_call___ns1__PreserveCounts_' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__PreserveCounts_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__PreserveCounts *ns1__PreserveCounts, _ns1__PreserveCountsResponse &ns1__PreserveCountsResponse);
    /** Web service asynchronous operation 'soap_send___ns1__PreserveCounts_' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___ns1__PreserveCounts_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__PreserveCounts *ns1__PreserveCounts);
    /** Web service asynchronous operation 'soap_recv___ns1__PreserveCounts_' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___ns1__PreserveCounts_(struct soap *soap, _ns1__PreserveCountsResponse &ns1__PreserveCountsResponse);
    
    /** Web service synchronous operation 'soap_call___ns1__GetUpdatedLastRequestDate_' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetUpdatedLastRequestDate_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetUpdatedLastRequestDate *ns1__GetUpdatedLastRequestDate, _ns1__GetUpdatedLastRequestDateResponse &ns1__GetUpdatedLastRequestDateResponse);
    /** Web service asynchronous operation 'soap_send___ns1__GetUpdatedLastRequestDate_' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___ns1__GetUpdatedLastRequestDate_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetUpdatedLastRequestDate *ns1__GetUpdatedLastRequestDate);
    /** Web service asynchronous operation 'soap_recv___ns1__GetUpdatedLastRequestDate_' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___ns1__GetUpdatedLastRequestDate_(struct soap *soap, _ns1__GetUpdatedLastRequestDateResponse &ns1__GetUpdatedLastRequestDateResponse);
    
    /** Web service synchronous operation 'soap_call___ns1__MountedMolds_' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__MountedMolds_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__MountedMolds *ns1__MountedMolds, _ns1__MountedMoldsResponse &ns1__MountedMoldsResponse);
    /** Web service asynchronous operation 'soap_send___ns1__MountedMolds_' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___ns1__MountedMolds_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__MountedMolds *ns1__MountedMolds);
    /** Web service asynchronous operation 'soap_recv___ns1__MountedMolds_' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___ns1__MountedMolds_(struct soap *soap, _ns1__MountedMoldsResponse &ns1__MountedMoldsResponse);
    
    /** Web service synchronous operation 'soap_call___ns1__EjectedMolds_' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__EjectedMolds_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__EjectedMolds *ns1__EjectedMolds, _ns1__EjectedMoldsResponse &ns1__EjectedMoldsResponse);
    /** Web service asynchronous operation 'soap_send___ns1__EjectedMolds_' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___ns1__EjectedMolds_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__EjectedMolds *ns1__EjectedMolds);
    /** Web service asynchronous operation 'soap_recv___ns1__EjectedMolds_' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___ns1__EjectedMolds_(struct soap *soap, _ns1__EjectedMoldsResponse &ns1__EjectedMoldsResponse);
    
    /** Web service synchronous operation 'soap_call___ns1__ReadenMolds_' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ReadenMolds_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__ReadenMolds *ns1__ReadenMolds, _ns1__ReadenMoldsResponse &ns1__ReadenMoldsResponse);
    /** Web service asynchronous operation 'soap_send___ns1__ReadenMolds_' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___ns1__ReadenMolds_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__ReadenMolds *ns1__ReadenMolds);
    /** Web service asynchronous operation 'soap_recv___ns1__ReadenMolds_' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___ns1__ReadenMolds_(struct soap *soap, _ns1__ReadenMoldsResponse &ns1__ReadenMoldsResponse);
    
    /** Web service synchronous operation 'soap_call___ns1__Measures_' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__Measures_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__Measures *ns1__Measures, _ns1__MeasuresResponse &ns1__MeasuresResponse);
    /** Web service asynchronous operation 'soap_send___ns1__Measures_' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___ns1__Measures_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__Measures *ns1__Measures);
    /** Web service asynchronous operation 'soap_recv___ns1__Measures_' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___ns1__Measures_(struct soap *soap, _ns1__MeasuresResponse &ns1__MeasuresResponse);
    
    /** Web service synchronous operation 'soap_call___ns1__Alarms_' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__Alarms_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__Alarms *ns1__Alarms, _ns1__AlarmsResponse &ns1__AlarmsResponse);
    /** Web service asynchronous operation 'soap_send___ns1__Alarms_' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___ns1__Alarms_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__Alarms *ns1__Alarms);
    /** Web service asynchronous operation 'soap_recv___ns1__Alarms_' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___ns1__Alarms_(struct soap *soap, _ns1__AlarmsResponse &ns1__AlarmsResponse);
    
    /** Web service synchronous operation 'soap_call___ns1__Samples_' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__Samples_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__Samples *ns1__Samples, _ns1__SamplesResponse &ns1__SamplesResponse);
    /** Web service asynchronous operation 'soap_send___ns1__Samples_' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___ns1__Samples_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__Samples *ns1__Samples);
    /** Web service asynchronous operation 'soap_recv___ns1__Samples_' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___ns1__Samples_(struct soap *soap, _ns1__SamplesResponse &ns1__SamplesResponse);
    
    /** Web service synchronous operation 'soap_call___ns1__AddMountedMolds_' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AddMountedMolds_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__AddMountedMolds *ns1__AddMountedMolds, _ns1__AddMountedMoldsResponse &ns1__AddMountedMoldsResponse);
    /** Web service asynchronous operation 'soap_send___ns1__AddMountedMolds_' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___ns1__AddMountedMolds_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__AddMountedMolds *ns1__AddMountedMolds);
    /** Web service asynchronous operation 'soap_recv___ns1__AddMountedMolds_' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___ns1__AddMountedMolds_(struct soap *soap, _ns1__AddMountedMoldsResponse &ns1__AddMountedMoldsResponse);
    
    /** Web service synchronous operation 'soap_call___ns1__AddEjectedMolds_' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AddEjectedMolds_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__AddEjectedMolds *ns1__AddEjectedMolds, _ns1__AddEjectedMoldsResponse &ns1__AddEjectedMoldsResponse);
    /** Web service asynchronous operation 'soap_send___ns1__AddEjectedMolds_' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___ns1__AddEjectedMolds_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__AddEjectedMolds *ns1__AddEjectedMolds);
    /** Web service asynchronous operation 'soap_recv___ns1__AddEjectedMolds_' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___ns1__AddEjectedMolds_(struct soap *soap, _ns1__AddEjectedMoldsResponse &ns1__AddEjectedMoldsResponse);
    
    /** Web service synchronous operation 'soap_call___ns1__AddSamples_' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AddSamples_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__AddSamples *ns1__AddSamples, _ns1__AddSamplesResponse &ns1__AddSamplesResponse);
    /** Web service asynchronous operation 'soap_send___ns1__AddSamples_' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___ns1__AddSamples_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__AddSamples *ns1__AddSamples);
    /** Web service asynchronous operation 'soap_recv___ns1__AddSamples_' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___ns1__AddSamples_(struct soap *soap, _ns1__AddSamplesResponse &ns1__AddSamplesResponse);
    
    /** Web service synchronous operation 'soap_call___ns1__GetLastRequestDate_' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetLastRequestDate_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetLastRequestDate *ns1__GetLastRequestDate, _ns1__GetLastRequestDateResponse &ns1__GetLastRequestDateResponse);
    /** Web service asynchronous operation 'soap_send___ns1__GetLastRequestDate_' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_send___ns1__GetLastRequestDate_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__GetLastRequestDate *ns1__GetLastRequestDate);
    /** Web service asynchronous operation 'soap_recv___ns1__GetLastRequestDate_' to receive a response message from the connected endpoint, returns SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 soap_recv___ns1__GetLastRequestDate_(struct soap *soap, _ns1__GetLastRequestDateResponse &ns1__GetLastRequestDateResponse);

} // namespace protocolv2


#endif

/* End of protocolv2Stub.h */
